{"version":3,"sources":["@wordpress/components/src/slot-fill/context.js"],"names":["sortBy","forEach","without","Component","createContext","registerSlot","unregisterSlot","registerFill","unregisterFill","getSlot","getFills","Provider","Consumer","SlotFillProvider","arguments","bind","slots","fills","state","name","slot","previousSlot","forceUpdateFills","forceUpdateSlot","forceUpdate","instance","resetFillOccurrence","slotInstance","resetOccurrence","props","children"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { sortBy, forEach, without } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component, createContext } from '@wordpress/element';\n\nconst { Provider, Consumer } = createContext( {\n\tregisterSlot: () => {},\n\tunregisterSlot: () => {},\n\tregisterFill: () => {},\n\tunregisterFill: () => {},\n\tgetSlot: () => {},\n\tgetFills: () => {},\n} );\n\nclass SlotFillProvider extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.registerSlot = this.registerSlot.bind( this );\n\t\tthis.registerFill = this.registerFill.bind( this );\n\t\tthis.unregisterSlot = this.unregisterSlot.bind( this );\n\t\tthis.unregisterFill = this.unregisterFill.bind( this );\n\t\tthis.getSlot = this.getSlot.bind( this );\n\t\tthis.getFills = this.getFills.bind( this );\n\n\t\tthis.slots = {};\n\t\tthis.fills = {};\n\t\tthis.state = {\n\t\t\tregisterSlot: this.registerSlot,\n\t\t\tunregisterSlot: this.unregisterSlot,\n\t\t\tregisterFill: this.registerFill,\n\t\t\tunregisterFill: this.unregisterFill,\n\t\t\tgetSlot: this.getSlot,\n\t\t\tgetFills: this.getFills,\n\t\t};\n\t}\n\n\tregisterSlot( name, slot ) {\n\t\tconst previousSlot = this.slots[ name ];\n\t\tthis.slots[ name ] = slot;\n\t\tthis.forceUpdateFills( name );\n\n\t\t// Sometimes the fills are registered after the initial render of slot\n\t\t// But before the registerSlot call, we need to rerender the slot\n\t\tthis.forceUpdateSlot( name );\n\n\t\t// If a new instance of a slot is being mounted while another with the\n\t\t// same name exists, force its update _after_ the new slot has been\n\t\t// assigned into the instance, such that its own rendering of children\n\t\t// will be empty (the new Slot will subsume all fills for this name).\n\t\tif ( previousSlot ) {\n\t\t\tpreviousSlot.forceUpdate();\n\t\t}\n\t}\n\n\tregisterFill( name, instance ) {\n\t\tthis.fills[ name ] = [\n\t\t\t...( this.fills[ name ] || [] ),\n\t\t\tinstance,\n\t\t];\n\t\tthis.forceUpdateSlot( name );\n\t}\n\n\tunregisterSlot( name, instance ) {\n\t\t// If a previous instance of a Slot by this name unmounts, do nothing,\n\t\t// as the slot and its fills should only be removed for the current\n\t\t// known instance.\n\t\tif ( this.slots[ name ] !== instance ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdelete this.slots[ name ];\n\t\tthis.forceUpdateFills( name );\n\t}\n\n\tunregisterFill( name, instance ) {\n\t\tthis.fills[ name ] = without(\n\t\t\tthis.fills[ name ],\n\t\t\tinstance\n\t\t);\n\t\tthis.resetFillOccurrence( name );\n\t\tthis.forceUpdateSlot( name );\n\t}\n\n\tgetSlot( name ) {\n\t\treturn this.slots[ name ];\n\t}\n\n\tgetFills( name, slotInstance ) {\n\t\t// Fills should only be returned for the current instance of the slot\n\t\t// in which they occupy.\n\t\tif ( this.slots[ name ] !== slotInstance ) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn sortBy( this.fills[ name ], 'occurrence' );\n\t}\n\n\tresetFillOccurrence( name ) {\n\t\tforEach( this.fills[ name ], ( instance ) => {\n\t\t\tinstance.resetOccurrence();\n\t\t} );\n\t}\n\n\tforceUpdateFills( name ) {\n\t\tforEach( this.fills[ name ], ( instance ) => {\n\t\t\tinstance.forceUpdate();\n\t\t} );\n\t}\n\n\tforceUpdateSlot( name ) {\n\t\tconst slot = this.getSlot( name );\n\n\t\tif ( slot ) {\n\t\t\tslot.forceUpdate();\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Provider value={ this.state }>\n\t\t\t\t{ this.props.children }\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n\nexport default SlotFillProvider;\nexport { Consumer };\n"]}