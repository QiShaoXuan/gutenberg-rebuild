{"version":3,"sources":["@wordpress/e2e-test-utils/src/mocks/mock-or-transform.js"],"names":["fetch","getJSONResponse","mockOrTransform","mockCheck","mock","responseObjectTransform","obj","request","url","headers","method","body","postData","response","json","responseObject","respond"],"mappings":";;;AAAA;;;AAGA,OAAOA,KAAP,MAAkB,YAAlB;AAEA;;;;AAGA,SAASC,eAAT,QAAgC,6BAAhC;AAEA;;;;;;;;;;AASA,OAAO,SAASC,eAAT,CACNC,SADM,EAENC,IAFM,EAIL;AAAA,MADDC,uBACC,uEADyB,UAAEC,GAAF;AAAA,WAAWA,GAAX;AAAA,GACzB;AACD;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAQC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAIiBP,KAAK,CAAEO,OAAO,CAACC,GAAR,EAAF,EAAiB;AAC5CC,kBAAAA,OAAO,EAAEF,OAAO,CAACE,OAAR,EADmC;AAE5CC,kBAAAA,MAAM,EAAEH,OAAO,CAACG,MAAR,EAFoC;AAG5CC,kBAAAA,IAAI,EAAEJ,OAAO,CAACK,QAAR;AAHsC,iBAAjB,CAJtB;;AAAA;AAIAC,gBAAAA,QAJA;AAAA;AAAA,uBASuBA,QAAQ,CAACC,IAAT,EATvB;;AAAA;AASAC,gBAAAA,cATA;;AAUN,oBAAKZ,SAAS,CAAEY,cAAF,CAAd,EAAmC;AAClCR,kBAAAA,OAAO,CAACS,OAAR,CAAiBf,eAAe,CAAEG,IAAF,CAAhC;AACA,iBAFD,MAEO;AACNG,kBAAAA,OAAO,CAACS,OAAR,CAAiBf,eAAe,CAAEI,uBAAuB,CAAEU,cAAF,CAAzB,CAAhC;AACA;;AAdK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA","sourcesContent":["/**\n * External dependencies\n */\nimport fetch from 'node-fetch';\n\n/**\n * Internal dependencies\n */\nimport { getJSONResponse } from '../shared/get-json-response';\n\n/**\n * Mocks a request with the supplied mock object, or allows it to run with an optional transform, based on the\n * deserialised JSON response for the request.\n *\n * @param {function} mockCheck function that returns true if the request should be mocked.\n * @param {Object} mock A mock object to wrap in a JSON response, if the request should be mocked.\n * @param {function|undefined} responseObjectTransform An optional function that transforms the response's object before the response is used.\n * @return {Promise} Promise that uses `mockCheck` to see if a request should be mocked with `mock`, and optionally transforms the response with `responseObjectTransform`.\n */\nexport function mockOrTransform(\n\tmockCheck,\n\tmock,\n\tresponseObjectTransform = ( obj ) => obj\n) {\n\treturn async ( request ) => {\n\t\t// Because we can't get the responses to requests and modify them on the fly,\n\t\t// we have to make our own request and get the response, then apply the\n\t\t// optional transform to the json encoded object.\n\t\tconst response = await fetch( request.url(), {\n\t\t\theaders: request.headers(),\n\t\t\tmethod: request.method(),\n\t\t\tbody: request.postData(),\n\t\t} );\n\t\tconst responseObject = await response.json();\n\t\tif ( mockCheck( responseObject ) ) {\n\t\t\trequest.respond( getJSONResponse( mock ) );\n\t\t} else {\n\t\t\trequest.respond( getJSONResponse( responseObjectTransform( responseObject ) ) );\n\t\t}\n\t};\n}\n"]}