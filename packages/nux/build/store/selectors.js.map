{"version":3,"sources":["@wordpress/nux/src/store/selectors.js"],"names":["getAssociatedGuide","state","tipId","guides","tipIds","nonDismissedTips","preferences","dismissedTips","currentTipId","nextTipId","isTipVisible","areTipsEnabled","associatedGuide"],"mappings":";;;;;;;;;;;;;AAGA;;AACA;;AAJA;;;;AAMA;;;;;;;;;AASA;;;;;;;;;AASO,IAAMA,kBAAkB,GAAG,qBACjC,UAAEC,KAAF,EAASC,KAAT,EAAoB;AAAA;AAAA;AAAA;;AAAA;AACnB,yBAAsBD,KAAK,CAACE,MAA5B,8HAAqC;AAAA,UAAzBC,MAAyB;;AACpC,UAAK,sBAAUA,MAAV,EAAkBF,KAAlB,CAAL,EAAiC;AAChC,YAAMG,gBAAgB,GAAG,wBAAYD,MAAZ,EAAoB,kBAAMH,KAAK,CAACK,WAAN,CAAkBC,aAAxB,CAApB,CAAzB;;AADgC,6DAEkBF,gBAFlB;AAAA;AAAA,YAExBG,YAFwB,mCAET,IAFS;AAAA;AAAA,YAEHC,SAFG,oCAES,IAFT;;AAGhC,eAAO;AAAEL,UAAAA,MAAM,EAANA,MAAF;AAAUI,UAAAA,YAAY,EAAZA,YAAV;AAAwBC,UAAAA,SAAS,EAATA;AAAxB,SAAP;AACA;AACD;AAPkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASnB,SAAO,IAAP;AACA,CAXgC,EAYjC,UAAER,KAAF;AAAA,SAAa,CACZA,KAAK,CAACE,MADM,EAEZF,KAAK,CAACK,WAAN,CAAkBC,aAFN,CAAb;AAAA,CAZiC,CAA3B;AAkBP;;;;;;;;;;;;;AAUO,SAASG,YAAT,CAAuBT,KAAvB,EAA8BC,KAA9B,EAAsC;AAC5C,MAAK,CAAED,KAAK,CAACK,WAAN,CAAkBK,cAAzB,EAA0C;AACzC,WAAO,KAAP;AACA;;AAED,MAAK,iBAAKV,KAAK,CAACK,WAAN,CAAkBC,aAAvB,EAAsC,CAAEL,KAAF,CAAtC,CAAL,EAAyD;AACxD,WAAO,KAAP;AACA;;AAED,MAAMU,eAAe,GAAGZ,kBAAkB,CAAEC,KAAF,EAASC,KAAT,CAA1C;;AACA,MAAKU,eAAe,IAAIA,eAAe,CAACJ,YAAhB,KAAiCN,KAAzD,EAAiE;AAChE,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA;AAED;;;;;;;;;AAOO,SAASS,cAAT,CAAyBV,KAAzB,EAAiC;AACvC,SAAOA,KAAK,CAACK,WAAN,CAAkBK,cAAzB;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { includes, difference, keys, has } from 'lodash';\n\n/**\n * An object containing information about a guide.\n *\n * @typedef {Object} NUX.GuideInfo\n * @property {string[]} tipIds       Which tips the guide contains.\n * @property {?string}  currentTipId The guide's currently showing tip.\n * @property {?string}  nextTipId    The guide's next tip to show.\n */\n\n/**\n * Returns an object describing the guide, if any, that the given tip is a part\n * of.\n *\n * @param {Object} state Global application state.\n * @param {string} tipId The tip to query.\n *\n * @return {?NUX.GuideInfo} Information about the associated guide.\n */\nexport const getAssociatedGuide = createSelector(\n\t( state, tipId ) => {\n\t\tfor ( const tipIds of state.guides ) {\n\t\t\tif ( includes( tipIds, tipId ) ) {\n\t\t\t\tconst nonDismissedTips = difference( tipIds, keys( state.preferences.dismissedTips ) );\n\t\t\t\tconst [ currentTipId = null, nextTipId = null ] = nonDismissedTips;\n\t\t\t\treturn { tipIds, currentTipId, nextTipId };\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\t( state ) => [\n\t\tstate.guides,\n\t\tstate.preferences.dismissedTips,\n\t],\n);\n\n/**\n * Determines whether or not the given tip is showing. Tips are hidden if they\n * are disabled, have been dismissed, or are not the current tip in any\n * guide that they have been added to.\n *\n * @param {Object} state Global application state.\n * @param {string} tipId The tip to query.\n *\n * @return {boolean} Whether or not the given tip is showing.\n */\nexport function isTipVisible( state, tipId ) {\n\tif ( ! state.preferences.areTipsEnabled ) {\n\t\treturn false;\n\t}\n\n\tif ( has( state.preferences.dismissedTips, [ tipId ] ) ) {\n\t\treturn false;\n\t}\n\n\tconst associatedGuide = getAssociatedGuide( state, tipId );\n\tif ( associatedGuide && associatedGuide.currentTipId !== tipId ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns whether or not tips are globally enabled.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether tips are globally enabled.\n */\nexport function areTipsEnabled( state ) {\n\treturn state.preferences.areTipsEnabled;\n}\n"]}