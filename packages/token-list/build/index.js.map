{"version":3,"sources":["@wordpress/token-list/src/index.js"],"names":["TokenList","initialValue","value","forEach","fn","_valueAsArray","arguments","bind","Symbol","iterator","index","item","indexOf","items","join","without","token","force","undefined","contains","add","remove","newToken","_currentValue","String","split","length"],"mappings":";;;;;;;;;;;;;;;AAGA;;AAHA;;;;AAKA;;;;;IAKqBA,S;;;AACpB;;;;;AAKA,uBAAiC;AAAA;;AAAA,QAApBC,YAAoB,uEAAL,EAAK;AAAA;AAChC,SAAKC,KAAL,GAAaD,YAAb;AAEA,KAAE,SAAF,EAAa,SAAb,EAAwB,MAAxB,EAAgC,QAAhC,EAA2CE,OAA3C,CAAoD,UAAEC,EAAF,EAAU;AAC7D,MAAA,KAAI,CAAEA,EAAF,CAAJ,GAAe,YAAW;AAAA;;AACzB,eAAO,4BAAKC,aAAL,EAAoBD,EAApB,6BAA6BE,SAA7B,CAAP;AACA,OAFY,CAETC,IAFS,CAEH,KAFG,CAAb;AAGA,KAJD;AAKA;AAED;;;;;;;;;;;;AAmCA;;;;;;;;+BAQW;AACV,aAAO,KAAKL,KAAZ;AACA;AAED;;;;;;;;;SAOIM,MAAM,CAACC,Q;;;;;;;;AACH,4CAAO,KAAKJ,aAAZ;;;;;;;;;;;;AAGR;;;;;;;;;;;;yBASMK,K,EAAQ;AACb,aAAO,KAAKL,aAAL,CAAoBK,KAApB,CAAP;AACA;AAED;;;;;;;;;;;;6BASUC,I,EAAO;AAChB,aAAO,KAAKN,aAAL,CAAmBO,OAAnB,CAA4BD,IAA5B,MAAuC,CAAC,CAA/C;AACA;AAED;;;;;;;;;;0BAOgB;AAAA,wCAARE,KAAQ;AAARA,QAAAA,KAAQ;AAAA;;AACf,WAAKX,KAAL,IAAc,MAAMW,KAAK,CAACC,IAAN,CAAY,GAAZ,CAApB;AACA;AAED;;;;;;;;;;6BAOmB;AAAA,yCAARD,KAAQ;AAARA,QAAAA,KAAQ;AAAA;;AAClB,WAAKX,KAAL,GAAaa,+BAAS,KAAKV,aAAd,SAAgCQ,KAAhC,GAAwCC,IAAxC,CAA8C,GAA9C,CAAb;AACA;AAED;;;;;;;;;;;;;;;;2BAaQE,K,EAAOC,K,EAAQ;AACtB,UAAKC,SAAS,KAAKD,KAAnB,EAA2B;AAC1BA,QAAAA,KAAK,GAAG,CAAE,KAAKE,QAAL,CAAeH,KAAf,CAAV;AACA;;AAED,UAAKC,KAAL,EAAa;AACZ,aAAKG,GAAL,CAAUJ,KAAV;AACA,OAFD,MAEO;AACN,aAAKK,MAAL,CAAaL,KAAb;AACA;;AAED,aAAOC,KAAP;AACA;AAED;;;;;;;;;;;;;;4BAWSD,K,EAAOM,Q,EAAW;AAC1B,UAAK,CAAE,KAAKH,QAAL,CAAeH,KAAf,CAAP,EAAgC;AAC/B,eAAO,KAAP;AACA;;AAED,WAAKK,MAAL,CAAaL,KAAb;AACA,WAAKI,GAAL,CAAUE,QAAV;AAEA,aAAO,IAAP;AACA;AAED;;;;;;;;;;;;;+BAUW;AACV,aAAO,IAAP;AACA;;;wBAhKW;AACX,aAAO,KAAKC,aAAZ;AACA;AAED;;;;;;;;sBAOWrB,K,EAAQ;AAClBA,MAAAA,KAAK,GAAGsB,MAAM,CAAEtB,KAAF,CAAd;AACA,WAAKG,aAAL,GAAqB,kBAAM,qBAASH,KAAK,CAACuB,KAAN,CAAa,MAAb,CAAT,CAAN,CAArB;AACA,WAAKF,aAAL,GAAqB,KAAKlB,aAAL,CAAmBS,IAAnB,CAAyB,GAAzB,CAArB;AACA;AAED;;;;;;;;;;wBAOa;AACZ,aAAO,KAAKT,aAAL,CAAmBqB,MAA1B;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { uniq, compact, without } from 'lodash';\n\n/**\n * A set of tokens.\n *\n * @link https://dom.spec.whatwg.org/#domtokenlist\n */\nexport default class TokenList {\n\t/**\n\t * Constructs a new instance of TokenList.\n\t *\n\t * @param {string} initialValue Initial value to assign.\n\t */\n\tconstructor( initialValue = '' ) {\n\t\tthis.value = initialValue;\n\n\t\t[ 'entries', 'forEach', 'keys', 'values' ].forEach( ( fn ) => {\n\t\t\tthis[ fn ] = ( function() {\n\t\t\t\treturn this._valueAsArray[ fn ]( ...arguments );\n\t\t\t} ).bind( this );\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the associated set as string.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-value\n\t *\n\t * @return {string} Token set as string.\n\t */\n\tget value() {\n\t\treturn this._currentValue;\n\t}\n\n\t/**\n\t * Replaces the associated set with a new string value.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-value\n\t *\n\t * @param {string} value New token set as string.\n\t */\n\tset value( value ) {\n\t\tvalue = String( value );\n\t\tthis._valueAsArray = uniq( compact( value.split( /\\s+/g ) ) );\n\t\tthis._currentValue = this._valueAsArray.join( ' ' );\n\t}\n\n\t/**\n\t * Returns the number of tokens.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-length\n\t *\n\t * @return {number} Number of tokens.\n\t */\n\tget length() {\n\t\treturn this._valueAsArray.length;\n\t}\n\n\t/**\n\t * Returns the stringified form of the TokenList.\n\t *\n\t * @link https://dom.spec.whatwg.org/#DOMTokenList-stringification-behavior\n\t * @link https://www.ecma-international.org/ecma-262/9.0/index.html#sec-tostring\n\t *\n\t * @return {string} Token set as string.\n\t */\n\ttoString() {\n\t\treturn this.value;\n\t}\n\n\t/**\n\t * Returns an iterator for the TokenList, iterating items of the set.\n\t *\n\t * @link https://dom.spec.whatwg.org/#domtokenlist\n\t *\n\t * @return {Generator} TokenList iterator.\n\t */\n\t* [ Symbol.iterator ]() {\n\t\treturn yield* this._valueAsArray;\n\t}\n\n\t/**\n\t * Returns the token with index `index`.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-item\n\t *\n\t * @param {number} index Index at which to return token.\n\t *\n\t * @return {?string} Token at index.\n\t */\n\titem( index ) {\n\t\treturn this._valueAsArray[ index ];\n\t}\n\n\t/**\n\t * Returns true if `token` is present, and false otherwise.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-contains\n\t *\n\t * @param {string} item Token to test.\n\t *\n\t * @return {boolean} Whether token is present.\n\t */\n\tcontains( item ) {\n\t\treturn this._valueAsArray.indexOf( item ) !== -1;\n\t}\n\n\t/**\n\t * Adds all arguments passed, except those already present.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-add\n\t *\n\t * @param {...string} items Items to add.\n\t */\n\tadd( ...items ) {\n\t\tthis.value += ' ' + items.join( ' ' );\n\t}\n\n\t/**\n\t * Removes arguments passed, if they are present.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-remove\n\t *\n\t * @param {...string} items Items to remove.\n\t */\n\tremove( ...items ) {\n\t\tthis.value = without( this._valueAsArray, ...items ).join( ' ' );\n\t}\n\n\t/**\n\t * If `force` is not given, \"toggles\" `token`, removing it if it’s present\n\t * and adding it if it’s not present. If `force` is true, adds token (same\n\t * as add()). If force is false, removes token (same as remove()). Returns\n\t * true if `token` is now present, and false otherwise.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-toggle\n\t *\n\t * @param {string}   token Token to toggle.\n\t * @param {?boolean} force Presence to force.\n\t *\n\t * @return {boolean} Whether token is present after toggle.\n\t */\n\ttoggle( token, force ) {\n\t\tif ( undefined === force ) {\n\t\t\tforce = ! this.contains( token );\n\t\t}\n\n\t\tif ( force ) {\n\t\t\tthis.add( token );\n\t\t} else {\n\t\t\tthis.remove( token );\n\t\t}\n\n\t\treturn force;\n\t}\n\n\t/**\n\t * Replaces `token` with `newToken`. Returns true if `token` was replaced\n\t * with `newToken`, and false otherwise.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-replace\n\t *\n\t * @param {string} token    Token to replace with `newToken`.\n\t * @param {string} newToken Token to use in place of `token`.\n\t *\n\t * @return {boolean} Whether replacement occurred.\n\t */\n\treplace( token, newToken ) {\n\t\tif ( ! this.contains( token ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.remove( token );\n\t\tthis.add( newToken );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if `token` is in the associated attribute’s supported\n\t * tokens. Returns false otherwise.\n\t *\n\t * Always returns `true` in this implementation.\n\t *\n\t * @link https://dom.spec.whatwg.org/#dom-domtokenlist-supports\n\t *\n\t * @return {boolean} Whether token is supported.\n\t */\n\tsupports() {\n\t\treturn true;\n\t}\n}\n"]}