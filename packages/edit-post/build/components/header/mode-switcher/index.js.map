{"version":3,"sources":["@wordpress/edit-post/src/components/header/mode-switcher/index.js"],"names":["MODES","value","label","ModeSwitcher","onSwitch","mode","choices","map","choice","shortcut","shortcuts","toggleEditorMode","display","select","isRichEditingEnabled","getEditorSettings","richEditingEnabled","getEditorMode","dispatch","switchEditorMode"],"mappings":";;;;;;;;;;;;;AAGA;;AACA;;AACA;;AACA;;AAKA;;AAXA;;;;AAQA;;;;AAIA;;;;;AAKA,IAAMA,KAAK,GAAG,CACb;AACCC,EAAAA,KAAK,EAAE,QADR;AAECC,EAAAA,KAAK,EAAE,cAAI,eAAJ;AAFR,CADa,EAKb;AACCD,EAAAA,KAAK,EAAE,MADR;AAECC,EAAAA,KAAK,EAAE,cAAI,aAAJ;AAFR,CALa,CAAd;;AAWA,SAASC,YAAT,OAA4C;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,MAATC,IAAS,QAATA,IAAS;AAC3C,MAAMC,OAAO,GAAGN,KAAK,CAACO,GAAN,CAAW,UAAEC,MAAF,EAAc;AACxC,QAAKA,MAAM,CAACP,KAAP,KAAiBI,IAAtB,EAA6B;AAC5B,6CAAYG,MAAZ;AAAoBC,QAAAA,QAAQ,EAAEC,2BAAUC,gBAAV,CAA2BC;AAAzD;AACA;;AACD,WAAOJ,MAAP;AACA,GALe,CAAhB;AAOA,SACC,4BAAC,qBAAD;AACC,IAAA,KAAK,EAAG,cAAI,QAAJ;AADT,KAGC,4BAAC,2BAAD;AACC,IAAA,OAAO,EAAGF,OADX;AAEC,IAAA,KAAK,EAAGD,IAFT;AAGC,IAAA,QAAQ,EAAGD;AAHZ,IAHD,CADD;AAWA;;eAEc,sBAAS,CACvB,sBAAY,UAAES,MAAF;AAAA,SAAgB;AAC3BC,IAAAA,oBAAoB,EAAED,MAAM,CAAE,aAAF,CAAN,CAAwBE,iBAAxB,GAA4CC,kBADvC;AAE3BX,IAAAA,IAAI,EAAEQ,MAAM,CAAE,gBAAF,CAAN,CAA2BI,aAA3B;AAFqB,GAAhB;AAAA,CAAZ,CADuB,EAKvB,0BAAa;AAAA,MAAIH,oBAAJ,SAAIA,oBAAJ;AAAA,SAAgCA,oBAAhC;AAAA,CAAb,CALuB,EAMvB,wBAAc,UAAEI,QAAF;AAAA,SAAkB;AAC/Bd,IAAAA,QAD+B,oBACrBC,IADqB,EACd;AAChBa,MAAAA,QAAQ,CAAE,gBAAF,CAAR,CAA6BC,gBAA7B,CAA+Cd,IAA/C;AACA;AAH8B,GAAlB;AAAA,CAAd,CANuB,CAAT,EAWVF,YAXU,C","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { MenuItemsChoice, MenuGroup } from '@wordpress/components';\nimport { compose, ifCondition } from '@wordpress/compose';\nimport { withSelect, withDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport shortcuts from '../../../keyboard-shortcuts';\n/**\n * Set of available mode options.\n *\n * @type {Array}\n */\nconst MODES = [\n\t{\n\t\tvalue: 'visual',\n\t\tlabel: __( 'Visual Editor' ),\n\t},\n\t{\n\t\tvalue: 'text',\n\t\tlabel: __( 'Code Editor' ),\n\t},\n];\n\nfunction ModeSwitcher( { onSwitch, mode } ) {\n\tconst choices = MODES.map( ( choice ) => {\n\t\tif ( choice.value !== mode ) {\n\t\t\treturn { ...choice, shortcut: shortcuts.toggleEditorMode.display };\n\t\t}\n\t\treturn choice;\n\t} );\n\n\treturn (\n\t\t<MenuGroup\n\t\t\tlabel={ __( 'Editor' ) }\n\t\t>\n\t\t\t<MenuItemsChoice\n\t\t\t\tchoices={ choices }\n\t\t\t\tvalue={ mode }\n\t\t\t\tonSelect={ onSwitch }\n\t\t\t/>\n\t\t</MenuGroup>\n\t);\n}\n\nexport default compose( [\n\twithSelect( ( select ) => ( {\n\t\tisRichEditingEnabled: select( 'core/editor' ).getEditorSettings().richEditingEnabled,\n\t\tmode: select( 'core/edit-post' ).getEditorMode(),\n\t} ) ),\n\tifCondition( ( { isRichEditingEnabled } ) => isRichEditingEnabled ),\n\twithDispatch( ( dispatch ) => ( {\n\t\tonSwitch( mode ) {\n\t\t\tdispatch( 'core/edit-post' ).switchEditorMode( mode );\n\t\t},\n\t} ) ),\n] )( ModeSwitcher );\n"]}