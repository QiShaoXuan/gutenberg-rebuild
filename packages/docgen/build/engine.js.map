{"version":3,"sources":["@wordpress/docgen/src/engine.js"],"names":["espree","require","flatten","getIntermediateRepresentation","getAST","source","parse","attachComment","loc","ecmaVersion","ecmaFeatures","jsx","sourceType","getExportTokens","ast","body","filter","node","some","declaration","type","engine","path","code","getIRFromPath","result","tokens","ir","map","token","module","exports"],"mappings":";;AAAA;;;AAGA,IAAMA,MAAM,GAAGC,OAAO,CAAE,QAAF,CAAtB;;eACoBA,OAAO,CAAE,QAAF,C;IAAnBC,O,YAAAA,O;AAER;;;;;AAGA,IAAMC,6BAA6B,GAAGF,OAAO,CAAE,mCAAF,CAA7C;;AAEA,IAAMG,MAAM,GAAG,SAATA,MAAS,CAAEC,MAAF;AAAA,SAAcL,MAAM,CAACM,KAAP,CAAcD,MAAd,EAAsB;AAClDE,IAAAA,aAAa,EAAE,IADmC;AAElDC,IAAAA,GAAG,EAAE,IAF6C;AAGlDC,IAAAA,WAAW,EAAE,IAHqC;AAIlDC,IAAAA,YAAY,EAAE;AACbC,MAAAA,GAAG,EAAE;AADQ,KAJoC;AAOlDC,IAAAA,UAAU,EAAE;AAPsC,GAAtB,CAAd;AAAA,CAAf;;AAUA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAEC,GAAF;AAAA,SAAWA,GAAG,CAACC,IAAJ,CAASC,MAAT,CAClC,UAAEC,IAAF;AAAA,WAAY,CACX,wBADW,EAEX,0BAFW,EAGX,sBAHW,EAIVC,IAJU,CAIJ,UAAEC,WAAF;AAAA,aAAmBA,WAAW,KAAKF,IAAI,CAACG,IAAxC;AAAA,KAJI,CAAZ;AAAA,GADkC,CAAX;AAAA,CAAxB;;AAQA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAEC,IAAF,EAAQC,IAAR,EAA4C;AAAA,MAA9BC,aAA8B,uEAAd,YAAM,CAAE,CAAM;AAC1D,MAAMC,MAAM,GAAG,EAAf;AACAA,EAAAA,MAAM,CAACX,GAAP,GAAaV,MAAM,CAAEmB,IAAF,CAAnB;AACAE,EAAAA,MAAM,CAACC,MAAP,GAAgBb,eAAe,CAAEY,MAAM,CAACX,GAAT,CAA/B;AACAW,EAAAA,MAAM,CAACE,EAAP,GAAYzB,OAAO,CAAEuB,MAAM,CAACC,MAAP,CAAcE,GAAd,CACpB,UAAEC,KAAF;AAAA,WAAa1B,6BAA6B,CACzCmB,IADyC,EAEzCO,KAFyC,EAGzCJ,MAAM,CAACX,GAHkC,EAIzCU,aAJyC,CAA1C;AAAA,GADoB,CAAF,CAAnB;AASA,SAAOC,MAAP;AACA,CAdD;AAgBA;;;;;;;;;;;;AAUAK,MAAM,CAACC,OAAP,GAAiBV,MAAjB","sourcesContent":["/**\n* External dependencies.\n*/\nconst espree = require( 'espree' );\nconst { flatten } = require( 'lodash' );\n\n/**\n* Internal dependencies.\n*/\nconst getIntermediateRepresentation = require( './get-intermediate-representation' );\n\nconst getAST = ( source ) => espree.parse( source, {\n\tattachComment: true,\n\tloc: true,\n\tecmaVersion: 2018,\n\tecmaFeatures: {\n\t\tjsx: true,\n\t},\n\tsourceType: 'module',\n} );\n\nconst getExportTokens = ( ast ) => ast.body.filter(\n\t( node ) => [\n\t\t'ExportNamedDeclaration',\n\t\t'ExportDefaultDeclaration',\n\t\t'ExportAllDeclaration',\n\t].some( ( declaration ) => declaration === node.type )\n);\n\nconst engine = ( path, code, getIRFromPath = () => {} ) => {\n\tconst result = {};\n\tresult.ast = getAST( code );\n\tresult.tokens = getExportTokens( result.ast );\n\tresult.ir = flatten( result.tokens.map(\n\t\t( token ) => getIntermediateRepresentation(\n\t\t\tpath,\n\t\t\ttoken,\n\t\t\tresult.ast,\n\t\t\tgetIRFromPath\n\t\t)\n\t) );\n\n\treturn result;\n};\n\n/**\n * Function that takes code and returns an intermediate representation.\n *\n * @param {string} code The code to parse.\n * @param {Function} [getIRFromPath=noop] Callback to retrieve the\n * Intermediate Representation from a path relative to the file\n * being parsed.\n *\n * @return {Object} Intermediate Representation in JSON.\n */\nmodule.exports = engine;\n"]}