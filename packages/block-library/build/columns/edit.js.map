{"version":3,"sources":["@wordpress/block-library/src/columns/edit.js"],"names":["ALLOWED_BLOCKS","ColumnsEdit","attributes","setAttributes","className","updateAlignment","columns","verticalAlignment","classes","onChange","alignment","nextColumns","DEFAULT_EMPTY_ARRAY","select","clientId","getBlocksByClientId","block","childColumns","innerBlocks","dispatch","updateBlockAttributes","forEach","childColumn"],"mappings":";;;;;;;;;AAcA;;;;AAXA;;AAKA;;AACA;;AACA;;AAKA;;AAMA;;AAKA;;AA1BA;;;;AAKA;;;;AAkBA;;;;AAKA;;;;;;;;;AASA,IAAMA,cAAc,GAAG,CAAE,aAAF,CAAvB;;AAEO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAsE;AAAA,MAA1DC,UAA0D,QAA1DA,UAA0D;AAAA,MAA9CC,aAA8C,QAA9CA,aAA8C;AAAA,MAA/BC,SAA+B,QAA/BA,SAA+B;AAAA,MAApBC,eAAoB,QAApBA,eAAoB;AAAA,MACxFC,OADwF,GACzDJ,UADyD,CACxFI,OADwF;AAAA,MAC/EC,iBAD+E,GACzDL,UADyD,CAC/EK,iBAD+E;AAGhG,MAAMC,OAAO,GAAG,0BAAYJ,SAAZ,gBAA+BE,OAA/B,kFACcC,iBADd,GACsCA,iBADtC,EAAhB;;AAIA,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAAEC,SAAF,EAAiB;AACjC;AACAL,IAAAA,eAAe,CAAEK,SAAF,CAAf;AACA,GAHD;;AAKA,SACC,4BAAC,iBAAD,QACC,4BAAC,8BAAD,QACC,4BAAC,qBAAD,QACC,4BAAC,wBAAD;AACC,IAAA,KAAK,EAAG,cAAI,SAAJ,CADT;AAEC,IAAA,KAAK,EAAGJ,OAFT;AAGC,IAAA,QAAQ,EAAG,kBAAEK,WAAF,EAAmB;AAC7BR,MAAAA,aAAa,CAAE;AACdG,QAAAA,OAAO,EAAEK;AADK,OAAF,CAAb;AAGA,KAPF;AAQC,IAAA,GAAG,EAAG,CARP;AASC,IAAA,GAAG,EAAG;AATP,IADD,CADD,CADD,EAgBC,4BAAC,0BAAD,QACC,4BAAC,0CAAD;AACC,IAAA,QAAQ,EAAGF,QADZ;AAEC,IAAA,KAAK,EAAGF;AAFT,IADD,CAhBD,EAsBC;AAAK,IAAA,SAAS,EAAGC;AAAjB,KACC,4BAAC,wBAAD;AACC,IAAA,QAAQ,EAAG,+BAAoBF,OAApB,CADZ;AAEC,IAAA,YAAY,EAAC,KAFd;AAGC,IAAA,aAAa,EAAGN;AAHjB,IADD,CAtBD,CADD;AA+BA,CA3CM;;;AA6CP,IAAMY,mBAAmB,GAAG,EAA5B;;eAEe;AACd;;;AAGA,sBAAY,UAAEC,MAAF,SAA4B;AAAA,MAAhBC,QAAgB,SAAhBA,QAAgB;;AAAA,gBACPD,MAAM,CAAE,aAAF,CADC;AAAA,MAC/BE,mBAD+B,WAC/BA,mBAD+B;;AAEvC,MAAMC,KAAK,GAAGD,mBAAmB,CAAED,QAAF,CAAnB,CAAiC,CAAjC,CAAd;AAEA,SAAO;AACNG,IAAAA,YAAY,EAAED,KAAK,GAAGA,KAAK,CAACE,WAAT,GAAuBN;AADpC,GAAP;AAGA,CAPD,CAJc,EAYd,wBAAc,UAAEO,QAAF,SAA4C;AAAA,MAA9BL,QAA8B,SAA9BA,QAA8B;AAAA,MAApBG,YAAoB,SAApBA,YAAoB;AACzD,SAAO;AACN;;;;;;;;AAQAZ,IAAAA,eATM,2BASWK,SATX,EASuB;AAC5B;AACAS,MAAAA,QAAQ,CAAE,aAAF,CAAR,CAA0BC,qBAA1B,CAAiDN,QAAjD,EAA2D;AAC1DP,QAAAA,iBAAiB,EAAEG;AADuC,OAA3D,EAF4B,CAM5B;;AACAO,MAAAA,YAAY,CAACI,OAAb,CAAsB,UAAEC,WAAF,EAAmB;AACxCH,QAAAA,QAAQ,CAAE,aAAF,CAAR,CAA0BC,qBAA1B,CAAiDE,WAAW,CAACR,QAA7D,EAAuE;AACtEP,UAAAA,iBAAiB,EAAEG;AADmD,SAAvE;AAGA,OAJD;AAKA;AArBK,GAAP;AAuBA,CAxBD,CAZc,EAqCZT,WArCY,C","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { compose } from '@wordpress/compose';\nimport {\n\tPanelBody,\n\tRangeControl,\n} from '@wordpress/components';\nimport { Fragment } from '@wordpress/element';\nimport {\n\tInspectorControls,\n\tInnerBlocks,\n\tBlockControls,\n\tBlockVerticalAlignmentToolbar,\n} from '@wordpress/block-editor';\nimport { withSelect, withDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { getColumnsTemplate } from './utils';\n\n/**\n * Allowed blocks constant is passed to InnerBlocks precisely as specified here.\n * The contents of the array should never change.\n * The array should contain the name of each block that is allowed.\n * In columns block, the only block we allow is 'core/column'.\n *\n * @constant\n * @type {string[]}\n*/\nconst ALLOWED_BLOCKS = [ 'core/column' ];\n\nexport const ColumnsEdit = function( { attributes, setAttributes, className, updateAlignment } ) {\n\tconst { columns, verticalAlignment } = attributes;\n\n\tconst classes = classnames( className, `has-${ columns }-columns`, {\n\t\t[ `are-vertically-aligned-${ verticalAlignment }` ]: verticalAlignment,\n\t} );\n\n\tconst onChange = ( alignment ) => {\n\t\t// Update all the (immediate) child Column Blocks\n\t\tupdateAlignment( alignment );\n\t};\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tlabel={ __( 'Columns' ) }\n\t\t\t\t\t\tvalue={ columns }\n\t\t\t\t\t\tonChange={ ( nextColumns ) => {\n\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\tcolumns: nextColumns,\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tmin={ 2 }\n\t\t\t\t\t\tmax={ 6 }\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<BlockControls>\n\t\t\t\t<BlockVerticalAlignmentToolbar\n\t\t\t\t\tonChange={ onChange }\n\t\t\t\t\tvalue={ verticalAlignment }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<div className={ classes }>\n\t\t\t\t<InnerBlocks\n\t\t\t\t\ttemplate={ getColumnsTemplate( columns ) }\n\t\t\t\t\ttemplateLock=\"all\"\n\t\t\t\t\tallowedBlocks={ ALLOWED_BLOCKS } />\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nconst DEFAULT_EMPTY_ARRAY = [];\n\nexport default compose(\n\t/**\n\t * Selects the child column Blocks for this parent Column\n\t */\n\twithSelect( ( select, { clientId } ) => {\n\t\tconst { getBlocksByClientId } = select( 'core/editor' );\n\t\tconst block = getBlocksByClientId( clientId )[ 0 ];\n\n\t\treturn {\n\t\t\tchildColumns: block ? block.innerBlocks : DEFAULT_EMPTY_ARRAY,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, { clientId, childColumns } ) => {\n\t\treturn {\n\t\t\t/**\n\t\t\t * Update all child column Blocks with a new\n\t\t\t * vertical alignment setting based on whatever\n\t\t\t * alignment is passed in. This allows change to parent\n\t\t\t * to overide anything set on a individual column basis\n\t\t\t *\n\t\t\t * @param  {string} alignment the vertical alignment setting\n\t\t\t */\n\t\t\tupdateAlignment( alignment ) {\n\t\t\t\t// Update self...\n\t\t\t\tdispatch( 'core/editor' ).updateBlockAttributes( clientId, {\n\t\t\t\t\tverticalAlignment: alignment,\n\t\t\t\t} );\n\n\t\t\t\t// Update all child Column Blocks to match\n\t\t\t\tchildColumns.forEach( ( childColumn ) => {\n\t\t\t\t\tdispatch( 'core/editor' ).updateBlockAttributes( childColumn.clientId, {\n\t\t\t\t\t\tverticalAlignment: alignment,\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t},\n\t\t};\n\t} ),\n)( ColumnsEdit );\n"]}