{"version":3,"sources":["@wordpress/block-library/src/heading/edit.native.js"],"names":["name","HeadingEdit","props","splitBlock","bind","before","after","attributes","insertBlocksAfter","setAttributes","onReplace","blocks","newBlock","content","push","length","mergeBlocks","style","level","placeholder","tagName","newLevel","isSelected","minHeight","styles","onFocus","onBlur","onCaretVerticalPositionChange","value","Component"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\nimport HeadingToolbar from './heading-toolbar';\n\n/**\n * External dependencies\n */\nimport { View } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Component } from '@wordpress/element';\nimport { RichText, BlockControls } from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\n\nimport styles from './editor.scss';\n\nconst name = 'core/heading';\n\nclass HeadingEdit extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.splitBlock = this.splitBlock.bind( this );\n\t}\n\n\t/**\n\t * Split handler for RichText value, namely when content is pasted or the\n\t * user presses the Enter key.\n\t *\n\t * @param {?Array}     before Optional before value, to be used as content\n\t *                            in place of what exists currently for the\n\t *                            block. If undefined, the block is deleted.\n\t * @param {?Array}     after  Optional after value, to be appended in a new\n\t *                            paragraph block to the set of blocks passed\n\t *                            as spread.\n\t * @param {...WPBlock} blocks Optional blocks inserted between the before\n\t *                            and after value blocks.\n\t */\n\tsplitBlock( before, after, ...blocks ) {\n\t\tconst {\n\t\t\tattributes,\n\t\t\tinsertBlocksAfter,\n\t\t\tsetAttributes,\n\t\t\tonReplace,\n\t\t} = this.props;\n\n\t\tif ( after ) {\n\t\t\t// Append \"After\" content as a new heading block to the end of\n\t\t\t// any other blocks being inserted after the current heading.\n\t\t\tconst newBlock = createBlock( name, { content: after } );\n\t\t\tblocks.push( newBlock );\n\t\t} else {\n\t\t\tconst newBlock = createBlock( 'core/paragraph', { content: after } );\n\t\t\tblocks.push( newBlock );\n\t\t}\n\n\t\tif ( blocks.length && insertBlocksAfter ) {\n\t\t\tinsertBlocksAfter( blocks );\n\t\t}\n\n\t\tconst { content } = attributes;\n\t\tif ( before === null ) {\n\t\t\tonReplace( [] );\n\t\t} else if ( content !== before ) {\n\t\t\t// Only update content if it has in-fact changed. In case that user\n\t\t\t// has created a new paragraph at end of an existing one, the value\n\t\t\t// of before will be strictly equal to the current content.\n\t\t\tsetAttributes( { content: before } );\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tattributes,\n\t\t\tsetAttributes,\n\t\t\tmergeBlocks,\n\t\t\tstyle,\n\t\t} = this.props;\n\n\t\tconst {\n\t\t\tlevel,\n\t\t\tplaceholder,\n\t\t\tcontent,\n\t\t} = attributes;\n\n\t\tconst tagName = 'h' + level;\n\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<BlockControls>\n\t\t\t\t\t<HeadingToolbar minLevel={ 2 } maxLevel={ 5 } selectedLevel={ level } onChange={ ( newLevel ) => setAttributes( { level: newLevel } ) } />\n\t\t\t\t</BlockControls>\n\t\t\t\t<RichText\n\t\t\t\t\ttagName={ tagName }\n\t\t\t\t\tvalue={ content }\n\t\t\t\t\tisSelected={ this.props.isSelected }\n\t\t\t\t\tstyle={ {\n\t\t\t\t\t\t...style,\n\t\t\t\t\t\tminHeight: styles[ 'wp-block-heading' ].minHeight,\n\t\t\t\t\t} }\n\t\t\t\t\tonFocus={ this.props.onFocus } // always assign onFocus as a props\n\t\t\t\t\tonBlur={ this.props.onBlur } // always assign onBlur as a props\n\t\t\t\t\tonCaretVerticalPositionChange={ this.props.onCaretVerticalPositionChange }\n\t\t\t\t\tonChange={ ( value ) => setAttributes( { content: value } ) }\n\t\t\t\t\tonMerge={ mergeBlocks }\n\t\t\t\t\tonSplit={ this.splitBlock }\n\t\t\t\t\tplaceholder={ placeholder || __( 'Write headingâ€¦' ) }\n\t\t\t\t/>\n\t\t\t</View>\n\t\t);\n\t}\n}\nexport default HeadingEdit;\n"]}