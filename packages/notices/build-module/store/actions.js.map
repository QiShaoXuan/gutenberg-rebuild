{"version":3,"sources":["@wordpress/notices/src/store/actions.js"],"names":["createNotice","uniqueId","DEFAULT_CONTEXT","DEFAULT_STATUS","status","content","options","speak","isDismissible","context","id","actions","__unstableHTML","String","type","message","notice","createSuccessNotice","createInfoNotice","createErrorNotice","createWarningNotice","removeNotice"],"mappings":";;;;yBAiCiBA,Y;;AAjCjB;;;AAGA,SAASC,QAAT,QAAyB,QAAzB;AAEA;;;;AAGA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,aAAhD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,SAAUH,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAwBI,UAAAA,MAAxB,2DAAiCD,cAAjC;AAAiDE,UAAAA,OAAjD;AAA0DC,UAAAA,OAA1D,2DAAoE,EAApE;AAAA,2BAQFA,OARE,CAELC,KAFK,EAELA,KAFK,+BAEG,IAFH,2CAQFD,OARE,CAGLE,aAHK,EAGLA,aAHK,sCAGW,IAHX,6CAQFF,OARE,CAILG,OAJK,EAILA,OAJK,iCAIKP,eAJL,mCAQFI,OARE,CAKLI,EALK,EAKLA,EALK,4BAKAT,QAAQ,CAAEQ,OAAF,CALR,mCAQFH,OARE,CAMLK,OANK,EAMLA,OANK,iCAMK,EANL,qBAOLC,cAPK,GAQFN,OARE,CAOLM,cAPK,EAUN;AACA;AACA;;AACAP,UAAAA,OAAO,GAAGQ,MAAM,CAAER,OAAF,CAAhB;;AAbM,eAeDE,KAfC;AAAA;AAAA;AAAA;;AAAA;AAgBL,iBAAM;AAAEO,YAAAA,IAAI,EAAE,OAAR;AAAiBC,YAAAA,OAAO,EAAEV;AAA1B,WAAN;;AAhBK;AAAA;AAmBN,iBAAM;AACLS,YAAAA,IAAI,EAAE,eADD;AAELL,YAAAA,OAAO,EAAPA,OAFK;AAGLO,YAAAA,MAAM,EAAE;AACPN,cAAAA,EAAE,EAAFA,EADO;AAEPN,cAAAA,MAAM,EAANA,MAFO;AAGPC,cAAAA,OAAO,EAAPA,OAHO;AAIPO,cAAAA,cAAc,EAAdA,cAJO;AAKPJ,cAAAA,aAAa,EAAbA,aALO;AAMPG,cAAAA,OAAO,EAAPA;AANO;AAHH,WAAN;;AAnBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCP;;;;;;;;;;;;AAWA,OAAO,SAASM,mBAAT,CAA8BZ,OAA9B,EAAuCC,OAAvC,EAAiD;AACvD,SAAON,YAAY,CAAE,SAAF,EAAaK,OAAb,EAAsBC,OAAtB,CAAnB;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASY,gBAAT,CAA2Bb,OAA3B,EAAoCC,OAApC,EAA8C;AACpD,SAAON,YAAY,CAAE,MAAF,EAAUK,OAAV,EAAmBC,OAAnB,CAAnB;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASa,iBAAT,CAA4Bd,OAA5B,EAAqCC,OAArC,EAA+C;AACrD,SAAON,YAAY,CAAE,OAAF,EAAWK,OAAX,EAAoBC,OAApB,CAAnB;AACA;AAED;;;;;;;;;;;;AAWA,OAAO,SAASc,mBAAT,CAA8Bf,OAA9B,EAAuCC,OAAvC,EAAiD;AACvD,SAAON,YAAY,CAAE,SAAF,EAAaK,OAAb,EAAsBC,OAAtB,CAAnB;AACA;AAED;;;;;;;;;;AASA,OAAO,SAASe,YAAT,CAAuBX,EAAvB,EAAuD;AAAA,MAA5BD,OAA4B,uEAAlBP,eAAkB;AAC7D,SAAO;AACNY,IAAAA,IAAI,EAAE,eADA;AAENJ,IAAAA,EAAE,EAAFA,EAFM;AAGND,IAAAA,OAAO,EAAPA;AAHM,GAAP;AAKA","sourcesContent":["/**\n * External dependencies\n */\nimport { uniqueId } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { DEFAULT_CONTEXT, DEFAULT_STATUS } from './constants';\n\n/**\n * Yields action objects used in signalling that a notice is to be created.\n *\n * @param {?string}                status                Notice status.\n *                                                       Defaults to `info`.\n * @param {string}                 content               Notice message.\n * @param {?Object}                options               Notice options.\n * @param {?string}                options.context       Context under which to\n *                                                       group notice.\n * @param {?string}                options.id            Identifier for notice.\n *                                                       Automatically assigned\n *                                                       if not specified.\n * @param {?boolean}               options.isDismissible Whether the notice can\n *                                                       be dismissed by user.\n *                                                       Defaults to `true`.\n * @param {?boolean}               options.speak         Whether the notice\n *                                                       content should be\n *                                                       announced to screen\n *                                                       readers. Defaults to\n *                                                       `true`.\n * @param {?Array<WPNoticeAction>} options.actions       User actions to be\n *                                                       presented with notice.\n */\nexport function* createNotice( status = DEFAULT_STATUS, content, options = {} ) {\n\tconst {\n\t\tspeak = true,\n\t\tisDismissible = true,\n\t\tcontext = DEFAULT_CONTEXT,\n\t\tid = uniqueId( context ),\n\t\tactions = [],\n\t\t__unstableHTML,\n\t} = options;\n\n\t// The supported value shape of content is currently limited to plain text\n\t// strings. To avoid setting expectation that e.g. a WPElement could be\n\t// supported, cast to a string.\n\tcontent = String( content );\n\n\tif ( speak ) {\n\t\tyield { type: 'SPEAK', message: content };\n\t}\n\n\tyield {\n\t\ttype: 'CREATE_NOTICE',\n\t\tcontext,\n\t\tnotice: {\n\t\t\tid,\n\t\t\tstatus,\n\t\t\tcontent,\n\t\t\t__unstableHTML,\n\t\t\tisDismissible,\n\t\t\tactions,\n\t\t},\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a success notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string}  content Notice message.\n * @param {?Object} options Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createSuccessNotice( content, options ) {\n\treturn createNotice( 'success', content, options );\n}\n\n/**\n * Returns an action object used in signalling that an info notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string}  content Notice message.\n * @param {?Object} options Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createInfoNotice( content, options ) {\n\treturn createNotice( 'info', content, options );\n}\n\n/**\n * Returns an action object used in signalling that an error notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string}  content Notice message.\n * @param {?Object} options Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createErrorNotice( content, options ) {\n\treturn createNotice( 'error', content, options );\n}\n\n/**\n * Returns an action object used in signalling that a warning notice is to be\n * created. Refer to `createNotice` for options documentation.\n *\n * @see createNotice\n *\n * @param {string}  content Notice message.\n * @param {?Object} options Optional notice options.\n *\n * @return {Object} Action object.\n */\nexport function createWarningNotice( content, options ) {\n\treturn createNotice( 'warning', content, options );\n}\n\n/**\n * Returns an action object used in signalling that a notice is to be removed.\n *\n * @param {string}  id      Notice unique identifier.\n * @param {?string} context Optional context (grouping) in which the notice is\n *                          intended to appear. Defaults to default context.\n *\n * @return {Object} Action object.\n */\nexport function removeNotice( id, context = DEFAULT_CONTEXT ) {\n\treturn {\n\t\ttype: 'REMOVE_NOTICE',\n\t\tid,\n\t\tcontext,\n\t};\n}\n"]}