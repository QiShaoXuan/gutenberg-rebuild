{"version":3,"sources":["@wordpress/format-library/src/link/utils.js"],"names":["startsWith","getProtocol","isValidProtocol","getAuthority","isValidAuthority","getPath","isValidPath","getQueryString","isValidQueryString","getFragment","isValidFragment","__","sprintf","isValidHref","href","trimmedHref","trim","test","protocol","authority","path","queryString","fragment","createLinkFormat","url","opensInNewWindow","text","format","type","attributes","label","target","rel"],"mappings":"AAAA;;;AAGA,SAASA,UAAT,QAA2B,QAA3B;AAEA;;;;AAGA,SACCC,WADD,EAECC,eAFD,EAGCC,YAHD,EAICC,gBAJD,EAKCC,OALD,EAMCC,WAND,EAOCC,cAPD,EAQCC,kBARD,EASCC,WATD,EAUCC,eAVD,QAWO,gBAXP;AAYA,SAASC,EAAT,EAAaC,OAAb,QAA4B,iBAA5B;AAEA;;;;;;;;AAOA,OAAO,SAASC,WAAT,CAAsBC,IAAtB,EAA6B;AACnC,MAAK,CAAEA,IAAP,EAAc;AACb,WAAO,KAAP;AACA;;AAED,MAAMC,WAAW,GAAGD,IAAI,CAACE,IAAL,EAApB;;AAEA,MAAK,CAAED,WAAP,EAAqB;AACpB,WAAO,KAAP;AACA,GATkC,CAWnC;;;AACA,MAAK,QAAQE,IAAR,CAAcF,WAAd,CAAL,EAAmC;AAClC,QAAMG,QAAQ,GAAGjB,WAAW,CAAEc,WAAF,CAA5B;;AACA,QAAK,CAAEb,eAAe,CAAEgB,QAAF,CAAtB,EAAqC;AACpC,aAAO,KAAP;AACA,KAJiC,CAMlC;AACA;;;AACA,QAAKlB,UAAU,CAAEkB,QAAF,EAAY,MAAZ,CAAV,IAAkC,CAAE,uBAAuBD,IAAvB,CAA6BF,WAA7B,CAAzC,EAAsF;AACrF,aAAO,KAAP;AACA;;AAED,QAAMI,SAAS,GAAGhB,YAAY,CAAEY,WAAF,CAA9B;;AACA,QAAK,CAAEX,gBAAgB,CAAEe,SAAF,CAAvB,EAAuC;AACtC,aAAO,KAAP;AACA;;AAED,QAAMC,IAAI,GAAGf,OAAO,CAAEU,WAAF,CAApB;;AACA,QAAKK,IAAI,IAAI,CAAEd,WAAW,CAAEc,IAAF,CAA1B,EAAqC;AACpC,aAAO,KAAP;AACA;;AAED,QAAMC,WAAW,GAAGd,cAAc,CAAEQ,WAAF,CAAlC;;AACA,QAAKM,WAAW,IAAI,CAAEb,kBAAkB,CAAEa,WAAF,CAAxC,EAA0D;AACzD,aAAO,KAAP;AACA;;AAED,QAAMC,QAAQ,GAAGb,WAAW,CAAEM,WAAF,CAA5B;;AACA,QAAKO,QAAQ,IAAI,CAAEZ,eAAe,CAAEY,QAAF,CAAlC,EAAiD;AAChD,aAAO,KAAP;AACA;AACD,GA3CkC,CA6CnC;;;AACA,MAAKtB,UAAU,CAAEe,WAAF,EAAe,GAAf,CAAV,IAAkC,CAAEL,eAAe,CAAEK,WAAF,CAAxD,EAA0E;AACzE,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA;AAED;;;;;;;;;;AASA,OAAO,SAASQ,gBAAT,OAA6D;AAAA,MAAhCC,GAAgC,QAAhCA,GAAgC;AAAA,MAA3BC,gBAA2B,QAA3BA,gBAA2B;AAAA,MAATC,IAAS,QAATA,IAAS;AACnE,MAAMC,MAAM,GAAG;AACdC,IAAAA,IAAI,EAAE,WADQ;AAEdC,IAAAA,UAAU,EAAE;AACXL,MAAAA,GAAG,EAAHA;AADW;AAFE,GAAf;;AAOA,MAAKC,gBAAL,EAAwB;AACvB;AACA,QAAMK,KAAK,GAAGlB,OAAO,CAAED,EAAE,CAAE,yBAAF,CAAJ,EAAmCe,IAAnC,CAArB;AAEAC,IAAAA,MAAM,CAACE,UAAP,CAAkBE,MAAlB,GAA2B,QAA3B;AACAJ,IAAAA,MAAM,CAACE,UAAP,CAAkBG,GAAlB,GAAwB,qBAAxB;AACAL,IAAAA,MAAM,CAACE,UAAP,CAAmB,YAAnB,IAAoCC,KAApC;AACA;;AAED,SAAOH,MAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { startsWith } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetProtocol,\n\tisValidProtocol,\n\tgetAuthority,\n\tisValidAuthority,\n\tgetPath,\n\tisValidPath,\n\tgetQueryString,\n\tisValidQueryString,\n\tgetFragment,\n\tisValidFragment,\n} from '@wordpress/url';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Check for issues with the provided href.\n *\n * @param {string} href The href.\n *\n * @return {boolean} Is the href invalid?\n */\nexport function isValidHref( href ) {\n\tif ( ! href ) {\n\t\treturn false;\n\t}\n\n\tconst trimmedHref = href.trim();\n\n\tif ( ! trimmedHref ) {\n\t\treturn false;\n\t}\n\n\t// Does the href start with something that looks like a URL protocol?\n\tif ( /^\\S+:/.test( trimmedHref ) ) {\n\t\tconst protocol = getProtocol( trimmedHref );\n\t\tif ( ! isValidProtocol( protocol ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Add some extra checks for http(s) URIs, since these are the most common use-case.\n\t\t// This ensures URIs with an http protocol have exactly two forward slashes following the protocol.\n\t\tif ( startsWith( protocol, 'http' ) && ! /^https?:\\/\\/[^\\/\\s]/i.test( trimmedHref ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst authority = getAuthority( trimmedHref );\n\t\tif ( ! isValidAuthority( authority ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst path = getPath( trimmedHref );\n\t\tif ( path && ! isValidPath( path ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst queryString = getQueryString( trimmedHref );\n\t\tif ( queryString && ! isValidQueryString( queryString ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst fragment = getFragment( trimmedHref );\n\t\tif ( fragment && ! isValidFragment( fragment ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Validate anchor links.\n\tif ( startsWith( trimmedHref, '#' ) && ! isValidFragment( trimmedHref ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Generates the format object that will be applied to the link text.\n *\n * @param {string}  url              The href of the link.\n * @param {boolean} opensInNewWindow Whether this link will open in a new window.\n * @param {Object}  text             The text that is being hyperlinked.\n *\n * @return {Object} The final format object.\n */\nexport function createLinkFormat( { url, opensInNewWindow, text } ) {\n\tconst format = {\n\t\ttype: 'core/link',\n\t\tattributes: {\n\t\t\turl,\n\t\t},\n\t};\n\n\tif ( opensInNewWindow ) {\n\t\t// translators: accessibility label for external links, where the argument is the link text\n\t\tconst label = sprintf( __( '%s (opens in a new tab)' ), text );\n\n\t\tformat.attributes.target = '_blank';\n\t\tformat.attributes.rel = 'noreferrer noopener';\n\t\tformat.attributes[ 'aria-label' ] = label;\n\t}\n\n\treturn format;\n}\n"]}