{"version":3,"sources":["@wordpress/plugins/src/components/plugin-context/index.js"],"names":["name","icon","Consumer","Provider","withPluginContext","mapContextToProps","OriginalComponent","props","context"],"mappings":";;;;;;;;;AAGA;;;;AACA;;AAJA;;;qBAM+B,4BAAe;AAC7CA,EAAAA,IAAI,EAAE,IADuC;AAE7CC,EAAAA,IAAI,EAAE;AAFuC,CAAf,C;IAAvBC,Q,kBAAAA,Q;IAAUC,Q,kBAAAA,Q;;;;AAOlB;;;;;;;;;;AAUO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAEC,iBAAF;AAAA,SAAyB,yCAA4B,UAAEC,iBAAF,EAAyB;AAC9G,WAAO,UAAEC,KAAF;AAAA,aACN,4BAAC,QAAD,QACG,UAAEC,OAAF;AAAA,eACD,4BAAC,iBAAD,6BACMD,KADN,EAEMF,iBAAiB,CAAEG,OAAF,EAAWD,KAAX,CAFvB,EADC;AAAA,OADH,CADM;AAAA,KAAP;AAUA,GAXyD,EAWvD,mBAXuD,CAAzB;AAAA,CAA1B","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createContext } from '@wordpress/element';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\nconst { Consumer, Provider } = createContext( {\n\tname: null,\n\ticon: null,\n} );\n\nexport { Provider as PluginContextProvider };\n\n/**\n * A Higher Order Component used to inject Plugin context to the\n * wrapped component.\n *\n * @param {Function} mapContextToProps Function called on every context change,\n *                                     expected to return object of props to\n *                                     merge with the component's own props.\n *\n * @return {Component} Enhanced component with injected context as props.\n */\nexport const withPluginContext = ( mapContextToProps ) => createHigherOrderComponent( ( OriginalComponent ) => {\n\treturn ( props ) => (\n\t\t<Consumer>\n\t\t\t{ ( context ) => (\n\t\t\t\t<OriginalComponent\n\t\t\t\t\t{ ...props }\n\t\t\t\t\t{ ...mapContextToProps( context, props ) }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</Consumer>\n\t);\n}, 'withPluginContext' );\n"]}