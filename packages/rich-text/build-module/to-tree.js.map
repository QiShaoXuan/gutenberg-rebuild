{"version":3,"sources":["@wordpress/rich-text/src/to-tree.js"],"names":["getActiveFormats","getFormatType","LINE_SEPARATOR","OBJECT_REPLACEMENT_CHARACTER","fromFormat","type","attributes","unregisteredAttributes","object","boundaryClass","formatType","elementAttributes","name","key","className","class","tagName","padding","toTree","value","multilineTag","createEmpty","append","getLastChild","getParent","isText","getText","remove","appendText","onStartIndex","onEndIndex","isEditableTree","formats","replacements","text","start","end","formatsLength","length","tree","multilineFormat","activeFormats","deepestActiveFormat","lastSeparatorFormats","lastCharacterFormats","lastCharacter","i","character","charAt","shouldInsertPadding","characterFormats","reduce","accumulator","format","push","pointer","node","forEach","formatIndex","parent","newNode","undefined"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { getActiveFormats } from './get-active-formats';\nimport { getFormatType } from './get-format-type';\nimport {\n\tLINE_SEPARATOR,\n\tOBJECT_REPLACEMENT_CHARACTER,\n} from './special-characters';\n\n/**\n * Converts a format object to information that can be used to create an element\n * from (type, attributes and object).\n *\n * @param  {Object}  $1                        Named parameters.\n * @param  {string}  $1.type                   The format type.\n * @param  {Object}  $1.attributes             The format attributes.\n * @param  {Object}  $1.unregisteredAttributes The unregistered format\n *                                             attributes.\n * @param  {boolean} $1.object                 Wether or not it is an object\n *                                             format.\n * @param  {boolean} $1.boundaryClass          Wether or not to apply a boundary\n *                                             class.\n * @return {Object}                            Information to be used for\n *                                             element creation.\n */\nfunction fromFormat( { type, attributes, unregisteredAttributes, object, boundaryClass } ) {\n\tconst formatType = getFormatType( type );\n\n\tlet elementAttributes = {};\n\n\tif ( boundaryClass ) {\n\t\telementAttributes[ 'data-rich-text-format-boundary' ] = 'true';\n\t}\n\n\tif ( ! formatType ) {\n\t\tif ( attributes ) {\n\t\t\telementAttributes = { ...attributes, ...elementAttributes };\n\t\t}\n\n\t\treturn { type, attributes: elementAttributes, object };\n\t}\n\n\telementAttributes = { ...unregisteredAttributes, ...elementAttributes };\n\n\tfor ( const name in attributes ) {\n\t\tconst key = formatType.attributes ? formatType.attributes[ name ] : false;\n\n\t\tif ( key ) {\n\t\t\telementAttributes[ key ] = attributes[ name ];\n\t\t} else {\n\t\t\telementAttributes[ name ] = attributes[ name ];\n\t\t}\n\t}\n\n\tif ( formatType.className ) {\n\t\tif ( elementAttributes.class ) {\n\t\t\telementAttributes.class = `${ formatType.className } ${ elementAttributes.class }`;\n\t\t} else {\n\t\t\telementAttributes.class = formatType.className;\n\t\t}\n\t}\n\n\treturn {\n\t\ttype: formatType.tagName,\n\t\tobject: formatType.object,\n\t\tattributes: elementAttributes,\n\t};\n}\n\nconst padding = {\n\ttype: 'br',\n\tattributes: {\n\t\t'data-rich-text-padding': 'true',\n\t},\n\tobject: true,\n};\n\nexport function toTree( {\n\tvalue,\n\tmultilineTag,\n\tcreateEmpty,\n\tappend,\n\tgetLastChild,\n\tgetParent,\n\tisText,\n\tgetText,\n\tremove,\n\tappendText,\n\tonStartIndex,\n\tonEndIndex,\n\tisEditableTree,\n} ) {\n\tconst { formats, replacements, text, start, end } = value;\n\tconst formatsLength = formats.length + 1;\n\tconst tree = createEmpty();\n\tconst multilineFormat = { type: multilineTag };\n\tconst activeFormats = getActiveFormats( value );\n\tconst deepestActiveFormat = activeFormats[ activeFormats.length - 1 ];\n\n\tlet lastSeparatorFormats;\n\tlet lastCharacterFormats;\n\tlet lastCharacter;\n\n\t// If we're building a multiline tree, start off with a multiline element.\n\tif ( multilineTag ) {\n\t\tappend( append( tree, { type: multilineTag } ), '' );\n\t\tlastCharacterFormats = lastSeparatorFormats = [ multilineFormat ];\n\t} else {\n\t\tappend( tree, '' );\n\t}\n\n\tfor ( let i = 0; i < formatsLength; i++ ) {\n\t\tconst character = text.charAt( i );\n\t\tconst shouldInsertPadding = isEditableTree && (\n\t\t\t// Pad the line if the line is empty.\n\t\t\t! lastCharacter ||\n\t\t\tlastCharacter === LINE_SEPARATOR ||\n\t\t\t// Pad the line if the previous character is a line break, otherwise\n\t\t\t// the line break won't be visible.\n\t\t\tlastCharacter === '\\n'\n\t\t);\n\n\t\tlet characterFormats = formats[ i ];\n\n\t\t// Set multiline tags in queue for building the tree.\n\t\tif ( multilineTag ) {\n\t\t\tif ( character === LINE_SEPARATOR ) {\n\t\t\t\tcharacterFormats = lastSeparatorFormats = ( replacements[ i ] || [] ).reduce( ( accumulator, format ) => {\n\t\t\t\t\taccumulator.push( format, multilineFormat );\n\t\t\t\t\treturn accumulator;\n\t\t\t\t}, [ multilineFormat ] );\n\t\t\t} else {\n\t\t\t\tcharacterFormats = [ ...lastSeparatorFormats, ...( characterFormats || [] ) ];\n\t\t\t}\n\t\t}\n\n\t\tlet pointer = getLastChild( tree );\n\n\t\tif ( shouldInsertPadding && character === LINE_SEPARATOR ) {\n\t\t\tlet node = pointer;\n\n\t\t\twhile ( ! isText( node ) ) {\n\t\t\t\tnode = getLastChild( node );\n\t\t\t}\n\n\t\t\tappend( getParent( node ), padding );\n\t\t\tappend( getParent( node ), '' );\n\t\t}\n\n\t\t// Set selection for the start of line.\n\t\tif ( lastCharacter === LINE_SEPARATOR ) {\n\t\t\tlet node = pointer;\n\n\t\t\twhile ( ! isText( node ) ) {\n\t\t\t\tnode = getLastChild( node );\n\t\t\t}\n\n\t\t\tif ( onStartIndex && start === i ) {\n\t\t\t\tonStartIndex( tree, node );\n\t\t\t}\n\n\t\t\tif ( onEndIndex && end === i ) {\n\t\t\t\tonEndIndex( tree, node );\n\t\t\t}\n\t\t}\n\n\t\tif ( characterFormats ) {\n\t\t\tcharacterFormats.forEach( ( format, formatIndex ) => {\n\t\t\t\tif (\n\t\t\t\t\tpointer &&\n\t\t\t\t\tlastCharacterFormats &&\n\t\t\t\t\tformat === lastCharacterFormats[ formatIndex ] &&\n\t\t\t\t\t// Do not reuse the last element if the character is a\n\t\t\t\t\t// line separator.\n\t\t\t\t\t( character !== LINE_SEPARATOR ||\n\t\t\t\t\t\tcharacterFormats.length - 1 !== formatIndex )\n\t\t\t\t) {\n\t\t\t\t\tpointer = getLastChild( pointer );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { type, attributes, unregisteredAttributes } = format;\n\n\t\t\t\tconst boundaryClass = (\n\t\t\t\t\tisEditableTree &&\n\t\t\t\t\tcharacter !== LINE_SEPARATOR &&\n\t\t\t\t\tformat === deepestActiveFormat\n\t\t\t\t);\n\n\t\t\t\tconst parent = getParent( pointer );\n\t\t\t\tconst newNode = append( parent, fromFormat( {\n\t\t\t\t\ttype,\n\t\t\t\t\tattributes,\n\t\t\t\t\tunregisteredAttributes,\n\t\t\t\t\tboundaryClass,\n\t\t\t\t} ) );\n\n\t\t\t\tif ( isText( pointer ) && getText( pointer ).length === 0 ) {\n\t\t\t\t\tremove( pointer );\n\t\t\t\t}\n\n\t\t\t\tpointer = append( newNode, '' );\n\t\t\t} );\n\t\t}\n\n\t\t// No need for further processing if the character is a line separator.\n\t\tif ( character === LINE_SEPARATOR ) {\n\t\t\tlastCharacterFormats = characterFormats;\n\t\t\tlastCharacter = character;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If there is selection at 0, handle it before characters are inserted.\n\t\tif ( i === 0 ) {\n\t\t\tif ( onStartIndex && start === 0 ) {\n\t\t\t\tonStartIndex( tree, pointer );\n\t\t\t}\n\n\t\t\tif ( onEndIndex && end === 0 ) {\n\t\t\t\tonEndIndex( tree, pointer );\n\t\t\t}\n\t\t}\n\n\t\tif ( character === OBJECT_REPLACEMENT_CHARACTER ) {\n\t\t\tpointer = append( getParent( pointer ), fromFormat( {\n\t\t\t\t...replacements[ i ],\n\t\t\t\tobject: true,\n\t\t\t} ) );\n\t\t\t// Ensure pointer is text node.\n\t\t\tpointer = append( getParent( pointer ), '' );\n\t\t} else if ( character === '\\n' ) {\n\t\t\tpointer = append( getParent( pointer ), {\n\t\t\t\ttype: 'br',\n\t\t\t\tattributes: isEditableTree ? {\n\t\t\t\t\t'data-rich-text-line-break': 'true',\n\t\t\t\t} : undefined,\n\t\t\t\tobject: true,\n\t\t\t} );\n\t\t\t// Ensure pointer is text node.\n\t\t\tpointer = append( getParent( pointer ), '' );\n\t\t} else if ( ! isText( pointer ) ) {\n\t\t\tpointer = append( getParent( pointer ), character );\n\t\t} else {\n\t\t\tappendText( pointer, character );\n\t\t}\n\n\t\tif ( onStartIndex && start === i + 1 ) {\n\t\t\tonStartIndex( tree, pointer );\n\t\t}\n\n\t\tif ( onEndIndex && end === i + 1 ) {\n\t\t\tonEndIndex( tree, pointer );\n\t\t}\n\n\t\tif ( shouldInsertPadding && i === text.length ) {\n\t\t\tappend( getParent( pointer ), padding );\n\t\t}\n\n\t\tlastCharacterFormats = characterFormats;\n\t\tlastCharacter = character;\n\t}\n\n\treturn tree;\n}\n"]}