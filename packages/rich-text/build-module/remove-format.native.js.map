{"version":3,"sources":["@wordpress/rich-text/src/remove-format.native.js"],"names":["cloneDeep","normaliseFormats","removeFormat","value","formatType","startIndex","start","endIndex","end","formats","formatPlaceholder","newFormats","slice","newFormatPlaceholder","index","placeholderFormats","filter","type","previousFormat","i","filterFormats","length"],"mappings":";;AAAA;;;AAIA,SAASA,SAAT,QAA0B,QAA1B;AAEA;;;;AAIA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA;;;;;;;;;;;;;AAYA,OAAO,SAASC,YAAT,CACNC,KADM,EAENC,UAFM,EAKL;AAAA,MAFDC,UAEC,uEAFYF,KAAK,CAACG,KAElB;AAAA,MADDC,QACC,uEADUJ,KAAK,CAACK,GAChB;AAAA,MACOC,OADP,GACkDN,KADlD,CACOM,OADP;AAAA,MACgBC,iBADhB,GACkDP,KADlD,CACgBO,iBADhB;AAAA,MACmCJ,KADnC,GACkDH,KADlD,CACmCG,KADnC;AAAA,MAC0CE,GAD1C,GACkDL,KADlD,CAC0CK,GAD1C;AAED,MAAMG,UAAU,GAAGF,OAAO,CAACG,KAAR,CAAe,CAAf,CAAnB;AACA,MAAIC,oBAAoB,GAAG,IAA3B;;AAEA,MAAKP,KAAK,KAAKE,GAAf,EAAqB;AACpB,QAAKE,iBAAiB,IAAIA,iBAAiB,CAACI,KAAlB,KAA4BR,KAAtD,EAA8D;AAC7D,UAAMS,kBAAkB,GAAG,CAAEL,iBAAiB,CAACD,OAAlB,IAA6B,EAA/B,EAAoCG,KAApC,CAA2C,CAA3C,CAA3B;AACAC,MAAAA,oBAAoB,qBAChBH,iBADgB;AAEnB;AACAD,QAAAA,OAAO,EAAET,SAAS,CAAEe,kBAAkB,CAACC,MAAnB,CAA2B;AAAA,cAAIC,IAAJ,QAAIA,IAAJ;AAAA,iBAAgBA,IAAI,KAAKb,UAAzB;AAAA,SAA3B,CAAF;AAHC,QAApB;AAKA,KAPD,MAOO,IAAK,CAAEM,iBAAP,EAA2B;AACjC,UAAMQ,cAAc,GAAG,CAAEZ,KAAK,GAAG,CAAR,GAAYG,OAAO,CAAEH,KAAK,GAAG,CAAV,CAAnB,GAAmCG,OAAO,CAAE,CAAF,CAA5C,KAAuD,EAA9E;AACAI,MAAAA,oBAAoB,GAAG;AACtBC,QAAAA,KAAK,EAAER,KADe;AAEtBG,QAAAA,OAAO,EAAET,SAAS,CAAEkB,cAAc,CAACF,MAAf,CAAuB;AAAA,cAAIC,IAAJ,SAAIA,IAAJ;AAAA,iBAAgBA,IAAI,KAAKb,UAAzB;AAAA,SAAvB,CAAF;AAFI,OAAvB;AAIA;AACD,GApBA,CAsBD;;;AACA,OAAM,IAAIe,CAAC,GAAGd,UAAd,EAA0Bc,CAAC,GAAGZ,QAA9B,EAAwCY,CAAC,EAAzC,EAA8C;AAC7C,QAAKR,UAAU,CAAEQ,CAAF,CAAf,EAAuB;AACtBC,MAAAA,aAAa,CAAET,UAAF,EAAcQ,CAAd,EAAiBf,UAAjB,CAAb;AACA;AACD;;AAED,SAAOH,gBAAgB,mBAAOE,KAAP;AAAcM,IAAAA,OAAO,EAAEE,UAAvB;AAAmCD,IAAAA,iBAAiB,EAAEG;AAAtD,KAAvB;AACA;;AAED,SAASO,aAAT,CAAwBX,OAAxB,EAAiCK,KAAjC,EAAwCV,UAAxC,EAAqD;AACpD,MAAMO,UAAU,GAAGF,OAAO,CAAEK,KAAF,CAAP,CAAiBE,MAAjB,CAAyB;AAAA,QAAIC,IAAJ,SAAIA,IAAJ;AAAA,WAAgBA,IAAI,KAAKb,UAAzB;AAAA,GAAzB,CAAnB;;AAEA,MAAKO,UAAU,CAACU,MAAhB,EAAyB;AACxBZ,IAAAA,OAAO,CAAEK,KAAF,CAAP,GAAmBH,UAAnB;AACA,GAFD,MAEO;AACN,WAAOF,OAAO,CAAEK,KAAF,CAAd;AACA;AACD","sourcesContent":["/**\n * External dependencies\n */\n\nimport { cloneDeep } from 'lodash';\n\n/**\n * Internal dependencies\n */\n\nimport { normaliseFormats } from './normalise-formats';\n\n/**\n * Remove any format object from a Rich Text value by type from the given\n * `startIndex` to the given `endIndex`. Indices are retrieved from the\n * selection if none are provided.\n *\n * @param {Object} value      Value to modify.\n * @param {string} formatType Format type to remove.\n * @param {number} startIndex Start index.\n * @param {number} endIndex   End index.\n *\n * @return {Object} A new value with the format applied.\n */\nexport function removeFormat(\n\tvalue,\n\tformatType,\n\tstartIndex = value.start,\n\tendIndex = value.end\n) {\n\tconst { formats, formatPlaceholder, start, end } = value;\n\tconst newFormats = formats.slice( 0 );\n\tlet newFormatPlaceholder = null;\n\n\tif ( start === end ) {\n\t\tif ( formatPlaceholder && formatPlaceholder.index === start ) {\n\t\t\tconst placeholderFormats = ( formatPlaceholder.formats || [] ).slice( 0 );\n\t\t\tnewFormatPlaceholder = {\n\t\t\t\t...formatPlaceholder,\n\t\t\t\t// make sure we do not reuse the formats reference in our placeholder `formats` array\n\t\t\t\tformats: cloneDeep( placeholderFormats.filter( ( { type } ) => type !== formatType ) ),\n\t\t\t};\n\t\t} else if ( ! formatPlaceholder ) {\n\t\t\tconst previousFormat = ( start > 0 ? formats[ start - 1 ] : formats[ 0 ] ) || [];\n\t\t\tnewFormatPlaceholder = {\n\t\t\t\tindex: start,\n\t\t\t\tformats: cloneDeep( previousFormat.filter( ( { type } ) => type !== formatType ) ),\n\t\t\t};\n\t\t}\n\t}\n\n\t// Do not remove format if selection is empty\n\tfor ( let i = startIndex; i < endIndex; i++ ) {\n\t\tif ( newFormats[ i ] ) {\n\t\t\tfilterFormats( newFormats, i, formatType );\n\t\t}\n\t}\n\n\treturn normaliseFormats( { ...value, formats: newFormats, formatPlaceholder: newFormatPlaceholder } );\n}\n\nfunction filterFormats( formats, index, formatType ) {\n\tconst newFormats = formats[ index ].filter( ( { type } ) => type !== formatType );\n\n\tif ( newFormats.length ) {\n\t\tformats[ index ] = newFormats;\n\t} else {\n\t\tdelete formats[ index ];\n\t}\n}\n"]}