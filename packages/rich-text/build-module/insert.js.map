{"version":3,"sources":["@wordpress/rich-text/src/insert.js"],"names":["create","normaliseFormats","insert","value","valueToInsert","startIndex","start","endIndex","end","formats","replacements","text","index","length","slice","concat"],"mappings":"AAAA;;;AAIA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA;;;;;;;;;;;;;;AAaA,OAAO,SAASC,MAAT,CACNC,KADM,EAENC,aAFM,EAKL;AAAA,MAFDC,UAEC,uEAFYF,KAAK,CAACG,KAElB;AAAA,MADDC,QACC,uEADUJ,KAAK,CAACK,GAChB;AAAA,MACOC,OADP,GACuCN,KADvC,CACOM,OADP;AAAA,MACgBC,YADhB,GACuCP,KADvC,CACgBO,YADhB;AAAA,MAC8BC,IAD9B,GACuCR,KADvC,CAC8BQ,IAD9B;;AAGD,MAAK,OAAOP,aAAP,KAAyB,QAA9B,EAAyC;AACxCA,IAAAA,aAAa,GAAGJ,MAAM,CAAE;AAAEW,MAAAA,IAAI,EAAEP;AAAR,KAAF,CAAtB;AACA;;AAED,MAAMQ,KAAK,GAAGP,UAAU,GAAGD,aAAa,CAACO,IAAd,CAAmBE,MAA9C;AAEA,SAAOZ,gBAAgB,CAAE;AACxBQ,IAAAA,OAAO,EAAEA,OAAO,CAACK,KAAR,CAAe,CAAf,EAAkBT,UAAlB,EAA+BU,MAA/B,CAAuCX,aAAa,CAACK,OAArD,EAA8DA,OAAO,CAACK,KAAR,CAAeP,QAAf,CAA9D,CADe;AAExBG,IAAAA,YAAY,EAAEA,YAAY,CAACI,KAAb,CAAoB,CAApB,EAAuBT,UAAvB,EAAoCU,MAApC,CAA4CX,aAAa,CAACM,YAA1D,EAAwEA,YAAY,CAACI,KAAb,CAAoBP,QAApB,CAAxE,CAFU;AAGxBI,IAAAA,IAAI,EAAEA,IAAI,CAACG,KAAL,CAAY,CAAZ,EAAeT,UAAf,IAA8BD,aAAa,CAACO,IAA5C,GAAmDA,IAAI,CAACG,KAAL,CAAYP,QAAZ,CAHjC;AAIxBD,IAAAA,KAAK,EAAEM,KAJiB;AAKxBJ,IAAAA,GAAG,EAAEI;AALmB,GAAF,CAAvB;AAOA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { create } from './create';\nimport { normaliseFormats } from './normalise-formats';\n\n/**\n * Insert a Rich Text value, an HTML string, or a plain text string, into a\n * Rich Text value at the given `startIndex`. Any content between `startIndex`\n * and `endIndex` will be removed. Indices are retrieved from the selection if\n * none are provided.\n *\n * @param {Object}        value         Value to modify.\n * @param {Object|string} valueToInsert Value to insert.\n * @param {number}        [startIndex]  Start index.\n * @param {number}        [endIndex]    End index.\n *\n * @return {Object} A new value with the value inserted.\n */\nexport function insert(\n\tvalue,\n\tvalueToInsert,\n\tstartIndex = value.start,\n\tendIndex = value.end\n) {\n\tconst { formats, replacements, text } = value;\n\n\tif ( typeof valueToInsert === 'string' ) {\n\t\tvalueToInsert = create( { text: valueToInsert } );\n\t}\n\n\tconst index = startIndex + valueToInsert.text.length;\n\n\treturn normaliseFormats( {\n\t\tformats: formats.slice( 0, startIndex ).concat( valueToInsert.formats, formats.slice( endIndex ) ),\n\t\treplacements: replacements.slice( 0, startIndex ).concat( valueToInsert.replacements, replacements.slice( endIndex ) ),\n\t\ttext: text.slice( 0, startIndex ) + valueToInsert.text + text.slice( endIndex ),\n\t\tstart: index,\n\t\tend: index,\n\t} );\n}\n"]}