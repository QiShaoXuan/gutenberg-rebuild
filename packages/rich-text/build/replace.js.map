{"version":3,"sources":["@wordpress/rich-text/src/replace.js"],"names":["replace","pattern","replacement","formats","replacements","text","start","end","match","rest","offset","length","newText","newFormats","newReplacements","Array","fill","slice","concat"],"mappings":";;;;;;;;;;;AAIA;;AAJA;;;;AAMA;;;;;;;;;;;;;;;;AAgBO,SAASA,OAAT,OAA+DC,OAA/D,EAAwEC,WAAxE,EAAsF;AAAA,MAAlEC,OAAkE,QAAlEA,OAAkE;AAAA,MAAzDC,YAAyD,QAAzDA,YAAyD;AAAA,MAA3CC,IAA2C,QAA3CA,IAA2C;AAAA,MAArCC,KAAqC,QAArCA,KAAqC;AAAA,MAA9BC,GAA8B,QAA9BA,GAA8B;AAC5FF,EAAAA,IAAI,GAAGA,IAAI,CAACL,OAAL,CAAcC,OAAd,EAAuB,UAAEO,KAAF,EAAsB;AAAA,sCAAVC,IAAU;AAAVA,MAAAA,IAAU;AAAA;;AACnD,QAAMC,MAAM,GAAGD,IAAI,CAAEA,IAAI,CAACE,MAAL,GAAc,CAAhB,CAAnB;AACA,QAAIC,OAAO,GAAGV,WAAd;AACA,QAAIW,UAAJ;AACA,QAAIC,eAAJ;;AAEA,QAAK,OAAOF,OAAP,KAAmB,UAAxB,EAAqC;AACpCA,MAAAA,OAAO,GAAGV,WAAW,MAAX,UAAaM,KAAb,SAAuBC,IAAvB,EAAV;AACA;;AAED,QAAK,sBAAOG,OAAP,MAAmB,QAAxB,EAAmC;AAClCC,MAAAA,UAAU,GAAGD,OAAO,CAACT,OAArB;AACAW,MAAAA,eAAe,GAAGF,OAAO,CAACR,YAA1B;AACAQ,MAAAA,OAAO,GAAGA,OAAO,CAACP,IAAlB;AACA,KAJD,MAIO;AACNQ,MAAAA,UAAU,GAAGE,KAAK,CAAEH,OAAO,CAACD,MAAV,CAAlB;AACAG,MAAAA,eAAe,GAAGC,KAAK,CAAEH,OAAO,CAACD,MAAV,CAAvB;;AAEA,UAAKR,OAAO,CAAEO,MAAF,CAAZ,EAAyB;AACxBG,QAAAA,UAAU,GAAGA,UAAU,CAACG,IAAX,CAAiBb,OAAO,CAAEO,MAAF,CAAxB,CAAb;AACA;AACD;;AAEDP,IAAAA,OAAO,GAAGA,OAAO,CAACc,KAAR,CAAe,CAAf,EAAkBP,MAAlB,EAA2BQ,MAA3B,CAAmCL,UAAnC,EAA+CV,OAAO,CAACc,KAAR,CAAeP,MAAM,GAAGF,KAAK,CAACG,MAA9B,CAA/C,CAAV;AACAP,IAAAA,YAAY,GAAGA,YAAY,CAACa,KAAb,CAAoB,CAApB,EAAuBP,MAAvB,EAAgCQ,MAAhC,CAAwCJ,eAAxC,EAAyDV,YAAY,CAACa,KAAb,CAAoBP,MAAM,GAAGF,KAAK,CAACG,MAAnC,CAAzD,CAAf;;AAEA,QAAKL,KAAL,EAAa;AACZA,MAAAA,KAAK,GAAGC,GAAG,GAAGG,MAAM,GAAGE,OAAO,CAACD,MAA/B;AACA;;AAED,WAAOC,OAAP;AACA,GA/BM,CAAP;AAiCA,SAAO,wCAAkB;AAAET,IAAAA,OAAO,EAAPA,OAAF;AAAWC,IAAAA,YAAY,EAAZA,YAAX;AAAyBC,IAAAA,IAAI,EAAJA,IAAzB;AAA+BC,IAAAA,KAAK,EAALA,KAA/B;AAAsCC,IAAAA,GAAG,EAAHA;AAAtC,GAAlB,CAAP;AACA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { normaliseFormats } from './normalise-formats';\n\n/**\n * Search a Rich Text value and replace the match(es) with `replacement`. This\n * is similar to `String.prototype.replace`.\n *\n * @param {Object}         value        The value to modify.\n * @param {RegExp|string}  pattern      A RegExp object or literal. Can also be\n *                                      a string. It is treated as a verbatim\n *                                      string and is not interpreted as a\n *                                      regular expression. Only the first\n *                                      occurrence will be replaced.\n * @param {Function|string} replacement The match or matches are replaced with\n *                                      the specified or the value returned by\n *                                      the specified function.\n *\n * @return {Object} A new value with replacements applied.\n */\nexport function replace( { formats, replacements, text, start, end }, pattern, replacement ) {\n\ttext = text.replace( pattern, ( match, ...rest ) => {\n\t\tconst offset = rest[ rest.length - 2 ];\n\t\tlet newText = replacement;\n\t\tlet newFormats;\n\t\tlet newReplacements;\n\n\t\tif ( typeof newText === 'function' ) {\n\t\t\tnewText = replacement( match, ...rest );\n\t\t}\n\n\t\tif ( typeof newText === 'object' ) {\n\t\t\tnewFormats = newText.formats;\n\t\t\tnewReplacements = newText.replacements;\n\t\t\tnewText = newText.text;\n\t\t} else {\n\t\t\tnewFormats = Array( newText.length );\n\t\t\tnewReplacements = Array( newText.length );\n\n\t\t\tif ( formats[ offset ] ) {\n\t\t\t\tnewFormats = newFormats.fill( formats[ offset ] );\n\t\t\t}\n\t\t}\n\n\t\tformats = formats.slice( 0, offset ).concat( newFormats, formats.slice( offset + match.length ) );\n\t\treplacements = replacements.slice( 0, offset ).concat( newReplacements, replacements.slice( offset + match.length ) );\n\n\t\tif ( start ) {\n\t\t\tstart = end = offset + newText.length;\n\t\t}\n\n\t\treturn newText;\n\t} );\n\n\treturn normaliseFormats( { formats, replacements, text, start, end } );\n}\n"]}