{"version":3,"sources":["@wordpress/jest-puppeteer-axe/src/index.js"],"names":["formatViolations","violations","map","help","id","nodes","output","forEach","node","any","length","target","item","message","all","none","join","toPassAxeTests","page","include","exclude","axe","AxePuppeteer","analyze","pass","utils","matcherHint","RECEIVED_COLOR","expect","extend"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport AxePuppeteer from 'axe-puppeteer';\n\n/**\n * Formats the list of violations object returned by Axe analysis.\n *\n * @param {Object} violations The object with the errors found by Axe.\n *\n * @return {string} The user friendly message to display when the matcher fails.\n */\nfunction formatViolations( violations ) {\n\treturn violations.map( ( { help, id, nodes } ) => {\n\t\tlet output = `Rule: ${ id } (${ help })\\n` +\n\t\t\t'Affected Nodes:\\n';\n\n\t\tnodes.forEach( ( node ) => {\n\t\t\tif ( node.any.length ) {\n\t\t\t\toutput += `  ${ node.target }\\n`;\n\t\t\t\toutput += '    Fix ANY of the following:\\n';\n\t\t\t\tnode.any.forEach( ( item ) => {\n\t\t\t\t\toutput += `    - ${ item.message }\\n`;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( node.all.length ) {\n\t\t\t\toutput += `  ${ node.target }\\n`;\n\t\t\t\toutput += '    Fix ALL of the following:\\n';\n\t\t\t\tnode.all.forEach( ( item ) => {\n\t\t\t\t\toutput += `      - ${ item.message }.\\n`;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( node.none.length ) {\n\t\t\t\toutput += `  ${ node.target }\\n`;\n\t\t\t\toutput += '    Fix ALL of the following:\\n';\n\t\t\t\tnode.none.forEach( ( item ) => {\n\t\t\t\t\toutput += `      - ${ item.message }.\\n`;\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t\treturn output;\n\t} ).join( '\\n' );\n}\n\n/**\n * Defines async matcher to check whether a given Puppeteer's page instance passes Axe accessibility tests.\n *\n * @see https://www.deque.com/axe/\n * It is possible to pass optional Axe API options to perform customized check.\n *\n * @see https://github.com/dequelabs/axe-puppeteer\n *\n * @param {Page}    page             Puppeteer's page instance.\n * @param {?Object} params           Optional Axe API options.\n * @param {?string} params.include   CSS selector to add to the list of elements\n *                                   to include in analysis.\n * @param {?string} params.exclude   CSS selector to add to the list of elements\n *                                   to exclude from analysis.\n *\n * @return {Object} A matcher object with two keys `pass` and `message`.\n */\nasync function toPassAxeTests( page, { include, exclude } = {} ) {\n\tconst axe = new AxePuppeteer( page );\n\n\tif ( include ) {\n\t\taxe.include( include );\n\t}\n\n\tif ( exclude ) {\n\t\taxe.exclude( exclude );\n\t}\n\n\tconst { violations } = await axe.analyze();\n\n\tconst pass = violations.length === 0;\n\tconst message = pass ?\n\t\t() => {\n\t\t\treturn this.utils.matcherHint( '.not.toPassAxeTests' ) +\n\t\t\t\t'\\n\\n' +\n\t\t\t\t'Expected page to contain accessibility check violations.\\n' +\n\t\t\t\t'No violations found.';\n\t\t} :\n\t\t() => {\n\t\t\treturn this.utils.matcherHint( '.toPassAxeTests' ) +\n\t\t\t\t'\\n\\n' +\n\t\t\t\t'Expected page to pass Axe accessibility tests.\\n' +\n\t\t\t\t'Violations found:\\n' +\n\t\t\t\tthis.utils.RECEIVED_COLOR(\n\t\t\t\t\tformatViolations( violations )\n\t\t\t\t);\n\t\t};\n\n\treturn {\n\t\tmessage,\n\t\tpass,\n\t};\n}\n\nexpect.extend( {\n\ttoPassAxeTests,\n} );\n"]}