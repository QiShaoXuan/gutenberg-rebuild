{"version":3,"sources":["@wordpress/editor/src/store/selectors.js"],"names":["find","get","has","map","createSelector","serialize","getFreeformContentHandlerName","getDefaultBlockName","isUnmodifiedDefaultBlock","isInTheFuture","getDate","removep","addQueryArgs","createRegistrySelector","PREFERENCES_DEFAULTS","EDIT_MERGE_PROPERTIES","POST_UPDATE_TRANSACTION_ID","PERMALINK_POSTNAME_REGEX","ONE_MINUTE_IN_MS","EMPTY_OBJECT","hasEditorUndo","state","editor","past","length","hasEditorRedo","future","isEditedPostNew","getCurrentPost","status","hasChangedContent","present","blocks","isDirty","edits","isEditedPostDirty","Object","keys","inSomeHistory","isCleanNewPost","currentPost","getCurrentPostType","type","getCurrentPostId","id","getCurrentPostRevisionsCount","getCurrentPostLastRevisionId","getPostEdits","initialEdits","getReferenceByDistinctEdits","getCurrentPostAttribute","attributeName","post","hasOwnProperty","getNestedEditedPostProperty","getEditedPostAttribute","getEditedPostContent","getAutosaveAttribute","hasAutosave","autosave","getAutosave","getEditedPostVisibility","password","isCurrentPostPending","isCurrentPostPublished","indexOf","Date","Number","date","isCurrentPostScheduled","isEditedPostPublishable","isEditedPostSaveable","isSavingPost","isEditedPostEmpty","value","blockName","name","isEditedPostAutosaveable","some","field","isEditedPostBeingScheduled","checkedDate","isEditedPostDateFloating","modified","saving","requesting","didPostSaveRequestSucceed","successful","didPostSaveRequestFail","error","isAutosavingPost","options","isAutosave","isPreviewingPost","isPreview","getEditedPostPreviewLink","featuredImageId","previewLink","_thumbnail_id","getSuggestedPostFormat","getBlocksForSerialization","isSingleUnmodifiedDefaultBlock","content","isSingleFreeformBlock","__experimentalGetReusableBlock","ref","block","reusableBlocks","data","isTemporary","isNaN","parseInt","__experimentalIsSavingReusableBlock","isSaving","__experimentalIsFetchingReusableBlock","isFetching","__experimentalGetReusableBlocks","getStateBeforeOptimisticTransaction","transactionId","transaction","optimist","entry","beforeState","action","isPublishingPost","stateBeforeRequest","isPermalinkEditable","permalinkTemplate","test","getPermalink","permalinkParts","getPermalinkParts","prefix","postName","suffix","split","predicate","isPostLocked","postLock","isLocked","isPostSavingLocked","postSavingLock","isPostLockTakeover","isTakeover","getPostLockUser","user","getActivePostLock","activePostLock","canUserUseUnfilteredHTML","isPublishSidebarEnabled","preferences","getEditorBlocks","__unstableIsEditorReady","isReady","getEditorSettings","editorSettings","getBlockEditorSelector","select","args","getBlockDependantsCacheBust","getBlockName","isBlockValid","getBlockAttributes","getBlock","getBlocks","__unstableGetBlockWithoutInnerBlocks","getClientIdsOfDescendants","getClientIdsWithDescendants","getGlobalBlockCount","getBlocksByClientId","getBlockCount","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","getBlockHierarchyRootClientId","getAdjacentBlockClientId","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","getMultiSelectedBlockClientIds","getMultiSelectedBlocks","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockOrder","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","isTyping","isCaretWithinFormattedText","getBlockInsertionPoint","isBlockInsertionPointVisible","isValidTemplate","getTemplate","getTemplateLock","canInsertBlockType","getInserterItems","hasInserterItems","getBlockListSettings"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tfind,\n\tget,\n\thas,\n\tmap,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tserialize,\n\tgetFreeformContentHandlerName,\n\tgetDefaultBlockName,\n\tisUnmodifiedDefaultBlock,\n} from '@wordpress/blocks';\nimport { isInTheFuture, getDate } from '@wordpress/date';\nimport { removep } from '@wordpress/autop';\nimport { addQueryArgs } from '@wordpress/url';\nimport { createRegistrySelector } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS } from './defaults';\nimport {\n\tEDIT_MERGE_PROPERTIES,\n\tPOST_UPDATE_TRANSACTION_ID,\n\tPERMALINK_POSTNAME_REGEX,\n\tONE_MINUTE_IN_MS,\n} from './constants';\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if any past editor history snapshots exist, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether undo history exists.\n */\nexport function hasEditorUndo( state ) {\n\treturn state.editor.past.length > 0;\n}\n\n/**\n * Returns true if any future editor history snapshots exist, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether redo history exists.\n */\nexport function hasEditorRedo( state ) {\n\treturn state.editor.future.length > 0;\n}\n\n/**\n * Returns true if the currently edited post is yet to be saved, or false if\n * the post has been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is new.\n */\nexport function isEditedPostNew( state ) {\n\treturn getCurrentPost( state ).status === 'auto-draft';\n}\n\n/**\n * Returns true if content includes unsaved changes, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether content includes unsaved changes.\n */\nexport function hasChangedContent( state ) {\n\treturn (\n\t\tstate.editor.present.blocks.isDirty ||\n\n\t\t// `edits` is intended to contain only values which are different from\n\t\t// the saved post, so the mere presence of a property is an indicator\n\t\t// that the value is different than what is known to be saved. While\n\t\t// content in Visual mode is represented by the blocks state, in Text\n\t\t// mode it is tracked by `edits.content`.\n\t\t'content' in state.editor.present.edits\n\t);\n}\n\n/**\n * Returns true if there are unsaved values for the current edit session, or\n * false if the editing state matches the saved or new post.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether unsaved values exist.\n */\nexport function isEditedPostDirty( state ) {\n\tif ( hasChangedContent( state ) ) {\n\t\treturn true;\n\t}\n\n\t// Edits should contain only fields which differ from the saved post (reset\n\t// at initial load and save complete). Thus, a non-empty edits state can be\n\t// inferred to contain unsaved values.\n\tif ( Object.keys( state.editor.present.edits ).length > 0 ) {\n\t\treturn true;\n\t}\n\n\t// Edits and change detection are reset at the start of a save, but a post\n\t// is still considered dirty until the point at which the save completes.\n\t// Because the save is performed optimistically, the prior states are held\n\t// until committed. These can be referenced to determine whether there's a\n\t// chance that state may be reverted into one considered dirty.\n\treturn inSomeHistory( state, isEditedPostDirty );\n}\n\n/**\n * Returns true if there are no unsaved values for the current edit session and\n * if the currently edited post is new (has never been saved before).\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether new post and unsaved values exist.\n */\nexport function isCleanNewPost( state ) {\n\treturn ! isEditedPostDirty( state ) && isEditedPostNew( state );\n}\n\n/**\n * Returns the post currently being edited in its last known saved state, not\n * including unsaved edits. Returns an object containing relevant default post\n * values if the post has not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Post object.\n */\nexport function getCurrentPost( state ) {\n\treturn state.currentPost;\n}\n\n/**\n * Returns the post type of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post type.\n */\nexport function getCurrentPostType( state ) {\n\treturn state.currentPost.type;\n}\n\n/**\n * Returns the ID of the post currently being edited, or null if the post has\n * not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of current post.\n */\nexport function getCurrentPostId( state ) {\n\treturn getCurrentPost( state ).id || null;\n}\n\n/**\n * Returns the number of revisions of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of revisions.\n */\nexport function getCurrentPostRevisionsCount( state ) {\n\treturn get( getCurrentPost( state ), [ '_links', 'version-history', 0, 'count' ], 0 );\n}\n\n/**\n * Returns the last revision ID of the post currently being edited,\n * or null if the post has no revisions.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of the last revision.\n */\nexport function getCurrentPostLastRevisionId( state ) {\n\treturn get( getCurrentPost( state ), [ '_links', 'predecessor-version', 0, 'id' ], null );\n}\n\n/**\n * Returns any post values which have been changed in the editor but not yet\n * been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Object of key value pairs comprising unsaved edits.\n */\nexport const getPostEdits = createSelector(\n\t( state ) => {\n\t\treturn {\n\t\t\t...state.initialEdits,\n\t\t\t...state.editor.present.edits,\n\t\t};\n\t},\n\t( state ) => [\n\t\tstate.editor.present.edits,\n\t\tstate.initialEdits,\n\t]\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t() => [],\n\t( state ) => [ state.editor ],\n);\n\n/**\n * Returns an attribute value of the saved post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getCurrentPostAttribute( state, attributeName ) {\n\tconst post = getCurrentPost( state );\n\tif ( post.hasOwnProperty( attributeName ) ) {\n\t\treturn post[ attributeName ];\n\t}\n}\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but merging with the attribute value for the last known\n * saved state of the post (this is needed for some nested attributes like meta).\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nconst getNestedEditedPostProperty = createSelector(\n\t( state, attributeName ) => {\n\t\tconst edits = getPostEdits( state );\n\t\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\t\treturn getCurrentPostAttribute( state, attributeName );\n\t\t}\n\n\t\treturn {\n\t\t\t...getCurrentPostAttribute( state, attributeName ),\n\t\t\t...edits[ attributeName ],\n\t\t};\n\t},\n\t( state, attributeName ) => [\n\t\tget( state.editor.present.edits, [ attributeName ], EMPTY_OBJECT ),\n\t\tget( state.currentPost, [ attributeName ], EMPTY_OBJECT ),\n\t]\n);\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but falling back to the attribute for the last known\n * saved state of the post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getEditedPostAttribute( state, attributeName ) {\n\t// Special cases\n\tswitch ( attributeName ) {\n\t\tcase 'content':\n\t\t\treturn getEditedPostContent( state );\n\t}\n\n\t// Fall back to saved post value if not edited.\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\t// Merge properties are objects which contain only the patch edit in state,\n\t// and thus must be merged with the current post attribute.\n\tif ( EDIT_MERGE_PROPERTIES.has( attributeName ) ) {\n\t\treturn getNestedEditedPostProperty( state, attributeName );\n\t}\n\n\treturn edits[ attributeName ];\n}\n\n/**\n * Returns an attribute value of the current autosave revision for a post, or\n * null if there is no autosave for the post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Autosave attribute name.\n *\n * @return {*} Autosave attribute value.\n */\nexport function getAutosaveAttribute( state, attributeName ) {\n\tif ( ! hasAutosave( state ) ) {\n\t\treturn null;\n\t}\n\n\tconst autosave = getAutosave( state );\n\tif ( autosave.hasOwnProperty( attributeName ) ) {\n\t\treturn autosave[ attributeName ];\n\t}\n}\n\n/**\n * Returns the current visibility of the post being edited, preferring the\n * unsaved value if different than the saved post. The return value is one of\n * \"private\", \"password\", or \"public\".\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post visibility.\n */\nexport function getEditedPostVisibility( state ) {\n\tconst status = getEditedPostAttribute( state, 'status' );\n\tif ( status === 'private' ) {\n\t\treturn 'private';\n\t}\n\n\tconst password = getEditedPostAttribute( state, 'password' );\n\tif ( password ) {\n\t\treturn 'password';\n\t}\n\n\treturn 'public';\n}\n\n/**\n * Returns true if post is pending review.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is pending review.\n */\nexport function isCurrentPostPending( state ) {\n\treturn getCurrentPost( state ).status === 'pending';\n}\n\n/**\n * Return true if the current post has already been published.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isCurrentPostPublished( state ) {\n\tconst post = getCurrentPost( state );\n\n\treturn [ 'publish', 'private' ].indexOf( post.status ) !== -1 ||\n\t\t( post.status === 'future' && ! isInTheFuture( new Date( Number( getDate( post.date ) ) - ONE_MINUTE_IN_MS ) ) );\n}\n\n/**\n * Returns true if post is already scheduled.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is scheduled to be posted.\n */\nexport function isCurrentPostScheduled( state ) {\n\treturn getCurrentPost( state ).status === 'future' && ! isCurrentPostPublished( state );\n}\n\n/**\n * Return true if the post being edited can be published.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can been published.\n */\nexport function isEditedPostPublishable( state ) {\n\tconst post = getCurrentPost( state );\n\n\t// TODO: Post being publishable should be superset of condition of post\n\t// being saveable. Currently this restriction is imposed at UI.\n\t//\n\t//  See: <PostPublishButton /> (`isButtonEnabled` assigned by `isSaveable`)\n\n\treturn isEditedPostDirty( state ) || [ 'publish', 'private', 'future' ].indexOf( post.status ) === -1;\n}\n\n/**\n * Returns true if the post can be saved, or false otherwise. A post must\n * contain a title, an excerpt, or non-empty content to be valid for save.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can be saved.\n */\nexport function isEditedPostSaveable( state ) {\n\tif ( isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\n\t// TODO: Post should not be saveable if not dirty. Cannot be added here at\n\t// this time since posts where meta boxes are present can be saved even if\n\t// the post is not dirty. Currently this restriction is imposed at UI, but\n\t// should be moved here.\n\t//\n\t//  See: `isEditedPostPublishable` (includes `isEditedPostDirty` condition)\n\t//  See: <PostSavedState /> (`forceIsDirty` prop)\n\t//  See: <PostPublishButton /> (`forceIsDirty` prop)\n\t//  See: https://github.com/WordPress/gutenberg/pull/4184\n\n\treturn (\n\t\t!! getEditedPostAttribute( state, 'title' ) ||\n\t\t!! getEditedPostAttribute( state, 'excerpt' ) ||\n\t\t! isEditedPostEmpty( state )\n\t);\n}\n\n/**\n * Returns true if the edited post has content. A post has content if it has at\n * least one saveable block or otherwise has a non-empty content property\n * assigned.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post has content.\n */\nexport function isEditedPostEmpty( state ) {\n\t// While the condition of truthy content string is sufficient to determine\n\t// emptiness, testing saveable blocks length is a trivial operation. Since\n\t// this function can be called frequently, optimize for the fast case as a\n\t// condition of the mere existence of blocks. Note that the value of edited\n\t// content takes precedent over block content, and must fall through to the\n\t// default logic.\n\tconst blocks = state.editor.present.blocks.value;\n\n\tif ( blocks.length && ! ( 'content' in getPostEdits( state ) ) ) {\n\t\t// Pierce the abstraction of the serializer in knowing that blocks are\n\t\t// joined with with newlines such that even if every individual block\n\t\t// produces an empty save result, the serialized content is non-empty.\n\t\tif ( blocks.length > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// There are two conditions under which the optimization cannot be\n\t\t// assumed, and a fallthrough to getEditedPostContent must occur:\n\t\t//\n\t\t// 1. getBlocksForSerialization has special treatment in omitting a\n\t\t//    single unmodified default block.\n\t\t// 2. Comment delimiters are omitted for a freeform or unregistered\n\t\t//    block in its serialization. The freeform block specifically may\n\t\t//    produce an empty string in its saved output.\n\t\t//\n\t\t// For all other content, the single block is assumed to make a post\n\t\t// non-empty, if only by virtue of its own comment delimiters.\n\t\tconst blockName = blocks[ 0 ].name;\n\t\tif (\n\t\t\tblockName !== getDefaultBlockName() &&\n\t\t\tblockName !== getFreeformContentHandlerName()\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn ! getEditedPostContent( state );\n}\n\n/**\n * Returns true if the post can be autosaved, or false otherwise.\n *\n * @param  {Object}  state Global application state.\n *\n * @return {boolean} Whether the post can be autosaved.\n */\nexport function isEditedPostAutosaveable( state ) {\n\t// A post must contain a title, an excerpt, or non-empty content to be valid for autosaving.\n\tif ( ! isEditedPostSaveable( state ) ) {\n\t\treturn false;\n\t}\n\n\t// If we don't already have an autosave, the post is autosaveable.\n\tif ( ! hasAutosave( state ) ) {\n\t\treturn true;\n\t}\n\n\t// To avoid an expensive content serialization, use the content dirtiness\n\t// flag in place of content field comparison against the known autosave.\n\t// This is not strictly accurate, and relies on a tolerance toward autosave\n\t// request failures for unnecessary saves.\n\tif ( hasChangedContent( state ) ) {\n\t\treturn true;\n\t}\n\n\t// If the title, excerpt or content has changed, the post is autosaveable.\n\tconst autosave = getAutosave( state );\n\treturn [ 'title', 'excerpt' ].some( ( field ) => (\n\t\tautosave[ field ] !== getEditedPostAttribute( state, field )\n\t) );\n}\n\n/**\n * Returns the current autosave, or null if one is not set (i.e. if the post\n * has yet to be autosaved, or has been saved or published since the last\n * autosave).\n *\n * @param {Object} state Editor state.\n *\n * @return {?Object} Current autosave, if exists.\n */\nexport function getAutosave( state ) {\n\treturn state.autosave;\n}\n\n/**\n * Returns the true if there is an existing autosave, otherwise false.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether there is an existing autosave.\n */\nexport function hasAutosave( state ) {\n\treturn !! getAutosave( state );\n}\n\n/**\n * Return true if the post being edited is being scheduled. Preferring the\n * unsaved status values.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isEditedPostBeingScheduled( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\t// Offset the date by one minute (network latency)\n\tconst checkedDate = new Date( Number( getDate( date ) ) - ONE_MINUTE_IN_MS );\n\n\treturn isInTheFuture( checkedDate );\n}\n\n/**\n * Returns whether the current post should be considered to have a \"floating\"\n * date (i.e. that it would publish \"Immediately\" rather than at a set time).\n *\n * Unlike in the PHP backend, the REST API returns a full date string for posts\n * where the 0000-00-00T00:00:00 placeholder is present in the database. To\n * infer that a post is set to publish \"Immediately\" we check whether the date\n * and modified date are the same.\n *\n * @param  {Object}  state Editor state.\n *\n * @return {boolean} Whether the edited post has a floating date value.\n */\nexport function isEditedPostDateFloating( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\tconst modified = getEditedPostAttribute( state, 'modified' );\n\tconst status = getEditedPostAttribute( state, 'status' );\n\tif ( status === 'draft' || status === 'auto-draft' || status === 'pending' ) {\n\t\treturn date === modified;\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if the post is currently being saved, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being saved.\n */\nexport function isSavingPost( state ) {\n\treturn state.saving.requesting;\n}\n\n/**\n * Returns true if a previous post save was attempted successfully, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post was saved successfully.\n */\nexport function didPostSaveRequestSucceed( state ) {\n\treturn state.saving.successful;\n}\n\n/**\n * Returns true if a previous post save was attempted but failed, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post save failed.\n */\nexport function didPostSaveRequestFail( state ) {\n\treturn !! state.saving.error;\n}\n\n/**\n * Returns true if the post is autosaving, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is autosaving.\n */\nexport function isAutosavingPost( state ) {\n\treturn isSavingPost( state ) && !! state.saving.options.isAutosave;\n}\n\n/**\n * Returns true if the post is being previewed, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is being previewed.\n */\nexport function isPreviewingPost( state ) {\n\treturn isSavingPost( state ) && !! state.saving.options.isPreview;\n}\n\n/**\n * Returns the post preview link\n *\n * @param {Object} state Global application state.\n *\n * @return {string?} Preview Link.\n */\nexport function getEditedPostPreviewLink( state ) {\n\tconst featuredImageId = getEditedPostAttribute( state, 'featured_media' );\n\tconst previewLink = state.previewLink;\n\tif ( previewLink && featuredImageId ) {\n\t\treturn addQueryArgs( previewLink, { _thumbnail_id: featuredImageId } );\n\t}\n\n\treturn previewLink;\n}\n\n/**\n * Returns a suggested post format for the current post, inferred only if there\n * is a single block within the post and it is of a type known to match a\n * default post format. Returns null if the format cannot be determined.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Suggested post format.\n */\nexport function getSuggestedPostFormat( state ) {\n\tconst blocks = state.editor.present.blocks.value;\n\n\tlet name;\n\t// If there is only one block in the content of the post grab its name\n\t// so we can derive a suitable post format from it.\n\tif ( blocks.length === 1 ) {\n\t\tname = blocks[ 0 ].name;\n\t}\n\n\t// If there are two blocks in the content and the last one is a text blocks\n\t// grab the name of the first one to also suggest a post format from it.\n\tif ( blocks.length === 2 ) {\n\t\tif ( blocks[ 1 ].name === 'core/paragraph' ) {\n\t\t\tname = blocks[ 0 ].name;\n\t\t}\n\t}\n\n\t// We only convert to default post formats in core.\n\tswitch ( name ) {\n\t\tcase 'core/image':\n\t\t\treturn 'image';\n\t\tcase 'core/quote':\n\t\tcase 'core/pullquote':\n\t\t\treturn 'quote';\n\t\tcase 'core/gallery':\n\t\t\treturn 'gallery';\n\t\tcase 'core/video':\n\t\tcase 'core-embed/youtube':\n\t\tcase 'core-embed/vimeo':\n\t\t\treturn 'video';\n\t\tcase 'core/audio':\n\t\tcase 'core-embed/spotify':\n\t\tcase 'core-embed/soundcloud':\n\t\t\treturn 'audio';\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns a set of blocks which are to be used in consideration of the post's\n * generated save content.\n *\n * @param {Object} state Editor state.\n *\n * @return {WPBlock[]} Filtered set of blocks for save.\n */\nexport function getBlocksForSerialization( state ) {\n\tconst blocks = state.editor.present.blocks.value;\n\n\t// WARNING: Any changes to the logic of this function should be verified\n\t// against the implementation of isEditedPostEmpty, which bypasses this\n\t// function for performance' sake, in an assumption of this current logic\n\t// being irrelevant to the optimized condition of emptiness.\n\n\t// A single unmodified default block is assumed to be equivalent to an\n\t// empty post.\n\tconst isSingleUnmodifiedDefaultBlock = (\n\t\tblocks.length === 1 &&\n\t\tisUnmodifiedDefaultBlock( blocks[ 0 ] )\n\t);\n\n\tif ( isSingleUnmodifiedDefaultBlock ) {\n\t\treturn [];\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Returns the content of the post being edited, preferring raw string edit\n * before falling back to serialization of block state.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post content.\n */\nexport const getEditedPostContent = createSelector(\n\t( state ) => {\n\t\tconst edits = getPostEdits( state );\n\t\tif ( 'content' in edits ) {\n\t\t\treturn edits.content;\n\t\t}\n\n\t\tconst blocks = getBlocksForSerialization( state );\n\t\tconst content = serialize( blocks );\n\n\t\t// For compatibility purposes, treat a post consisting of a single\n\t\t// freeform block as legacy content and downgrade to a pre-block-editor\n\t\t// removep'd content format.\n\t\tconst isSingleFreeformBlock = (\n\t\t\tblocks.length === 1 &&\n\t\t\tblocks[ 0 ].name === getFreeformContentHandlerName()\n\t\t);\n\n\t\tif ( isSingleFreeformBlock ) {\n\t\t\treturn removep( content );\n\t\t}\n\n\t\treturn content;\n\t},\n\t( state ) => [\n\t\tstate.editor.present.blocks.value,\n\t\tstate.editor.present.edits.content,\n\t\tstate.initialEdits.content,\n\t],\n);\n\n/**\n * Returns the reusable block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The reusable block's ID.\n *\n * @return {Object} The reusable block, or null if none exists.\n */\nexport const __experimentalGetReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst block = state.reusableBlocks.data[ ref ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst isTemporary = isNaN( parseInt( ref ) );\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tid: isTemporary ? ref : +ref,\n\t\t\tisTemporary,\n\t\t};\n\t},\n\t( state, ref ) => [\n\t\tstate.reusableBlocks.data[ ref ],\n\t],\n);\n\n/**\n * Returns whether or not the reusable block with the given ID is being saved.\n *\n * @param {Object} state Global application state.\n * @param {string} ref   The reusable block's ID.\n *\n * @return {boolean} Whether or not the reusable block is being saved.\n */\nexport function __experimentalIsSavingReusableBlock( state, ref ) {\n\treturn state.reusableBlocks.isSaving[ ref ] || false;\n}\n\n/**\n * Returns true if the reusable block with the given ID is being fetched, or\n * false otherwise.\n *\n * @param {Object} state Global application state.\n * @param {string} ref   The reusable block's ID.\n *\n * @return {boolean} Whether the reusable block is being fetched.\n */\nexport function __experimentalIsFetchingReusableBlock( state, ref ) {\n\treturn !! state.reusableBlocks.isFetching[ ref ];\n}\n\n/**\n * Returns an array of all reusable blocks.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} An array of all reusable blocks.\n */\nexport const __experimentalGetReusableBlocks = createSelector(\n\t( state ) => {\n\t\treturn map(\n\t\t\tstate.reusableBlocks.data,\n\t\t\t( value, ref ) => __experimentalGetReusableBlock( state, ref )\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.reusableBlocks.data,\n\t]\n);\n\n/**\n * Returns state object prior to a specified optimist transaction ID, or `null`\n * if the transaction corresponding to the given ID cannot be found.\n *\n * @param {Object} state         Current global application state.\n * @param {Object} transactionId Optimist transaction ID.\n *\n * @return {Object} Global application state prior to transaction.\n */\nexport function getStateBeforeOptimisticTransaction( state, transactionId ) {\n\tconst transaction = find( state.optimist, ( entry ) => (\n\t\tentry.beforeState &&\n\t\tget( entry.action, [ 'optimist', 'id' ] ) === transactionId\n\t) );\n\n\treturn transaction ? transaction.beforeState : null;\n}\n\n/**\n * Returns true if the post is being published, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being published.\n */\nexport function isPublishingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\n\t// Saving is optimistic, so assume that current post would be marked as\n\t// published if publishing\n\tif ( ! isCurrentPostPublished( state ) ) {\n\t\treturn false;\n\t}\n\n\t// Use post update transaction ID to retrieve the state prior to the\n\t// optimistic transaction\n\tconst stateBeforeRequest = getStateBeforeOptimisticTransaction(\n\t\tstate,\n\t\tPOST_UPDATE_TRANSACTION_ID\n\t);\n\n\t// Consider as publishing when current post prior to request was not\n\t// considered published\n\treturn !! stateBeforeRequest && ! isCurrentPostPublished( stateBeforeRequest );\n}\n\n/**\n * Returns whether the permalink is editable or not.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether or not the permalink is editable.\n */\nexport function isPermalinkEditable( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute( state, 'permalink_template' );\n\n\treturn PERMALINK_POSTNAME_REGEX.test( permalinkTemplate );\n}\n\n/**\n * Returns the permalink for the post.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} The permalink, or null if the post is not viewable.\n */\nexport function getPermalink( state ) {\n\tconst permalinkParts = getPermalinkParts( state );\n\tif ( ! permalinkParts ) {\n\t\treturn null;\n\t}\n\n\tconst { prefix, postName, suffix } = permalinkParts;\n\n\tif ( isPermalinkEditable( state ) ) {\n\t\treturn prefix + postName + suffix;\n\t}\n\n\treturn prefix;\n}\n\n/**\n * Returns the permalink for a post, split into it's three parts: the prefix,\n * the postName, and the suffix.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} An object containing the prefix, postName, and suffix for\n *                  the permalink, or null if the post is not viewable.\n */\nexport function getPermalinkParts( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute( state, 'permalink_template' );\n\tif ( ! permalinkTemplate ) {\n\t\treturn null;\n\t}\n\n\tconst postName = getEditedPostAttribute( state, 'slug' ) || getEditedPostAttribute( state, 'generated_slug' );\n\n\tconst [ prefix, suffix ] = permalinkTemplate.split( PERMALINK_POSTNAME_REGEX );\n\n\treturn {\n\t\tprefix,\n\t\tpostName,\n\t\tsuffix,\n\t};\n}\n\n/**\n * Returns true if an optimistic transaction is pending commit, for which the\n * before state satisfies the given predicate function.\n *\n * @param {Object}   state     Editor state.\n * @param {Function} predicate Function given state, returning true if match.\n *\n * @return {boolean} Whether predicate matches for some history.\n */\nexport function inSomeHistory( state, predicate ) {\n\tconst { optimist } = state;\n\n\t// In recursion, optimist state won't exist. Assume exhausted options.\n\tif ( ! optimist ) {\n\t\treturn false;\n\t}\n\n\treturn optimist.some( ( { beforeState } ) => (\n\t\tbeforeState && predicate( beforeState )\n\t) );\n}\n\n/**\n * Returns whether the post is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostLocked( state ) {\n\treturn state.postLock.isLocked;\n}\n\n/**\n * Returns whether post saving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostSavingLocked( state ) {\n\treturn Object.keys( state.postSavingLock ).length > 0;\n}\n\n/**\n * Returns whether the edition of the post has been taken over.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is post lock takeover.\n */\nexport function isPostLockTakeover( state ) {\n\treturn state.postLock.isTakeover;\n}\n\n/**\n * Returns details about the post lock user.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} A user object.\n */\nexport function getPostLockUser( state ) {\n\treturn state.postLock.user;\n}\n\n/**\n * Returns the active post lock.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The lock object.\n */\nexport function getActivePostLock( state ) {\n\treturn state.postLock.activePostLock;\n}\n\n/**\n * Returns whether or not the user has the unfiltered_html capability.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the user can or can't post unfiltered HTML.\n */\nexport function canUserUseUnfilteredHTML( state ) {\n\treturn has( getCurrentPost( state ), [ '_links', 'wp:action-unfiltered-html' ] );\n}\n\n/**\n * Returns whether the pre-publish panel should be shown\n * or skipped when the user clicks the \"publish\" button.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the pre-publish panel should be shown or not.\n */\nexport function isPublishSidebarEnabled( state ) {\n\tif ( state.preferences.hasOwnProperty( 'isPublishSidebarEnabled' ) ) {\n\t\treturn state.preferences.isPublishSidebarEnabled;\n\t}\n\treturn PREFERENCES_DEFAULTS.isPublishSidebarEnabled;\n}\n\n/**\n * Return the current block list.\n *\n * @param {Object} state\n * @return {Array} Block list.\n */\nexport function getEditorBlocks( state ) {\n\treturn state.editor.present.blocks.value;\n}\n\n/**\n * Is the editor ready\n *\n * @param {Object} state\n * @return {boolean} is Ready.\n */\nexport function __unstableIsEditorReady( state ) {\n\treturn state.isReady;\n}\n\n/**\n * Returns the post editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getEditorSettings( state ) {\n\treturn state.editorSettings;\n}\n\n/*\n * Backward compatibility\n */\n\nfunction getBlockEditorSelector( name ) {\n\treturn createRegistrySelector( ( select ) => ( state, ...args ) => {\n\t\treturn select( 'core/block-editor' )[ name ]( ...args );\n\t} );\n}\n\nexport const getBlockDependantsCacheBust = getBlockEditorSelector( 'getBlockDependantsCacheBust' );\nexport const getBlockName = getBlockEditorSelector( 'getBlockName' );\nexport const isBlockValid = getBlockEditorSelector( 'isBlockValid' );\nexport const getBlockAttributes = getBlockEditorSelector( 'getBlockAttributes' );\nexport const getBlock = getBlockEditorSelector( 'getBlock' );\nexport const getBlocks = getBlockEditorSelector( 'getBlocks' );\nexport const __unstableGetBlockWithoutInnerBlocks = getBlockEditorSelector( '__unstableGetBlockWithoutInnerBlocks' );\nexport const getClientIdsOfDescendants = getBlockEditorSelector( 'getClientIdsOfDescendants' );\nexport const getClientIdsWithDescendants = getBlockEditorSelector( 'getClientIdsWithDescendants' );\nexport const getGlobalBlockCount = getBlockEditorSelector( 'getGlobalBlockCount' );\nexport const getBlocksByClientId = getBlockEditorSelector( 'getBlocksByClientId' );\nexport const getBlockCount = getBlockEditorSelector( 'getBlockCount' );\nexport const getBlockSelectionStart = getBlockEditorSelector( 'getBlockSelectionStart' );\nexport const getBlockSelectionEnd = getBlockEditorSelector( 'getBlockSelectionEnd' );\nexport const getSelectedBlockCount = getBlockEditorSelector( 'getSelectedBlockCount' );\nexport const hasSelectedBlock = getBlockEditorSelector( 'hasSelectedBlock' );\nexport const getSelectedBlockClientId = getBlockEditorSelector( 'getSelectedBlockClientId' );\nexport const getSelectedBlock = getBlockEditorSelector( 'getSelectedBlock' );\nexport const getBlockRootClientId = getBlockEditorSelector( 'getBlockRootClientId' );\nexport const getBlockHierarchyRootClientId = getBlockEditorSelector( 'getBlockHierarchyRootClientId' );\nexport const getAdjacentBlockClientId = getBlockEditorSelector( 'getAdjacentBlockClientId' );\nexport const getPreviousBlockClientId = getBlockEditorSelector( 'getPreviousBlockClientId' );\nexport const getNextBlockClientId = getBlockEditorSelector( 'getNextBlockClientId' );\nexport const getSelectedBlocksInitialCaretPosition = getBlockEditorSelector( 'getSelectedBlocksInitialCaretPosition' );\nexport const getMultiSelectedBlockClientIds = getBlockEditorSelector( 'getMultiSelectedBlockClientIds' );\nexport const getMultiSelectedBlocks = getBlockEditorSelector( 'getMultiSelectedBlocks' );\nexport const getFirstMultiSelectedBlockClientId = getBlockEditorSelector( 'getFirstMultiSelectedBlockClientId' );\nexport const getLastMultiSelectedBlockClientId = getBlockEditorSelector( 'getLastMultiSelectedBlockClientId' );\nexport const isFirstMultiSelectedBlock = getBlockEditorSelector( 'isFirstMultiSelectedBlock' );\nexport const isBlockMultiSelected = getBlockEditorSelector( 'isBlockMultiSelected' );\nexport const isAncestorMultiSelected = getBlockEditorSelector( 'isAncestorMultiSelected' );\nexport const getMultiSelectedBlocksStartClientId = getBlockEditorSelector( 'getMultiSelectedBlocksStartClientId' );\nexport const getMultiSelectedBlocksEndClientId = getBlockEditorSelector( 'getMultiSelectedBlocksEndClientId' );\nexport const getBlockOrder = getBlockEditorSelector( 'getBlockOrder' );\nexport const getBlockIndex = getBlockEditorSelector( 'getBlockIndex' );\nexport const isBlockSelected = getBlockEditorSelector( 'isBlockSelected' );\nexport const hasSelectedInnerBlock = getBlockEditorSelector( 'hasSelectedInnerBlock' );\nexport const isBlockWithinSelection = getBlockEditorSelector( 'isBlockWithinSelection' );\nexport const hasMultiSelection = getBlockEditorSelector( 'hasMultiSelection' );\nexport const isMultiSelecting = getBlockEditorSelector( 'isMultiSelecting' );\nexport const isSelectionEnabled = getBlockEditorSelector( 'isSelectionEnabled' );\nexport const getBlockMode = getBlockEditorSelector( 'getBlockMode' );\nexport const isTyping = getBlockEditorSelector( 'isTyping' );\nexport const isCaretWithinFormattedText = getBlockEditorSelector( 'isCaretWithinFormattedText' );\nexport const getBlockInsertionPoint = getBlockEditorSelector( 'getBlockInsertionPoint' );\nexport const isBlockInsertionPointVisible = getBlockEditorSelector( 'isBlockInsertionPointVisible' );\nexport const isValidTemplate = getBlockEditorSelector( 'isValidTemplate' );\nexport const getTemplate = getBlockEditorSelector( 'getTemplate' );\nexport const getTemplateLock = getBlockEditorSelector( 'getTemplateLock' );\nexport const canInsertBlockType = getBlockEditorSelector( 'canInsertBlockType' );\nexport const getInserterItems = getBlockEditorSelector( 'getInserterItems' );\nexport const hasInserterItems = getBlockEditorSelector( 'hasInserterItems' );\nexport const getBlockListSettings = getBlockEditorSelector( 'getBlockListSettings' );\n"]}