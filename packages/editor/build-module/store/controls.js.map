{"version":3,"sources":["@wordpress/editor/src/store/controls.js"],"names":["triggerFetch","createRegistryControl","apiFetch","request","type","select","storeKey","selectorName","args","resolveSelect","dispatch","actionName","API_FETCH","SELECT","registry","DISPATCH","RESOLVE_SELECT","Promise","resolve","hasFinished","hasFinishedResolution","getResult","apply","result","unsubscribe","subscribe"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport triggerFetch from '@wordpress/api-fetch';\nimport { createRegistryControl } from '@wordpress/data';\n\n/**\n * Dispatches a control action for triggering an api fetch call.\n *\n * @param {Object} request Arguments for the fetch request.\n *\n * @return {Object} control descriptor.\n */\nexport function apiFetch( request ) {\n\treturn {\n\t\ttype: 'API_FETCH',\n\t\trequest,\n\t};\n}\n\n/**\n * Dispatches a control action for triggering a registry select.\n *\n * @param {string} storeKey\n * @param {string} selectorName\n * @param {Array}  args Arguments for the select.\n *\n * @return {Object} control descriptor.\n */\nexport function select( storeKey, selectorName, ...args ) {\n\treturn {\n\t\ttype: 'SELECT',\n\t\tstoreKey,\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\n/**\n * Dispatches a control action for triggering a registry select that has a\n * resolver.\n *\n * @param {string}  storeKey\n * @param {string}  selectorName\n * @param {Array}   args  Arguments for the select.\n *\n * @return {Object} control descriptor.\n */\nexport function resolveSelect( storeKey, selectorName, ...args ) {\n\treturn {\n\t\ttype: 'RESOLVE_SELECT',\n\t\tstoreKey,\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\n/**\n * Dispatches a control action for triggering a registry dispatch.\n *\n * @param {string} storeKey\n * @param {string} actionName\n * @param {Array} args  Arguments for the dispatch action.\n *\n * @return {Object}  control descriptor.\n */\nexport function dispatch( storeKey, actionName, ...args ) {\n\treturn {\n\t\ttype: 'DISPATCH',\n\t\tstoreKey,\n\t\tactionName,\n\t\targs,\n\t};\n}\n\nexport default {\n\tAPI_FETCH( { request } ) {\n\t\treturn triggerFetch( request );\n\t},\n\tSELECT: createRegistryControl(\n\t\t( registry ) => ( { storeKey, selectorName, args } ) => {\n\t\t\treturn registry.select( storeKey )[ selectorName ]( ...args );\n\t\t}\n\t),\n\tDISPATCH: createRegistryControl(\n\t\t( registry ) => ( { storeKey, actionName, args } ) => {\n\t\t\treturn registry.dispatch( storeKey )[ actionName ]( ...args );\n\t\t}\n\t),\n\tRESOLVE_SELECT: createRegistryControl(\n\t\t( registry ) => ( { storeKey, selectorName, args } ) => {\n\t\t\treturn new Promise( ( resolve ) => {\n\t\t\t\tconst hasFinished = () => registry.select( 'core/data' )\n\t\t\t\t\t.hasFinishedResolution( storeKey, selectorName, args );\n\t\t\t\tconst getResult = () => registry.select( storeKey )[ selectorName ]\n\t\t\t\t\t.apply( null, args );\n\n\t\t\t\t// trigger the selector (to trigger the resolver)\n\t\t\t\tconst result = getResult();\n\t\t\t\tif ( hasFinished() ) {\n\t\t\t\t\treturn resolve( result );\n\t\t\t\t}\n\n\t\t\t\tconst unsubscribe = registry.subscribe( () => {\n\t\t\t\t\tif ( hasFinished() ) {\n\t\t\t\t\t\tunsubscribe();\n\t\t\t\t\t\tresolve( getResult() );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\t),\n};\n"]}