{"version":3,"sources":["@wordpress/editor/src/store/effects/reusable-blocks.js"],"names":["compact","map","uniqueId","BEGIN","COMMIT","REVERT","apiFetch","parse","serialize","createBlock","isReusableBlock","cloneBlock","__","dispatch","dataDispatch","select","__experimentalReceiveReusableBlocks","receiveReusableBlocksAction","__experimentalSaveReusableBlock","saveReusableBlock","__experimentalGetReusableBlock","getReusableBlock","getPostRawValue","REUSABLE_BLOCK_NOTICE_ID","fetchReusableBlocks","action","store","id","path","postType","rest_base","posts","results","post","status","content","protected","parsedBlocks","raw","reusableBlock","title","parsedBlock","length","type","error","saveReusableBlocks","state","getState","clientId","isTemporary","getBlock","name","innerBlocks","data","method","updatedReusableBlock","updatedId","message","createSuccessNotice","__unstableSaveReusableBlock","createErrorNotice","deleteReusableBlocks","allBlocks","getBlocks","associatedBlocks","filter","block","attributes","ref","associatedBlockClientIds","transactionId","optimist","removeBlocks","receiveReusableBlocks","receiveBlocks","convertBlockToStatic","oldBlock","referencedBlock","newBlocks","innerBlock","replaceBlocks","convertBlockToReusable","clientIds","getBlocksByClientId"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { compact, map, uniqueId } from 'lodash';\nimport { BEGIN, COMMIT, REVERT } from 'redux-optimist';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport {\n\tparse,\n\tserialize,\n\tcreateBlock,\n\tisReusableBlock,\n\tcloneBlock,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n// TODO: Ideally this would be the only dispatch in scope. This requires either\n// refactoring editor actions to yielded controls, or replacing direct dispatch\n// on the editor store with action creators (e.g. `REMOVE_REUSABLE_BLOCK`).\nimport { dispatch as dataDispatch, select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\t__experimentalReceiveReusableBlocks as receiveReusableBlocksAction,\n\t__experimentalSaveReusableBlock as saveReusableBlock,\n} from '../actions';\nimport {\n\t__experimentalGetReusableBlock as getReusableBlock,\n} from '../selectors';\nimport { getPostRawValue } from '../reducer';\n\n/**\n * Module Constants\n */\nconst REUSABLE_BLOCK_NOTICE_ID = 'REUSABLE_BLOCK_NOTICE_ID';\n\n/**\n * Fetch Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const fetchReusableBlocks = async ( action, store ) => {\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tlet posts;\n\n\t\tif ( id ) {\n\t\t\tposts = [ await apiFetch( { path: `/wp/v2/${ postType.rest_base }/${ id }` } ) ];\n\t\t} else {\n\t\t\tposts = await apiFetch( { path: `/wp/v2/${ postType.rest_base }?per_page=-1` } );\n\t\t}\n\n\t\tconst results = compact( map( posts, ( post ) => {\n\t\t\tif ( post.status !== 'publish' || post.content.protected ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst parsedBlocks = parse( post.content.raw );\n\t\t\treturn {\n\t\t\t\treusableBlock: {\n\t\t\t\t\tid: post.id,\n\t\t\t\t\ttitle: getPostRawValue( post.title ),\n\t\t\t\t},\n\t\t\t\tparsedBlock: parsedBlocks.length === 1 ?\n\t\t\t\t\tparsedBlocks[ 0 ] :\n\t\t\t\t\tcreateBlock( 'core/template', {}, parsedBlocks ),\n\t\t\t};\n\t\t} ) );\n\n\t\tif ( results.length ) {\n\t\t\tdispatch( receiveReusableBlocksAction( results ) );\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_SUCCESS',\n\t\t\tid,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_FAILURE',\n\t\t\tid,\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Save Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const saveReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\tconst state = store.getState();\n\tconst { clientId, title, isTemporary } = getReusableBlock( state, id );\n\tconst reusableBlock = select( 'core/block-editor' ).getBlock( clientId );\n\tconst content = serialize( reusableBlock.name === 'core/template' ? reusableBlock.innerBlocks : reusableBlock );\n\n\tconst data = isTemporary ? { title, content, status: 'publish' } : { id, title, content, status: 'publish' };\n\tconst path = isTemporary ? `/wp/v2/${ postType.rest_base }` : `/wp/v2/${ postType.rest_base }/${ id }`;\n\tconst method = isTemporary ? 'POST' : 'PUT';\n\n\ttry {\n\t\tconst updatedReusableBlock = await apiFetch( { path, data, method } );\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tupdatedId: updatedReusableBlock.id,\n\t\t\tid,\n\t\t} );\n\t\tconst message = isTemporary ? __( 'Block created.' ) : __( 'Block updated.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\n\t\tdataDispatch( 'core/block-editor' ).__unstableSaveReusableBlock( id, updatedReusableBlock.id );\n\t} catch ( error ) {\n\t\tdispatch( { type: 'SAVE_REUSABLE_BLOCK_FAILURE', id } );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Delete Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const deleteReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { getState, dispatch } = store;\n\n\t// Don't allow a reusable block with a temporary ID to be deleted\n\tconst reusableBlock = getReusableBlock( getState(), id );\n\tif ( ! reusableBlock || reusableBlock.isTemporary ) {\n\t\treturn;\n\t}\n\n\t// Remove any other blocks that reference this reusable block\n\tconst allBlocks = select( 'core/block-editor' ).getBlocks();\n\tconst associatedBlocks = allBlocks.filter( ( block ) => isReusableBlock( block ) && block.attributes.ref === id );\n\tconst associatedBlockClientIds = associatedBlocks.map( ( block ) => block.clientId );\n\n\tconst transactionId = uniqueId();\n\n\tdispatch( {\n\t\ttype: 'REMOVE_REUSABLE_BLOCK',\n\t\tid,\n\t\toptimist: { type: BEGIN, id: transactionId },\n\t} );\n\n\t// Remove the parsed block.\n\tdataDispatch( 'core/block-editor' ).removeBlocks( [\n\t\t...associatedBlockClientIds,\n\t\treusableBlock.clientId,\n\t] );\n\n\ttry {\n\t\tawait apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tid,\n\t\t\toptimist: { type: COMMIT, id: transactionId },\n\t\t} );\n\t\tconst message = __( 'Block deleted.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_FAILURE',\n\t\t\tid,\n\t\t\toptimist: { type: REVERT, id: transactionId },\n\t\t} );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Receive Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n */\nexport const receiveReusableBlocks = ( action ) => {\n\tdataDispatch( 'core/block-editor' ).receiveBlocks( map( action.results, 'parsedBlock' ) );\n};\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToStatic = ( action, store ) => {\n\tconst state = store.getState();\n\tconst oldBlock = select( 'core/block-editor' ).getBlock( action.clientId );\n\tconst reusableBlock = getReusableBlock( state, oldBlock.attributes.ref );\n\tconst referencedBlock = select( 'core/block-editor' ).getBlock( reusableBlock.clientId );\n\tlet newBlocks;\n\tif ( referencedBlock.name === 'core/template' ) {\n\t\tnewBlocks = referencedBlock.innerBlocks.map( ( innerBlock ) => cloneBlock( innerBlock ) );\n\t} else {\n\t\tnewBlocks = [ cloneBlock( referencedBlock ) ];\n\t}\n\tdataDispatch( 'core/block-editor' ).replaceBlocks( oldBlock.clientId, newBlocks );\n};\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToReusable = ( action, store ) => {\n\tconst { dispatch } = store;\n\tlet parsedBlock;\n\tif ( action.clientIds.length === 1 ) {\n\t\tparsedBlock = select( 'core/block-editor' ).getBlock( action.clientIds[ 0 ] );\n\t} else {\n\t\tparsedBlock = createBlock(\n\t\t\t'core/template',\n\t\t\t{},\n\t\t\tselect( 'core/block-editor' ).getBlocksByClientId( action.clientIds )\n\t\t);\n\n\t\t// This shouldn't be necessary but at the moment\n\t\t// we expect the content of the shared blocks to live in the blocks state.\n\t\tdataDispatch( 'core/block-editor' ).receiveBlocks( [ parsedBlock ] );\n\t}\n\n\tconst reusableBlock = {\n\t\tid: uniqueId( 'reusable' ),\n\t\tclientId: parsedBlock.clientId,\n\t\ttitle: __( 'Untitled Reusable Block' ),\n\t};\n\n\tdispatch( receiveReusableBlocksAction( [ {\n\t\treusableBlock,\n\t\tparsedBlock,\n\t} ] ) );\n\n\tdispatch( saveReusableBlock( reusableBlock.id ) );\n\n\tdataDispatch( 'core/block-editor' ).replaceBlocks(\n\t\taction.clientIds,\n\t\tcreateBlock( 'core/block', {\n\t\t\tref: reusableBlock.id,\n\t\t} )\n\t);\n\n\t// Re-add the original block to the store, since replaceBlock() will have removed it\n\tdataDispatch( 'core/block-editor' ).receiveBlocks( [ parsedBlock ] );\n};\n"]}