{"version":3,"sources":["@wordpress/editor/src/store/actions.js"],"names":["setupEditor","savePost","refreshPost","trashPost","autosave","castArray","pick","has","BEGIN","COMMIT","REVERT","dispatch","select","resolveSelect","apiFetch","STORE_KEY","POST_UPDATE_TRANSACTION_ID","SAVE_POST_NOTICE_ID","TRASH_POST_NOTICE_ID","getNotificationArgumentsForSaveSuccess","getNotificationArgumentsForSaveFail","getNotificationArgumentsForTrashFail","parse","synchronizeBlocksWithTemplate","post","edits","template","type","content","raw","blocks","isNewPost","status","resetEditorBlocks","setupEditorState","resetPost","resetAutosave","__experimentalRequestPostUpdateStart","options","optimist","id","__experimentalRequestPostUpdateSuccess","previousPost","isRevision","postType","__experimentalRequestPostUpdateFailure","error","updatePost","editPost","__experimentalOptimisticUpdatePost","isEditedPostSaveable","isAutosave","isEditedPostNew","editedPostContent","toSend","currentPostType","path","rest_base","method","autoSavePost","data","newPost","resetAction","notifySuccessArgs","length","notifyFailArgs","postTypeSlug","Date","now","redo","undo","createUndoLevel","updatePostLock","lock","__experimentalFetchReusableBlocks","__experimentalReceiveReusableBlocks","results","__experimentalSaveReusableBlock","__experimentalDeleteReusableBlock","__experimentalUpdateReusableBlockTitle","title","__experimentalConvertBlockToStatic","clientId","__experimentalConvertBlockToReusable","clientIds","enablePublishSidebar","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","shouldCreateUndoLevel","__unstableShouldCreateUndoLevel","updateEditorSettings","settings","getBlockEditorAction","name","args","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","clearSelectedBlock","toggleSelection","replaceBlocks","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray, pick, has } from 'lodash';\nimport { BEGIN, COMMIT, REVERT } from 'redux-optimist';\n\n/**\n * Internal dependencies\n */\nimport {\n\tdispatch,\n\tselect,\n\tresolveSelect,\n\tapiFetch,\n} from './controls';\nimport {\n\tSTORE_KEY,\n\tPOST_UPDATE_TRANSACTION_ID,\n\tSAVE_POST_NOTICE_ID,\n\tTRASH_POST_NOTICE_ID,\n} from './constants';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tparse,\n\tsynchronizeBlocksWithTemplate,\n} from '@wordpress/blocks';\n\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post      Post object.\n * @param {Object} edits     Initial edited attributes object.\n * @param {Array?} template  Block Template.\n */\nexport function* setupEditor( post, edits, template ) {\n\tyield {\n\t\ttype: 'SETUP_EDITOR',\n\t\tpost,\n\t\tedits,\n\t\ttemplate,\n\t};\n\n\t// In order to ensure maximum of a single parse during setup, edits are\n\t// included as part of editor setup action. Assume edited content as\n\t// canonical if provided, falling back to post.\n\tlet content;\n\tif ( has( edits, [ 'content' ] ) ) {\n\t\tcontent = edits.content;\n\t} else {\n\t\tcontent = post.content.raw;\n\t}\n\n\tlet blocks = parse( content );\n\n\t// Apply a template for new posts only, if exists.\n\tconst isNewPost = post.status === 'auto-draft';\n\tif ( isNewPost && template ) {\n\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t}\n\n\tyield resetEditorBlocks( blocks );\n\tyield setupEditorState( post );\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function resetPost( post ) {\n\treturn {\n\t\ttype: 'RESET_POST',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the latest autosave of the\n * post has been received, by initialization or autosave.\n *\n * @param {Object} post Autosave post object.\n *\n * @return {Object} Action object.\n */\nexport function resetAutosave( post ) {\n\treturn {\n\t\ttype: 'RESET_AUTOSAVE',\n\t\tpost,\n\t};\n}\n\n/**\n * Optimistic action for dispatching that a post update request has started.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateStart( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_START',\n\t\toptimist: { type: BEGIN, id: POST_UPDATE_TRANSACTION_ID },\n\t\toptions,\n\t};\n}\n\n/**\n * Optimistic action for indicating that the request post update has completed\n * successfully.\n *\n * @param {Object}  data                The data for the action.\n * @param {Object}  data.previousPost   The previous post prior to update.\n * @param {Object}  data.post           The new post after update\n * @param {boolean} data.isRevision     Whether the post is a revision or not.\n * @param {Object}  data.options        Options passed through from the original\n *                                      action dispatch.\n * @param {Object}  data.postType       The post type object.\n *\n * @return {Object}\tAction object.\n */\nexport function __experimentalRequestPostUpdateSuccess( {\n\tpreviousPost,\n\tpost,\n\tisRevision,\n\toptions,\n\tpostType,\n} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_SUCCESS',\n\t\tpreviousPost,\n\t\tpost,\n\t\toptimist: {\n\t\t\t// Note: REVERT is not a failure case here. Rather, it\n\t\t\t// is simply reversing the assumption that the updates\n\t\t\t// were applied to the post proper, such that the post\n\t\t\t// treated as having unsaved changes.\n\t\t\ttype: isRevision ? REVERT : COMMIT,\n\t\t\tid: POST_UPDATE_TRANSACTION_ID,\n\t\t},\n\t\toptions,\n\t\tpostType,\n\t};\n}\n\n/**\n * Optimistic action for indicating that the request post update has completed\n * with a failure.\n *\n * @param {Object}  data          The data for the action\n * @param {Object}  data.post     The post that failed updating.\n * @param {Object}  data.edits    The fields that were being updated.\n * @param {*}       data.error    The error from the failed call.\n * @param {Object}  data.options  Options passed through from the original\n *                                action dispatch.\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateFailure( {\n\tpost,\n\tedits,\n\terror,\n\toptions,\n} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_FAILURE',\n\t\toptimist: { type: REVERT, id: POST_UPDATE_TRANSACTION_ID },\n\t\tpost,\n\t\tedits,\n\t\terror,\n\t\toptions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @param {Object} edits Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function updatePost( edits ) {\n\treturn {\n\t\ttype: 'UPDATE_POST',\n\t\tedits,\n\t};\n}\n\n/**\n * Returns an action object used to setup the editor state when first opening\n * an editor.\n *\n * @param {Object} post   Post object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditorState( post ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR_STATE',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits Post attributes to edit.\n *\n * @return {Object} Action object.\n */\nexport function editPost( edits ) {\n\treturn {\n\t\ttype: 'EDIT_POST',\n\t\tedits,\n\t};\n}\n\n/**\n * Returns action object produced by the updatePost creator augmented by\n * an optimist option that signals optimistically applying updates.\n *\n * @param {Object} edits  Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalOptimisticUpdatePost( edits ) {\n\treturn {\n\t\t...updatePost( edits ),\n\t\toptimist: { id: POST_UPDATE_TRANSACTION_ID },\n\t};\n}\n\n/**\n * Action generator for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport function* savePost( options = {} ) {\n\tconst isEditedPostSaveable = yield select(\n\t\tSTORE_KEY,\n\t\t'isEditedPostSaveable'\n\t);\n\tif ( ! isEditedPostSaveable ) {\n\t\treturn;\n\t}\n\tlet edits = yield select(\n\t\tSTORE_KEY,\n\t\t'getPostEdits'\n\t);\n\tconst isAutosave = !! options.isAutosave;\n\n\tif ( isAutosave ) {\n\t\tedits = pick( edits, [ 'title', 'content', 'excerpt' ] );\n\t}\n\n\tconst isEditedPostNew = yield select(\n\t\tSTORE_KEY,\n\t\t'isEditedPostNew',\n\t);\n\n\t// New posts (with auto-draft status) must be explicitly assigned draft\n\t// status if there is not already a status assigned in edits (publish).\n\t// Otherwise, they are wrongly left as auto-draft. Status is not always\n\t// respected for autosaves, so it cannot simply be included in the pick\n\t// above. This behavior relies on an assumption that an auto-draft post\n\t// would never be saved by anyone other than the owner of the post, per\n\t// logic within autosaves REST controller to save status field only for\n\t// draft/auto-draft by current user.\n\t//\n\t// See: https://core.trac.wordpress.org/ticket/43316#comment:88\n\t// See: https://core.trac.wordpress.org/ticket/43316#comment:89\n\tif ( isEditedPostNew ) {\n\t\tedits = { status: 'draft', ...edits };\n\t}\n\n\tconst post = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPost'\n\t);\n\n\tconst editedPostContent = yield select(\n\t\tSTORE_KEY,\n\t\t'getEditedPostContent'\n\t);\n\n\tlet toSend = {\n\t\t...edits,\n\t\tcontent: editedPostContent,\n\t\tid: post.id,\n\t};\n\n\tconst currentPostType = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPostType'\n\t);\n\n\tconst postType = yield resolveSelect(\n\t\t'core',\n\t\t'getPostType',\n\t\tcurrentPostType\n\t);\n\n\tyield dispatch(\n\t\tSTORE_KEY,\n\t\t'__experimentalRequestPostUpdateStart',\n\t\toptions,\n\t);\n\n\t// Optimistically apply updates under the assumption that the post\n\t// will be updated. See below logic in success resolution for revert\n\t// if the autosave is applied as a revision.\n\tyield dispatch(\n\t\tSTORE_KEY,\n\t\t'__experimentalOptimisticUpdatePost',\n\t\ttoSend\n\t);\n\n\tlet path = `/wp/v2/${ postType.rest_base }/${ post.id }`;\n\tlet method = 'PUT';\n\tif ( isAutosave ) {\n\t\tconst autoSavePost = yield select(\n\t\t\tSTORE_KEY,\n\t\t\t'getAutosave',\n\t\t);\n\t\t// Ensure autosaves contain all expected fields, using autosave or\n\t\t// post values as fallback if not otherwise included in edits.\n\t\ttoSend = {\n\t\t\t...pick( post, [ 'title', 'content', 'excerpt' ] ),\n\t\t\t...autoSavePost,\n\t\t\t...toSend,\n\t\t};\n\t\tpath += '/autosaves';\n\t\tmethod = 'POST';\n\t} else {\n\t\tyield dispatch(\n\t\t\t'core/notices',\n\t\t\t'removeNotice',\n\t\t\tSAVE_POST_NOTICE_ID,\n\t\t);\n\t\tyield dispatch(\n\t\t\t'core/notices',\n\t\t\t'removeNotice',\n\t\t\t'autosave-exists',\n\t\t);\n\t}\n\n\ttry {\n\t\tconst newPost = yield apiFetch( {\n\t\t\tpath,\n\t\t\tmethod,\n\t\t\tdata: toSend,\n\t\t} );\n\t\tconst resetAction = isAutosave ? 'resetAutosave' : 'resetPost';\n\n\t\tyield dispatch( STORE_KEY, resetAction, newPost );\n\n\t\tyield dispatch(\n\t\t\tSTORE_KEY,\n\t\t\t'__experimentalRequestPostUpdateSuccess',\n\t\t\t{\n\t\t\t\tpreviousPost: post,\n\t\t\t\tpost: newPost,\n\t\t\t\toptions,\n\t\t\t\tpostType,\n\t\t\t\t// An autosave may be processed by the server as a regular save\n\t\t\t\t// when its update is requested by the author and the post was\n\t\t\t\t// draft or auto-draft.\n\t\t\t\tisRevision: newPost.id !== post.id,\n\t\t\t}\n\t\t);\n\n\t\tconst notifySuccessArgs = getNotificationArgumentsForSaveSuccess( {\n\t\t\tpreviousPost: post,\n\t\t\tpost: newPost,\n\t\t\tpostType,\n\t\t\toptions,\n\t\t} );\n\t\tif ( notifySuccessArgs.length > 0 ) {\n\t\t\tyield dispatch(\n\t\t\t\t'core/notices',\n\t\t\t\t'createSuccessNotice',\n\t\t\t\t...notifySuccessArgs\n\t\t\t);\n\t\t}\n\t} catch ( error ) {\n\t\tyield dispatch(\n\t\t\tSTORE_KEY,\n\t\t\t'__experimentalRequestPostUpdateFailure',\n\t\t\t{ post, edits, error, options }\n\t\t);\n\t\tconst notifyFailArgs = getNotificationArgumentsForSaveFail( {\n\t\t\tpost,\n\t\t\tedits,\n\t\t\terror,\n\t\t} );\n\t\tif ( notifyFailArgs.length > 0 ) {\n\t\t\tyield dispatch(\n\t\t\t\t'core/notices',\n\t\t\t\t'createErrorNotice',\n\t\t\t\t...notifyFailArgs\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * Action generator for handling refreshing the current post.\n */\nexport function* refreshPost() {\n\tconst post = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPost'\n\t);\n\tconst postTypeSlug = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield resolveSelect(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tconst newPost = yield apiFetch(\n\t\t{\n\t\t\t// Timestamp arg allows caller to bypass browser caching, which is\n\t\t\t// expected for this specific function.\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }` +\n\t\t\t\t`?context=edit&_timestamp=${ Date.now() }`,\n\t\t}\n\t);\n\tyield dispatch(\n\t\tSTORE_KEY,\n\t\t'resetPost',\n\t\tnewPost\n\t);\n}\n\n/**\n * Action generator for trashing the current post in the editor.\n */\nexport function* trashPost() {\n\tconst postTypeSlug = yield select(\n\t\tSTORE_KEY,\n\t\t'getCurrentPostType'\n\t);\n\tconst postType = yield resolveSelect(\n\t\t'core',\n\t\t'getPostType',\n\t\tpostTypeSlug\n\t);\n\tyield dispatch(\n\t\t'core/notices',\n\t\t'removeNotice',\n\t\tTRASH_POST_NOTICE_ID\n\t);\n\ttry {\n\t\tconst post = yield select(\n\t\t\tSTORE_KEY,\n\t\t\t'getCurrentPost'\n\t\t);\n\t\tyield apiFetch(\n\t\t\t{\n\t\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\t\t\tmethod: 'DELETE',\n\t\t\t}\n\t\t);\n\n\t\t// TODO: This should be an updatePost action (updating subsets of post\n\t\t// properties), but right now editPost is tied with change detection.\n\t\tyield dispatch(\n\t\t\tSTORE_KEY,\n\t\t\t'resetPost',\n\t\t\t{ ...post, status: 'trash' }\n\t\t);\n\t} catch ( error ) {\n\t\tyield dispatch(\n\t\t\t'core/notices',\n\t\t\t'createErrorNotice',\n\t\t\t...getNotificationArgumentsForTrashFail( { error } ),\n\t\t);\n\t}\n}\n\n/**\n * Action generator used in signalling that the post should autosave.\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport function* autosave( options ) {\n\tyield dispatch(\n\t\tSTORE_KEY,\n\t\t'savePost',\n\t\t{ isAutosave: true, ...options }\n\t);\n}\n\n/**\n * Returns an action object used in signalling that undo history should\n * restore last popped state.\n *\n * @return {Object} Action object.\n */\nexport function redo() {\n\treturn { type: 'REDO' };\n}\n\n/**\n * Returns an action object used in signalling that undo history should pop.\n *\n * @return {Object} Action object.\n */\nexport function undo() {\n\treturn { type: 'UNDO' };\n}\n\n/**\n * Returns an action object used in signalling that undo history record should\n * be created.\n *\n * @return {Object} Action object.\n */\nexport function createUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Returns an action object used to lock the editor.\n *\n * @param {Object}  lock Details about the post lock status, user, and nonce.\n *\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Returns an action object used to fetch a single reusable block or all\n * reusable blocks from the REST API into the store.\n *\n * @param {?string} id If given, only a single reusable block with this ID will\n *                     be fetched.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalFetchReusableBlocks( id ) {\n\treturn {\n\t\ttype: 'FETCH_REUSABLE_BLOCKS',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that reusable blocks have been\n * received. `results` is an array of objects containing:\n *  - `reusableBlock` - Details about how the reusable block is persisted.\n *  - `parsedBlock` - The original block.\n *\n * @param {Object[]} results Reusable blocks received.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveReusableBlocks( results ) {\n\treturn {\n\t\ttype: 'RECEIVE_REUSABLE_BLOCKS',\n\t\tresults,\n\t};\n}\n\n/**\n * Returns an action object used to save a reusable block that's in the store to\n * the REST API.\n *\n * @param {Object} id The ID of the reusable block to save.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalSaveReusableBlock( id ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used to delete a reusable block via the REST API.\n *\n * @param {number} id The ID of the reusable block to delete.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalDeleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a reusable block's title is\n * to be updated.\n *\n * @param {number} id    The ID of the reusable block to update.\n * @param {string} title The new title.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalUpdateReusableBlockTitle( id, title ) {\n\treturn {\n\t\ttype: 'UPDATE_REUSABLE_BLOCK_TITLE',\n\t\tid,\n\t\ttitle,\n\t};\n}\n\n/**\n * Returns an action object used to convert a reusable block into a static\n * block.\n *\n * @param {string} clientId The client ID of the block to attach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used to convert a static block into a reusable\n * block.\n *\n * @param {string} clientIds The client IDs of the block to detach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToReusable( clientIds ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_REUSABLE',\n\t\tclientIds: castArray( clientIds ),\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has enabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function enablePublishSidebar() {\n\treturn {\n\t\ttype: 'ENABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has disabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function disablePublishSidebar() {\n\treturn {\n\t\ttype: 'DISABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n *\n * @return {Object} Action object\n */\nexport function resetEditorBlocks( blocks, options = {} ) {\n\treturn {\n\t\ttype: 'RESET_EDITOR_BLOCKS',\n\t\tblocks,\n\t\tshouldCreateUndoLevel: options.__unstableShouldCreateUndoLevel !== false,\n\t};\n}\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction = ( name ) => function* ( ...args ) {\n\tyield dispatch( 'core/block-editor', name, ...args );\n};\n\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\nexport const updateBlockAttributes = getBlockEditorAction( 'updateBlockAttributes' );\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\nexport const moveBlockToPosition = getBlockEditorAction( 'moveBlockToPosition' );\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\nexport const setTemplateValidity = getBlockEditorAction( 'setTemplateValidity' );\nexport const synchronizeTemplate = getBlockEditorAction( 'synchronizeTemplate' );\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\nexport const startTyping = getBlockEditorAction( 'startTyping' );\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\nexport const updateBlockListSettings = getBlockEditorAction( 'updateBlockListSettings' );\n"]}