{"version":3,"sources":["@wordpress/editor/src/store/reducer.js"],"names":["optimist","flow","reduce","omit","mapValues","keys","isEqual","last","combineReducers","addQueryArgs","PREFERENCES_DEFAULTS","INITIAL_EDITS_DEFAULTS","EDITOR_SETTINGS_DEFAULTS","EDIT_MERGE_PROPERTIES","withChangeDetection","withHistory","getPostRawValue","value","raw","getMutateSafeObject","original","working","hasSameKeys","a","b","isUpdatingSamePostProperty","action","previousAction","type","edits","shouldOverwriteState","shouldCreateUndoLevel","editor","resetTypes","ignoreTypes","blocks","state","result","key","has","getCanonicalValue","post","initialEdits","hasOwnProperty","currentPost","isTyping","isCaretWithinFormattedText","blockSelection","start","end","isMultiSelecting","isEnabled","initialPosition","clientId","updateSelection","clientIds","length","indexOf","lastBlock","nextSelectedBlockClientId","isSelectionEnabled","blocksMode","insertionPoint","rootClientId","index","template","isValid","preferences","isPublishSidebarEnabled","saving","requesting","successful","error","options","postLock","isLocked","lock","postSavingLock","lockName","reusableBlocks","data","results","nextState","reusableBlock","id","title","parsedBlock","updatedId","isFetching","isSaving","blockListSettings","settings","autosave","map","field","excerpt","content","previewLink","preview_link","link","preview","isPreview","isReady","editorSettings"],"mappings":";;;;;AAAA;;;AAGA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SACCC,IADD,EAECC,MAFD,EAGCC,IAHD,EAICC,SAJD,EAKCC,IALD,EAMCC,OAND,EAOCC,IAPD,QAQO,QARP;AAUA;;;;AAGA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA;;;;AAGA,SACCC,oBADD,EAECC,sBAFD,EAGCC,wBAHD,QAIO,YAJP;AAKA,SAASC,qBAAT,QAAsC,aAAtC;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA;;;;;;;;;AAQA,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAkC;AACxC,MAAKA,KAAK,IAAI,qBAAoBA,KAApB,CAAT,IAAsC,SAASA,KAApD,EAA4D;AAC3D,WAAOA,KAAK,CAACC,GAAb;AACA;;AAED,SAAOD,KAAP;AACA;AAED;;;;;;;;;;AASA,SAASE,mBAAT,CAA8BC,QAA9B,EAAwCC,OAAxC,EAAkD;AACjD,MAAKD,QAAQ,KAAKC,OAAlB,EAA4B;AAC3B,6BAAYD,QAAZ;AACA;;AAED,SAAOC,OAAP;AACA;AAED;;;;;;;;;;;AASA,OAAO,SAASC,WAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA6B;AACnC,SAAOlB,OAAO,CAAED,IAAI,CAAEkB,CAAF,CAAN,EAAalB,IAAI,CAAEmB,CAAF,CAAjB,CAAd;AACA;AAED;;;;;;;;;;;AAUA,OAAO,SAASC,0BAAT,CAAqCC,MAArC,EAA6CC,cAA7C,EAA8D;AACpE,SACCD,MAAM,CAACE,IAAP,KAAgB,WAAhB,IACAN,WAAW,CAAEI,MAAM,CAACG,KAAT,EAAgBF,cAAc,CAACE,KAA/B,CAFZ;AAIA;AAED;;;;;;;;;;;AAUA,OAAO,SAASC,oBAAT,CAA+BJ,MAA/B,EAAuCC,cAAvC,EAAwD;AAC9D,MAAKD,MAAM,CAACE,IAAP,KAAgB,qBAArB,EAA6C;AAC5C,WAAO,CAAEF,MAAM,CAACK,qBAAhB;AACA;;AAED,MAAK,CAAEJ,cAAF,IAAoBD,MAAM,CAACE,IAAP,KAAgBD,cAAc,CAACC,IAAxD,EAA+D;AAC9D,WAAO,KAAP;AACA;;AAED,SAAOH,0BAA0B,CAAEC,MAAF,EAAUC,cAAV,CAAjC;AACA;AAED;;;;;;;;;;;;;;;AAcA,OAAO,IAAMK,MAAM,GAAG/B,IAAI,CAAE,CAC3BO,eAD2B,EAG3BO,WAAW,CAAE;AACZkB,EAAAA,UAAU,EAAE,CAAE,oBAAF,CADA;AAEZC,EAAAA,WAAW,EAAE,CACZ,YADY,EAEZ,aAFY,CAFD;AAMZJ,EAAAA,oBAAoB,EAApBA;AANY,CAAF,CAHgB,CAAF,CAAJ,CAWjB;AACJ;AACA;AACAK,EAAAA,MAAM,EAAErB,mBAAmB,CAAE;AAC5BmB,IAAAA,UAAU,EAAE,CAAE,oBAAF,EAAwB,2BAAxB;AADgB,GAAF,CAAnB,CAEH,YAAqC;AAAA,QAAnCG,KAAmC,uEAA3B;AAAEnB,MAAAA,KAAK,EAAE;AAAT,KAA2B;AAAA,QAAZS,MAAY;;AACzC,YAASA,MAAM,CAACE,IAAhB;AACC,WAAK,qBAAL;AACC,YAAKF,MAAM,CAACS,MAAP,KAAkBC,KAAK,CAACnB,KAA7B,EAAqC;AACpC,iBAAOmB,KAAP;AACA;;AACD,eAAO;AAAEnB,UAAAA,KAAK,EAAES,MAAM,CAACS;AAAhB,SAAP;AALF;;AAQA,WAAOC,KAAP;AACA,GAZO,CAHJ;AAgBJP,EAAAA,KAhBI,mBAgBwB;AAAA,QAArBO,KAAqB,uEAAb,EAAa;AAAA,QAATV,MAAS;;AAC3B,YAASA,MAAM,CAACE,IAAhB;AACC,WAAK,WAAL;AACC,eAAO1B,MAAM,CAAEwB,MAAM,CAACG,KAAT,EAAgB,UAAEQ,MAAF,EAAUpB,KAAV,EAAiBqB,GAAjB,EAA0B;AACtD;AACA,cAAKrB,KAAK,KAAKmB,KAAK,CAAEE,GAAF,CAApB,EAA8B;AAC7BD,YAAAA,MAAM,GAAGlB,mBAAmB,CAAEiB,KAAF,EAASC,MAAT,CAA5B;;AAEA,gBAAKxB,qBAAqB,CAAC0B,GAAtB,CAA2BD,GAA3B,CAAL,EAAwC;AACvC;AACAD,cAAAA,MAAM,CAAEC,GAAF,CAAN,qBAAqBD,MAAM,CAAEC,GAAF,CAA3B,EAAuCrB,KAAvC;AACA,aAHD,MAGO;AACN;AACAoB,cAAAA,MAAM,CAAEC,GAAF,CAAN,GAAgBrB,KAAhB;AACA;AACD;;AAED,iBAAOoB,MAAP;AACA,SAfY,EAeVD,KAfU,CAAb;;AAgBD,WAAK,aAAL;AACA,WAAK,YAAL;AACC,YAAMI,iBAAiB,GAAGd,MAAM,CAACE,IAAP,KAAgB,aAAhB,GACzB,UAAEU,GAAF;AAAA,iBAAWZ,MAAM,CAACG,KAAP,CAAcS,GAAd,CAAX;AAAA,SADyB,GAEzB,UAAEA,GAAF;AAAA,iBAAWtB,eAAe,CAAEU,MAAM,CAACe,IAAP,CAAaH,GAAb,CAAF,CAA1B;AAAA,SAFD;AAIA,eAAOpC,MAAM,CAAEkC,KAAF,EAAS,UAAEC,MAAF,EAAUpB,KAAV,EAAiBqB,GAAjB,EAA0B;AAC/C,cAAK,CAAEhC,OAAO,CAAEW,KAAF,EAASuB,iBAAiB,CAAEF,GAAF,CAA1B,CAAd,EAAoD;AACnD,mBAAOD,MAAP;AACA;;AAEDA,UAAAA,MAAM,GAAGlB,mBAAmB,CAAEiB,KAAF,EAASC,MAAT,CAA5B;AACA,iBAAOA,MAAM,CAAEC,GAAF,CAAb;AACA,iBAAOD,MAAP;AACA,SARY,EAQVD,KARU,CAAb;;AASD,WAAK,qBAAL;AACC,YAAK,aAAaA,KAAlB,EAA0B;AACzB,iBAAOjC,IAAI,CAAEiC,KAAF,EAAS,SAAT,CAAX;AACA;;AAED,eAAOA,KAAP;AAtCF;;AAyCA,WAAOA,KAAP;AACA;AA3DG,CAXiB,CAAf;AAyEP;;;;;;;;;;;;AAWA,OAAO,SAASM,YAAT,GAAgE;AAAA,MAAzCN,KAAyC,uEAAjCzB,sBAAiC;AAAA,MAATe,MAAS;;AACtE,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,cAAL;AACC,UAAK,CAAEF,MAAM,CAACG,KAAd,EAAsB;AACrB;AACA;;AAED,aAAOH,MAAM,CAACG,KAAd;;AAED,SAAK,oBAAL;AACC,UAAK,aAAaO,KAAlB,EAA0B;AACzB,eAAOjC,IAAI,CAAEiC,KAAF,EAAS,SAAT,CAAX;AACA;;AAED,aAAOA,KAAP;;AAED,SAAK,aAAL;AACC,aAAOlC,MAAM,CAAEwB,MAAM,CAACG,KAAT,EAAgB,UAAEQ,MAAF,EAAUpB,KAAV,EAAiBqB,GAAjB,EAA0B;AACtD,YAAK,CAAED,MAAM,CAACM,cAAP,CAAuBL,GAAvB,CAAP,EAAsC;AACrC,iBAAOD,MAAP;AACA;;AAEDA,QAAAA,MAAM,GAAGlB,mBAAmB,CAAEiB,KAAF,EAASC,MAAT,CAA5B;AACA,eAAOA,MAAM,CAAEC,GAAF,CAAb;AACA,eAAOD,MAAP;AACA,OARY,EAQVD,KARU,CAAb;;AAUD,SAAK,YAAL;AACC,aAAOzB,sBAAP;AA3BF;;AA8BA,SAAOyB,KAAP;AACA;AAED;;;;;;;;;;AASA,OAAO,SAASQ,WAAT,GAA2C;AAAA,MAArBR,KAAqB,uEAAb,EAAa;AAAA,MAATV,MAAS;;AACjD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,oBAAL;AACA,SAAK,YAAL;AACA,SAAK,aAAL;AACC,UAAIa,IAAJ;;AACA,UAAKf,MAAM,CAACe,IAAZ,EAAmB;AAClBA,QAAAA,IAAI,GAAGf,MAAM,CAACe,IAAd;AACA,OAFD,MAEO,IAAKf,MAAM,CAACG,KAAZ,EAAoB;AAC1BY,QAAAA,IAAI,qBACAL,KADA,EAEAV,MAAM,CAACG,KAFP,CAAJ;AAIA,OALM,MAKA;AACN,eAAOO,KAAP;AACA;;AAED,aAAOhC,SAAS,CAAEqC,IAAF,EAAQzB,eAAR,CAAhB;AAhBF;;AAmBA,SAAOoB,KAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASS,QAAT,GAA2C;AAAA,MAAxBT,KAAwB,uEAAhB,KAAgB;AAAA,MAATV,MAAS;;AACjD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,cAAL;AACC,aAAO,IAAP;;AAED,SAAK,aAAL;AACC,aAAO,KAAP;AALF;;AAQA,SAAOQ,KAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASU,0BAAT,GAA6D;AAAA,MAAxBV,KAAwB,uEAAhB,KAAgB;AAAA,MAATV,MAAS;;AACnE,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,sBAAL;AACC,aAAO,IAAP;;AAED,SAAK,qBAAL;AACC,aAAO,KAAP;AALF;;AAQA,SAAOQ,KAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASW,cAAT,GAMK;AAAA,MANoBX,KAMpB,uEAN4B;AACvCY,IAAAA,KAAK,EAAE,IADgC;AAEvCC,IAAAA,GAAG,EAAE,IAFkC;AAGvCC,IAAAA,gBAAgB,EAAE,KAHqB;AAIvCC,IAAAA,SAAS,EAAE,IAJ4B;AAKvCC,IAAAA,eAAe,EAAE;AALsB,GAM5B;AAAA,MAAT1B,MAAS;;AACX,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,sBAAL;AACC,UAAKQ,KAAK,CAACY,KAAN,KAAgB,IAAhB,IAAwBZ,KAAK,CAACa,GAAN,KAAc,IAAtC,IAA8C,CAAEb,KAAK,CAACc,gBAA3D,EAA8E;AAC7E,eAAOd,KAAP;AACA;;AAED,+BACIA,KADJ;AAECY,QAAAA,KAAK,EAAE,IAFR;AAGCC,QAAAA,GAAG,EAAE,IAHN;AAICC,QAAAA,gBAAgB,EAAE,KAJnB;AAKCE,QAAAA,eAAe,EAAE;AALlB;;AAOD,SAAK,oBAAL;AACC,UAAKhB,KAAK,CAACc,gBAAX,EAA8B;AAC7B,eAAOd,KAAP;AACA;;AAED,+BACIA,KADJ;AAECc,QAAAA,gBAAgB,EAAE,IAFnB;AAGCE,QAAAA,eAAe,EAAE;AAHlB;;AAKD,SAAK,mBAAL;AACC,UAAK,CAAEhB,KAAK,CAACc,gBAAb,EAAgC;AAC/B,eAAOd,KAAP;AACA;;AAED,+BACIA,KADJ;AAECc,QAAAA,gBAAgB,EAAE,KAFnB;AAGCE,QAAAA,eAAe,EAAE;AAHlB;;AAKD,SAAK,cAAL;AACC,+BACIhB,KADJ;AAECY,QAAAA,KAAK,EAAEtB,MAAM,CAACsB,KAFf;AAGCC,QAAAA,GAAG,EAAEvB,MAAM,CAACuB,GAHb;AAICG,QAAAA,eAAe,EAAE;AAJlB;;AAMD,SAAK,cAAL;AACC,UAAK1B,MAAM,CAAC2B,QAAP,KAAoBjB,KAAK,CAACY,KAA1B,IAAmCtB,MAAM,CAAC2B,QAAP,KAAoBjB,KAAK,CAACa,GAAlE,EAAwE;AACvE,eAAOb,KAAP;AACA;;AACD,+BACIA,KADJ;AAECY,QAAAA,KAAK,EAAEtB,MAAM,CAAC2B,QAFf;AAGCJ,QAAAA,GAAG,EAAEvB,MAAM,CAAC2B,QAHb;AAICD,QAAAA,eAAe,EAAE1B,MAAM,CAAC0B;AAJzB;;AAMD,SAAK,eAAL;AAAsB;AACrB,YAAK1B,MAAM,CAAC4B,eAAZ,EAA8B;AAC7B,mCACIlB,KADJ;AAECY,YAAAA,KAAK,EAAEtB,MAAM,CAACS,MAAP,CAAe,CAAf,EAAmBkB,QAF3B;AAGCJ,YAAAA,GAAG,EAAEvB,MAAM,CAACS,MAAP,CAAe,CAAf,EAAmBkB,QAHzB;AAICD,YAAAA,eAAe,EAAE,IAJlB;AAKCF,YAAAA,gBAAgB,EAAE;AALnB;AAOA;;AACD,eAAOd,KAAP;AACA;;AACD,SAAK,eAAL;AACC,UAAK,CAAEV,MAAM,CAAC6B,SAAT,IAAsB,CAAE7B,MAAM,CAAC6B,SAAP,CAAiBC,MAAzC,IAAmD9B,MAAM,CAAC6B,SAAP,CAAiBE,OAAjB,CAA0BrB,KAAK,CAACY,KAAhC,MAA4C,CAAC,CAArG,EAAyG;AACxG,eAAOZ,KAAP;AACA;;AACD,+BACIA,KADJ;AAECY,QAAAA,KAAK,EAAE,IAFR;AAGCC,QAAAA,GAAG,EAAE,IAHN;AAICG,QAAAA,eAAe,EAAE,IAJlB;AAKCF,QAAAA,gBAAgB,EAAE;AALnB;;AAOD,SAAK,gBAAL;AACC,UAAKxB,MAAM,CAAC6B,SAAP,CAAiBE,OAAjB,CAA0BrB,KAAK,CAACY,KAAhC,MAA4C,CAAC,CAAlD,EAAsD;AACrD,eAAOZ,KAAP;AACA,OAHF,CAKC;AACA;;;AACA,UAAMsB,SAAS,GAAGnD,IAAI,CAAEmB,MAAM,CAACS,MAAT,CAAtB;AACA,UAAMwB,yBAAyB,GAAGD,SAAS,GAAGA,SAAS,CAACL,QAAb,GAAwB,IAAnE;;AAEA,UAAKM,yBAAyB,KAAKvB,KAAK,CAACY,KAApC,IAA6CW,yBAAyB,KAAKvB,KAAK,CAACa,GAAtF,EAA4F;AAC3F,eAAOb,KAAP;AACA;;AAED,+BACIA,KADJ;AAECY,QAAAA,KAAK,EAAEW,yBAFR;AAGCV,QAAAA,GAAG,EAAEU,yBAHN;AAICP,QAAAA,eAAe,EAAE,IAJlB;AAKCF,QAAAA,gBAAgB,EAAE;AALnB;;AAOD,SAAK,kBAAL;AACC,+BACId,KADJ;AAECe,QAAAA,SAAS,EAAEzB,MAAM,CAACkC;AAFnB;AA/FF;;AAqGA,SAAOxB,KAAP;AACA;AAED,OAAO,SAASyB,UAAT,GAA0C;AAAA,MAArBzB,KAAqB,uEAAb,EAAa;AAAA,MAATV,MAAS;;AAChD,MAAKA,MAAM,CAACE,IAAP,KAAgB,mBAArB,EAA2C;AAAA,QAClCyB,QADkC,GACrB3B,MADqB,CAClC2B,QADkC;AAE1C,6BACIjB,KADJ,sBAEGiB,QAFH,EAEejB,KAAK,CAAEiB,QAAF,CAAL,IAAqBjB,KAAK,CAAEiB,QAAF,CAAL,KAAsB,MAA3C,GAAoD,QAApD,GAA+D,MAF9E;AAIA;;AAED,SAAOjB,KAAP;AACA;AAED;;;;;;;;;;;AAUA,OAAO,SAAS0B,cAAT,GAAgD;AAAA,MAAvB1B,KAAuB,uEAAf,IAAe;AAAA,MAATV,MAAS;;AACtD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,sBAAL;AAAA,UACSmC,YADT,GACiCrC,MADjC,CACSqC,YADT;AAAA,UACuBC,KADvB,GACiCtC,MADjC,CACuBsC,KADvB;AAEC,aAAO;AAAED,QAAAA,YAAY,EAAZA,YAAF;AAAgBC,QAAAA,KAAK,EAALA;AAAhB,OAAP;;AAED,SAAK,sBAAL;AACC,aAAO,IAAP;AANF;;AASA,SAAO5B,KAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAAS6B,QAAT,GAAuD;AAAA,MAApC7B,KAAoC,uEAA5B;AAAE8B,IAAAA,OAAO,EAAE;AAAX,GAA4B;AAAA,MAATxC,MAAS;;AAC7D,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,uBAAL;AACC,+BACIQ,KADJ;AAEC8B,QAAAA,OAAO,EAAExC,MAAM,CAACwC;AAFjB;AAFF;;AAQA,SAAO9B,KAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAAS+B,WAAT,GAA6D;AAAA,MAAvC/B,KAAuC,uEAA/B1B,oBAA+B;AAAA,MAATgB,MAAS;;AACnE,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,wBAAL;AACC,+BACIQ,KADJ;AAECgC,QAAAA,uBAAuB,EAAE;AAF1B;;AAKD,SAAK,yBAAL;AACC,+BACIhC,KADJ;AAECgC,QAAAA,uBAAuB,EAAE;AAF1B;AARF;;AAcA,SAAOhC,KAAP;AACA;AAED;;;;;;;;;;AASA,OAAO,SAASiC,MAAT,GAAsC;AAAA,MAArBjC,KAAqB,uEAAb,EAAa;AAAA,MAATV,MAAS;;AAC5C,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,2BAAL;AACC,aAAO;AACN0C,QAAAA,UAAU,EAAE,IADN;AAENC,QAAAA,UAAU,EAAE,KAFN;AAGNC,QAAAA,KAAK,EAAE,IAHD;AAINC,QAAAA,OAAO,EAAE/C,MAAM,CAAC+C,OAAP,IAAkB;AAJrB,OAAP;;AAOD,SAAK,6BAAL;AACC,aAAO;AACNH,QAAAA,UAAU,EAAE,KADN;AAENC,QAAAA,UAAU,EAAE,IAFN;AAGNC,QAAAA,KAAK,EAAE,IAHD;AAINC,QAAAA,OAAO,EAAE/C,MAAM,CAAC+C,OAAP,IAAkB;AAJrB,OAAP;;AAOD,SAAK,6BAAL;AACC,aAAO;AACNH,QAAAA,UAAU,EAAE,KADN;AAENC,QAAAA,UAAU,EAAE,KAFN;AAGNC,QAAAA,KAAK,EAAE9C,MAAM,CAAC8C,KAHR;AAINC,QAAAA,OAAO,EAAE/C,MAAM,CAAC+C,OAAP,IAAkB;AAJrB,OAAP;AAlBF;;AA0BA,SAAOrC,KAAP;AACA;AAED;;;;;;;;;;;AAWA;;;;;;;;;AAQA,OAAO,SAASsC,QAAT,GAAyD;AAAA,MAAtCtC,KAAsC,uEAA9B;AAAEuC,IAAAA,QAAQ,EAAE;AAAZ,GAA8B;AAAA,MAATjD,MAAS;;AAC/D,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,kBAAL;AACC,aAAOF,MAAM,CAACkD,IAAd;AAFF;;AAKA,SAAOxC,KAAP;AACA;AAED;;;;;;;;;;;AAUA,OAAO,SAASyC,cAAT,GAA8C;AAAA,MAArBzC,KAAqB,uEAAb,EAAa;AAAA,MAATV,MAAS;;AACpD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,kBAAL;AACC,+BAAYQ,KAAZ,sBAAqBV,MAAM,CAACoD,QAA5B,EAAwC,IAAxC;;AAED,SAAK,oBAAL;AACC,aAAO3E,IAAI,CAAEiC,KAAF,EAASV,MAAM,CAACoD,QAAhB,CAAX;AALF;;AAOA,SAAO1C,KAAP;AACA;AAED,OAAO,IAAM2C,cAAc,GAAGvE,eAAe,CAAE;AAC9CwE,EAAAA,IAD8C,kBACnB;AAAA,QAArB5C,KAAqB,uEAAb,EAAa;AAAA,QAATV,MAAS;;AAC1B,YAASA,MAAM,CAACE,IAAhB;AACC,WAAK,yBAAL;AAAgC;AAC/B,iBAAO1B,MAAM,CAAEwB,MAAM,CAACuD,OAAT,EAAkB,UAAEC,SAAF,EAAa7C,MAAb,EAAyB;AAAA,wCACjCA,MAAM,CAAC8C,aAD0B;AAAA,gBAC/CC,EAD+C,yBAC/CA,EAD+C;AAAA,gBAC3CC,KAD2C,yBAC3CA,KAD2C;AAAA,gBAE/ChC,QAF+C,GAElChB,MAAM,CAACiD,WAF2B,CAE/CjC,QAF+C;AAIvD,gBAAMpC,KAAK,GAAG;AAAEoC,cAAAA,QAAQ,EAARA,QAAF;AAAYgC,cAAAA,KAAK,EAALA;AAAZ,aAAd;;AAEA,gBAAK,CAAE/E,OAAO,CAAE4E,SAAS,CAAEE,EAAF,CAAX,EAAmBnE,KAAnB,CAAd,EAA2C;AAC1CiE,cAAAA,SAAS,GAAG/D,mBAAmB,CAAEiB,KAAF,EAAS8C,SAAT,CAA/B;AACAA,cAAAA,SAAS,CAAEE,EAAF,CAAT,GAAkBnE,KAAlB;AACA;;AAED,mBAAOiE,SAAP;AACA,WAZY,EAYV9C,KAZU,CAAb;AAaA;;AAED,WAAK,6BAAL;AAAoC;AAAA,cAC3BgD,EAD2B,GACb1D,MADa,CAC3B0D,EAD2B;AAAA,cACvBC,KADuB,GACb3D,MADa,CACvB2D,KADuB;;AAGnC,cAAK,CAAEjD,KAAK,CAAEgD,EAAF,CAAP,IAAiBhD,KAAK,CAAEgD,EAAF,CAAL,CAAYC,KAAZ,KAAsBA,KAA5C,EAAoD;AACnD,mBAAOjD,KAAP;AACA;;AAED,mCACIA,KADJ,sBAEGgD,EAFH,oBAGKhD,KAAK,CAAEgD,EAAF,CAHV;AAIEC,YAAAA,KAAK,EAALA;AAJF;AAOA;;AAED,WAAK,6BAAL;AAAoC;AAAA,cAC3BD,GAD2B,GACT1D,MADS,CAC3B0D,EAD2B;AAAA,cACvBG,SADuB,GACT7D,MADS,CACvB6D,SADuB,EAGnC;;AACA,cAAKH,GAAE,KAAKG,SAAZ,EAAwB;AACvB,mBAAOnD,KAAP;AACA;;AAED,cAAMnB,KAAK,GAAGmB,KAAK,CAAEgD,GAAF,CAAnB;AACA,mCACIjF,IAAI,CAAEiC,KAAF,EAASgD,GAAT,CADR,sBAEGG,SAFH,EAEgBtE,KAFhB;AAIA;;AAED,WAAK,uBAAL;AAA8B;AAAA,cACrBmE,IADqB,GACd1D,MADc,CACrB0D,EADqB;AAE7B,iBAAOjF,IAAI,CAAEiC,KAAF,EAASgD,IAAT,CAAX;AACA;AAnDF;;AAsDA,WAAOhD,KAAP;AACA,GAzD6C;AA2D9CoD,EAAAA,UA3D8C,wBA2Db;AAAA,QAArBpD,KAAqB,uEAAb,EAAa;AAAA,QAATV,MAAS;;AAChC,YAASA,MAAM,CAACE,IAAhB;AACC,WAAK,uBAAL;AAA8B;AAAA,cACrBwD,EADqB,GACd1D,MADc,CACrB0D,EADqB;;AAE7B,cAAK,CAAEA,EAAP,EAAY;AACX,mBAAOhD,KAAP;AACA;;AAED,mCACIA,KADJ,sBAEGgD,EAFH,EAES,IAFT;AAIA;;AAED,WAAK,+BAAL;AACA,WAAK,+BAAL;AAAsC;AAAA,cAC7BA,IAD6B,GACtB1D,MADsB,CAC7B0D,EAD6B;AAErC,iBAAOjF,IAAI,CAAEiC,KAAF,EAASgD,IAAT,CAAX;AACA;AAjBF;;AAoBA,WAAOhD,KAAP;AACA,GAjF6C;AAmF9CqD,EAAAA,QAnF8C,sBAmFf;AAAA,QAArBrD,KAAqB,uEAAb,EAAa;AAAA,QAATV,MAAS;;AAC9B,YAASA,MAAM,CAACE,IAAhB;AACC,WAAK,qBAAL;AACC,iCACIQ,KADJ,sBAEGV,MAAM,CAAC0D,EAFV,EAEgB,IAFhB;;AAKD,WAAK,6BAAL;AACA,WAAK,6BAAL;AAAoC;AAAA,cAC3BA,EAD2B,GACpB1D,MADoB,CAC3B0D,EAD2B;AAEnC,iBAAOjF,IAAI,CAAEiC,KAAF,EAASgD,EAAT,CAAX;AACA;AAXF;;AAcA,WAAOhD,KAAP;AACA;AAnG6C,CAAF,CAAtC;AAsGP;;;;;;;;;;AASA,OAAO,IAAMsD,iBAAiB,GAAG,SAApBA,iBAAoB,GAA0B;AAAA,MAAxBtD,KAAwB,uEAAhB,EAAgB;AAAA,MAAZV,MAAY;;AAC1D,UAASA,MAAM,CAACE,IAAhB;AACC;AACA;AACA,SAAK,gBAAL;AACA,SAAK,eAAL;AAAsB;AACrB,eAAOzB,IAAI,CAAEiC,KAAF,EAASV,MAAM,CAAC6B,SAAhB,CAAX;AACA;;AACD,SAAK,4BAAL;AAAmC;AAAA,YAC1BF,QAD0B,GACb3B,MADa,CAC1B2B,QAD0B;;AAElC,YAAK,CAAE3B,MAAM,CAACiE,QAAd,EAAyB;AACxB,cAAKvD,KAAK,CAACO,cAAN,CAAsBU,QAAtB,CAAL,EAAwC;AACvC,mBAAOlD,IAAI,CAAEiC,KAAF,EAASiB,QAAT,CAAX;AACA;;AAED,iBAAOjB,KAAP;AACA;;AAED,YAAK9B,OAAO,CAAE8B,KAAK,CAAEiB,QAAF,CAAP,EAAqB3B,MAAM,CAACiE,QAA5B,CAAZ,EAAqD;AACpD,iBAAOvD,KAAP;AACA;;AAED,iCACIA,KADJ,sBAEGiB,QAFH,EAEe3B,MAAM,CAACiE,QAFtB;AAIA;AAzBF;;AA2BA,SAAOvD,KAAP;AACA,CA7BM;AA+BP;;;;;;;;;AAQA,OAAO,SAASwD,QAAT,GAA0C;AAAA,MAAvBxD,KAAuB,uEAAf,IAAe;AAAA,MAATV,MAAS;;AAChD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,gBAAL;AAAA,UACSa,IADT,GACkBf,MADlB,CACSe,IADT;;AAAA,iBAEqC,CACnC,OADmC,EAEnC,SAFmC,EAGnC,SAHmC,EAIlCoD,GAJkC,CAI7B,UAAEC,KAAF;AAAA,eAAa9E,eAAe,CAAEyB,IAAI,CAAEqD,KAAF,CAAN,CAA5B;AAAA,OAJ6B,CAFrC;AAAA;AAAA,UAEST,KAFT;AAAA,UAEgBU,OAFhB;AAAA,UAEyBC,OAFzB;;AAQC,aAAO;AACNX,QAAAA,KAAK,EAALA,KADM;AAENU,QAAAA,OAAO,EAAPA,OAFM;AAGNC,QAAAA,OAAO,EAAPA;AAHM,OAAP;AATF;;AAgBA,SAAO5D,KAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAAS6D,WAAT,GAA6C;AAAA,MAAvB7D,KAAuB,uEAAf,IAAe;AAAA,MAATV,MAAS;;AACnD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,6BAAL;AACC,UAAKF,MAAM,CAACe,IAAP,CAAYyD,YAAjB,EAAgC;AAC/B,eAAOxE,MAAM,CAACe,IAAP,CAAYyD,YAAnB;AACA,OAFD,MAEO,IAAKxE,MAAM,CAACe,IAAP,CAAY0D,IAAjB,EAAwB;AAC9B,eAAO1F,YAAY,CAAEiB,MAAM,CAACe,IAAP,CAAY0D,IAAd,EAAoB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAApB,CAAnB;AACA;;AAED,aAAOhE,KAAP;;AAED,SAAK,2BAAL;AACC;AACA,UAAKA,KAAK,IAAIV,MAAM,CAAC+C,OAAP,CAAe4B,SAA7B,EAAyC;AACxC,eAAO,IAAP;AACA;;AACD;AAfF;;AAkBA,SAAOjE,KAAP;AACA;AAED;;;;;;;;;;;AAUA,OAAO,SAASkE,OAAT,GAA0C;AAAA,MAAxBlE,KAAwB,uEAAhB,KAAgB;AAAA,MAATV,MAAS;;AAChD,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,oBAAL;AACC,aAAO,IAAP;AAFF;;AAKA,SAAOQ,KAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASmE,cAAT,GAAoE;AAAA,MAA3CnE,KAA2C,uEAAnCxB,wBAAmC;AAAA,MAATc,MAAS;;AAC1E,UAASA,MAAM,CAACE,IAAhB;AACC,SAAK,wBAAL;AACC,+BACIQ,KADJ,EAEIV,MAAM,CAACiE,QAFX;AAFF;;AAQA,SAAOvD,KAAP;AACA;AAED,eAAepC,QAAQ,CAAEQ,eAAe,CAAE;AACzCwB,EAAAA,MAAM,EAANA,MADyC;AAEzCU,EAAAA,YAAY,EAAZA,YAFyC;AAGzCE,EAAAA,WAAW,EAAXA,WAHyC;AAIzCuB,EAAAA,WAAW,EAAXA,WAJyC;AAKzCE,EAAAA,MAAM,EAANA,MALyC;AAMzCK,EAAAA,QAAQ,EAARA,QANyC;AAOzCK,EAAAA,cAAc,EAAdA,cAPyC;AAQzCd,EAAAA,QAAQ,EAARA,QARyC;AASzC2B,EAAAA,QAAQ,EAARA,QATyC;AAUzCK,EAAAA,WAAW,EAAXA,WAVyC;AAWzCpB,EAAAA,cAAc,EAAdA,cAXyC;AAYzCyB,EAAAA,OAAO,EAAPA,OAZyC;AAazCC,EAAAA,cAAc,EAAdA;AAbyC,CAAF,CAAjB,CAAvB","sourcesContent":["/**\n * External dependencies\n */\nimport optimist from 'redux-optimist';\nimport {\n\tflow,\n\treduce,\n\tomit,\n\tmapValues,\n\tkeys,\n\tisEqual,\n\tlast,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport {\n\tPREFERENCES_DEFAULTS,\n\tINITIAL_EDITS_DEFAULTS,\n\tEDITOR_SETTINGS_DEFAULTS,\n} from './defaults';\nimport { EDIT_MERGE_PROPERTIES } from './constants';\nimport withChangeDetection from '../utils/with-change-detection';\nimport withHistory from '../utils/with-history';\n\n/**\n * Returns a post attribute value, flattening nested rendered content using its\n * raw value in place of its original object form.\n *\n * @param {*} value Original value.\n *\n * @return {*} Raw value.\n */\nexport function getPostRawValue( value ) {\n\tif ( value && 'object' === typeof value && 'raw' in value ) {\n\t\treturn value.raw;\n\t}\n\n\treturn value;\n}\n\n/**\n * Returns an object against which it is safe to perform mutating operations,\n * given the original object and its current working copy.\n *\n * @param {Object} original Original object.\n * @param {Object} working  Working object.\n *\n * @return {Object} Mutation-safe object.\n */\nfunction getMutateSafeObject( original, working ) {\n\tif ( original === working ) {\n\t\treturn { ...original };\n\t}\n\n\treturn working;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( keys( a ), keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are editing the same post property, or\n * false otherwise.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same post property.\n */\nexport function isUpdatingSamePostProperty( action, previousAction ) {\n\treturn (\n\t\taction.type === 'EDIT_POST' &&\n\t\thasSameKeys( action.edits, previousAction.edits )\n\t);\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are modifying the same property such that\n * undo history should be batched.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether to overwrite present state.\n */\nexport function shouldOverwriteState( action, previousAction ) {\n\tif ( action.type === 'RESET_EDITOR_BLOCKS' ) {\n\t\treturn ! action.shouldCreateUndoLevel;\n\t}\n\n\tif ( ! previousAction || action.type !== previousAction.type ) {\n\t\treturn false;\n\t}\n\n\treturn isUpdatingSamePostProperty( action, previousAction );\n}\n\n/**\n * Undoable reducer returning the editor post state, including blocks parsed\n * from current HTML markup.\n *\n * Handles the following state keys:\n *  - edits: an object describing changes to be made to the current post, in\n *           the format accepted by the WP REST API\n *  - blocks: post content blocks\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @returns {Object} Updated state.\n */\nexport const editor = flow( [\n\tcombineReducers,\n\n\twithHistory( {\n\t\tresetTypes: [ 'SETUP_EDITOR_STATE' ],\n\t\tignoreTypes: [\n\t\t\t'RESET_POST',\n\t\t\t'UPDATE_POST',\n\t\t],\n\t\tshouldOverwriteState,\n\t} ),\n] )( {\n\t// Track whether changes exist, resetting at each post save. Relies on\n\t// editor initialization firing post reset as an effect.\n\tblocks: withChangeDetection( {\n\t\tresetTypes: [ 'SETUP_EDITOR_STATE', 'REQUEST_POST_UPDATE_START' ],\n\t} )( ( state = { value: [] }, action ) => {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_EDITOR_BLOCKS':\n\t\t\t\tif ( action.blocks === state.value ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\t\t\t\treturn { value: action.blocks };\n\t\t}\n\n\t\treturn state;\n\t} ),\n\tedits( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'EDIT_POST':\n\t\t\t\treturn reduce( action.edits, ( result, value, key ) => {\n\t\t\t\t\t// Only assign into result if not already same value\n\t\t\t\t\tif ( value !== state[ key ] ) {\n\t\t\t\t\t\tresult = getMutateSafeObject( state, result );\n\n\t\t\t\t\t\tif ( EDIT_MERGE_PROPERTIES.has( key ) ) {\n\t\t\t\t\t\t\t// Merge properties should assign to current value.\n\t\t\t\t\t\t\tresult[ key ] = { ...result[ key ], ...value };\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Otherwise override.\n\t\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t}, state );\n\t\t\tcase 'UPDATE_POST':\n\t\t\tcase 'RESET_POST':\n\t\t\t\tconst getCanonicalValue = action.type === 'UPDATE_POST' ?\n\t\t\t\t\t( key ) => action.edits[ key ] :\n\t\t\t\t\t( key ) => getPostRawValue( action.post[ key ] );\n\n\t\t\t\treturn reduce( state, ( result, value, key ) => {\n\t\t\t\t\tif ( ! isEqual( value, getCanonicalValue( key ) ) ) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\tresult = getMutateSafeObject( state, result );\n\t\t\t\t\tdelete result[ key ];\n\t\t\t\t\treturn result;\n\t\t\t\t}, state );\n\t\t\tcase 'RESET_EDITOR_BLOCKS':\n\t\t\t\tif ( 'content' in state ) {\n\t\t\t\t\treturn omit( state, 'content' );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t}\n\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning the initial edits state. With matching shape to that of\n * `editor.edits`, the initial edits are those applied programmatically, are\n * not considered in prompting the user for unsaved changes, and are included\n * in (and reset by) the next save payload.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Action object.\n *\n * @return {Object} Next state.\n */\nexport function initialEdits( state = INITIAL_EDITS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SETUP_EDITOR':\n\t\t\tif ( ! action.edits ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn action.edits;\n\n\t\tcase 'SETUP_EDITOR_STATE':\n\t\t\tif ( 'content' in state ) {\n\t\t\t\treturn omit( state, 'content' );\n\t\t\t}\n\n\t\t\treturn state;\n\n\t\tcase 'UPDATE_POST':\n\t\t\treturn reduce( action.edits, ( result, value, key ) => {\n\t\t\t\tif ( ! result.hasOwnProperty( key ) ) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tresult = getMutateSafeObject( state, result );\n\t\t\t\tdelete result[ key ];\n\t\t\t\treturn result;\n\t\t\t}, state );\n\n\t\tcase 'RESET_POST':\n\t\t\treturn INITIAL_EDITS_DEFAULTS;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the last-known state of the current post, in the format\n * returned by the WP REST API.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function currentPost( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SETUP_EDITOR_STATE':\n\t\tcase 'RESET_POST':\n\t\tcase 'UPDATE_POST':\n\t\t\tlet post;\n\t\t\tif ( action.post ) {\n\t\t\t\tpost = action.post;\n\t\t\t} else if ( action.edits ) {\n\t\t\t\tpost = {\n\t\t\t\t\t...state,\n\t\t\t\t\t...action.edits,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn mapValues( post, getPostRawValue );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the caret is within formatted text.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isCaretWithinFormattedText( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENTER_FORMATTED_TEXT':\n\t\t\treturn true;\n\n\t\tcase 'EXIT_FORMATTED_TEXT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block selection's state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function blockSelection( state = {\n\tstart: null,\n\tend: null,\n\tisMultiSelecting: false,\n\tisEnabled: true,\n\tinitialPosition: null,\n}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK':\n\t\t\tif ( state.start === null && state.end === null && ! state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: null,\n\t\t\t\tend: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'START_MULTI_SELECT':\n\t\t\tif ( state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: true,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\tif ( ! state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.start,\n\t\t\t\tend: action.end,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.start && action.clientId === state.end ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.clientId,\n\t\t\t\tend: action.clientId,\n\t\t\t\tinitialPosition: action.initialPosition,\n\t\t\t};\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( action.updateSelection ) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tstart: action.blocks[ 0 ].clientId,\n\t\t\t\t\tend: action.blocks[ 0 ].clientId,\n\t\t\t\t\tinitialPosition: null,\n\t\t\t\t\tisMultiSelecting: false,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn state;\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif ( ! action.clientIds || ! action.clientIds.length || action.clientIds.indexOf( state.start ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: null,\n\t\t\t\tend: null,\n\t\t\t\tinitialPosition: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t};\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\tif ( action.clientIds.indexOf( state.start ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// If there are replacement blocks, assign last block as the next\n\t\t\t// selected block, otherwise set to null.\n\t\t\tconst lastBlock = last( action.blocks );\n\t\t\tconst nextSelectedBlockClientId = lastBlock ? lastBlock.clientId : null;\n\n\t\t\tif ( nextSelectedBlockClientId === state.start && nextSelectedBlockClientId === state.end ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: nextSelectedBlockClientId,\n\t\t\t\tend: nextSelectedBlockClientId,\n\t\t\t\tinitialPosition: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t};\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisEnabled: action.isSelectionEnabled,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]: state[ clientId ] && state[ clientId ] === 'html' ? 'visual' : 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT':\n\t\t\tconst { rootClientId, index } = action;\n\t\t\treturn { rootClientId, index };\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object}  state                 Current state.\n * @param {Object}  action                Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENABLE_PUBLISH_SIDEBAR':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisPublishSidebarEnabled: true,\n\t\t\t};\n\n\t\tcase 'DISABLE_PUBLISH_SIDEBAR':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisPublishSidebarEnabled: false,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning current network request state (whether a request to\n * the WP REST API is in progress, successful, or failed).\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function saving( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'REQUEST_POST_UPDATE_START':\n\t\t\treturn {\n\t\t\t\trequesting: true,\n\t\t\t\tsuccessful: false,\n\t\t\t\terror: null,\n\t\t\t\toptions: action.options || {},\n\t\t\t};\n\n\t\tcase 'REQUEST_POST_UPDATE_SUCCESS':\n\t\t\treturn {\n\t\t\t\trequesting: false,\n\t\t\t\tsuccessful: true,\n\t\t\t\terror: null,\n\t\t\t\toptions: action.options || {},\n\t\t\t};\n\n\t\tcase 'REQUEST_POST_UPDATE_FAILURE':\n\t\t\treturn {\n\t\t\t\trequesting: false,\n\t\t\t\tsuccessful: false,\n\t\t\t\terror: action.error,\n\t\t\t\toptions: action.options || {},\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Post Lock State.\n *\n * @typedef {Object} PostLockState\n *\n * @property {boolean} isLocked       Whether the post is locked.\n * @property {?boolean} isTakeover     Whether the post editing has been taken over.\n * @property {?boolean} activePostLock Active post lock value.\n * @property {?Object}  user           User that took over the post.\n */\n\n/**\n * Reducer returning the post lock status.\n *\n * @param {PostLockState} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {PostLockState} Updated state.\n */\nexport function postLock( state = { isLocked: false }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_POST_LOCK':\n\t\t\treturn action.lock;\n\t}\n\n\treturn state;\n}\n\n/**\n * Post saving lock.\n *\n * When post saving is locked, the post cannot be published or updated.\n *\n * @param {PostSavingLockState} state  Current state.\n * @param {Object}              action Dispatched action.\n *\n * @return {PostLockState} Updated state.\n */\nexport function postSavingLock( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'LOCK_POST_SAVING':\n\t\t\treturn { ...state, [ action.lockName ]: true };\n\n\t\tcase 'UNLOCK_POST_SAVING':\n\t\t\treturn omit( state, action.lockName );\n\t}\n\treturn state;\n}\n\nexport const reusableBlocks = combineReducers( {\n\tdata( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_REUSABLE_BLOCKS': {\n\t\t\t\treturn reduce( action.results, ( nextState, result ) => {\n\t\t\t\t\tconst { id, title } = result.reusableBlock;\n\t\t\t\t\tconst { clientId } = result.parsedBlock;\n\n\t\t\t\t\tconst value = { clientId, title };\n\n\t\t\t\t\tif ( ! isEqual( nextState[ id ], value ) ) {\n\t\t\t\t\t\tnextState = getMutateSafeObject( state, nextState );\n\t\t\t\t\t\tnextState[ id ] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextState;\n\t\t\t\t}, state );\n\t\t\t}\n\n\t\t\tcase 'UPDATE_REUSABLE_BLOCK_TITLE': {\n\t\t\t\tconst { id, title } = action;\n\n\t\t\t\tif ( ! state[ id ] || state[ id ].title === title ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t...state[ id ],\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\tconst { id, updatedId } = action;\n\n\t\t\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\t\t\tif ( id === updatedId ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst value = state[ id ];\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, id ),\n\t\t\t\t\t[ updatedId ]: value,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REMOVE_REUSABLE_BLOCK': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tisFetching( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS': {\n\t\t\t\tconst { id } = action;\n\t\t\t\tif ( ! id ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ id ]: true,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS_SUCCESS':\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS_FAILURE': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tisSaving( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'SAVE_REUSABLE_BLOCK':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.id ]: true,\n\t\t\t\t};\n\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS':\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_FAILURE': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS' :\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\treturn omit( state, clientId );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( isEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning the most recent autosave.\n *\n * @param  {Object} state  The autosave object.\n * @param  {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function autosave( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RESET_AUTOSAVE':\n\t\t\tconst { post } = action;\n\t\t\tconst [ title, excerpt, content ] = [\n\t\t\t\t'title',\n\t\t\t\t'excerpt',\n\t\t\t\t'content',\n\t\t\t].map( ( field ) => getPostRawValue( post[ field ] ) );\n\n\t\t\treturn {\n\t\t\t\ttitle,\n\t\t\t\texcerpt,\n\t\t\t\tcontent,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the post preview link.\n *\n * @param {string?} state  The preview link\n * @param {Object}  action Dispatched action.\n *\n * @return {string?} Updated state.\n */\nexport function previewLink( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'REQUEST_POST_UPDATE_SUCCESS':\n\t\t\tif ( action.post.preview_link ) {\n\t\t\t\treturn action.post.preview_link;\n\t\t\t} else if ( action.post.link ) {\n\t\t\t\treturn addQueryArgs( action.post.link, { preview: true } );\n\t\t\t}\n\n\t\t\treturn state;\n\n\t\tcase 'REQUEST_POST_UPDATE_START':\n\t\t\t// Invalidate known preview link when autosave starts.\n\t\t\tif ( state && action.options.isPreview ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the editor is ready to be rendered.\n * The editor is considered ready to be rendered once\n * the post object is loaded properly and the initial blocks parsed.\n *\n * @param {boolean} state\n * @param {Object} action\n *\n * @return {boolean} Updated state.\n */\nexport function isReady( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SETUP_EDITOR_STATE':\n\t\t\treturn true;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the post editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function editorSettings( state = EDITOR_SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_EDITOR_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport default optimist( combineReducers( {\n\teditor,\n\tinitialEdits,\n\tcurrentPost,\n\tpreferences,\n\tsaving,\n\tpostLock,\n\treusableBlocks,\n\ttemplate,\n\tautosave,\n\tpreviewLink,\n\tpostSavingLock,\n\tisReady,\n\teditorSettings,\n} ) );\n"]}