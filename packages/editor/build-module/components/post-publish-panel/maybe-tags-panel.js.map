{"version":3,"sources":["@wordpress/editor/src/components/post-publish-panel/maybe-tags-panel.js"],"names":["some","__","Component","compose","ifCondition","withSelect","PanelBody","FlatTermSelector","TagsPanel","panelBodyTitle","MaybeTagsPanel","props","state","hadTagsWhenOpeningThePanel","hasTags","select","postType","getCurrentPostType","tagsTaxonomy","getTaxonomy","tags","getEditedPostAttribute","rest_base","areTagsFetched","undefined","isPostTypeSupported","types","type","length"],"mappings":";;;;;;;AAAA;;;AAGA,SAASA,IAAT,QAAqB,QAArB;AAEA;;;;AAGA,SAASC,EAAT,QAAmB,iBAAnB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,oBAArC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA;;;;AAGA,OAAOC,gBAAP,MAA6B,uCAA7B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACvB,MAAMC,cAAc,GAAG,CACtBR,EAAE,CAAE,aAAF,CADoB,EAGrB;AAAM,IAAA,SAAS,EAAC,iCAAhB;AAAkD,IAAA,GAAG,EAAC;AAAtD,KACGA,EAAE,CAAE,UAAF,CADL,CAHqB,CAAvB;AASA,SACC,cAAC,SAAD;AAAW,IAAA,WAAW,EAAG,KAAzB;AAAiC,IAAA,KAAK,EAAGQ;AAAzC,KACC,yBACGR,EAAE,CAAE,wHAAF,CADL,CADD,EAIC,cAAC,gBAAD;AAAkB,IAAA,IAAI,EAAG;AAAzB,IAJD,CADD;AAQA,CAlBD;;IAoBMS,c;;;;;AACL,0BAAaC,KAAb,EAAqB;AAAA;;AAAA;;AACpB,wFAAOA,KAAP;AACA,UAAKC,KAAL,GAAa;AACZC,MAAAA,0BAA0B,EAAEF,KAAK,CAACG;AADtB,KAAb;AAFoB;AAKpB;AAED;;;;;;;;;;;;;;6BAUS;AACR,UAAK,CAAE,KAAKF,KAAL,CAAWC,0BAAlB,EAA+C;AAC9C,eAAO,cAAC,SAAD,OAAP;AACA;;AAED,aAAO,IAAP;AACA;;;;EAxB2BX,S;;AA2B7B,eAAeC,OAAO,CACrBE,UAAU,CAAE,UAAEU,MAAF,EAAc;AACzB,MAAMC,QAAQ,GAAGD,MAAM,CAAE,aAAF,CAAN,CAAwBE,kBAAxB,EAAjB;AACA,MAAMC,YAAY,GAAGH,MAAM,CAAE,MAAF,CAAN,CAAiBI,WAAjB,CAA8B,UAA9B,CAArB;AACA,MAAMC,IAAI,GAAGF,YAAY,IAAIH,MAAM,CAAE,aAAF,CAAN,CAAwBM,sBAAxB,CAAgDH,YAAY,CAACI,SAA7D,CAA7B;AACA,SAAO;AACNC,IAAAA,cAAc,EAAEL,YAAY,KAAKM,SAD3B;AAENC,IAAAA,mBAAmB,EAAEP,YAAY,IAAIlB,IAAI,CAAEkB,YAAY,CAACQ,KAAf,EAAsB,UAAEC,IAAF;AAAA,aAAYA,IAAI,KAAKX,QAArB;AAAA,KAAtB,CAFnC;AAGNF,IAAAA,OAAO,EAAEM,IAAI,IAAIA,IAAI,CAACQ;AAHhB,GAAP;AAKA,CATS,CADW,EAWrBxB,WAAW,CAAE;AAAA,MAAImB,cAAJ,QAAIA,cAAJ;AAAA,MAAoBE,mBAApB,QAAoBA,mBAApB;AAAA,SAA+CA,mBAAmB,IAAIF,cAAtE;AAAA,CAAF,CAXU,CAAP,CAYZb,cAZY,CAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { some } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { Component } from '@wordpress/element';\nimport { compose, ifCondition } from '@wordpress/compose';\nimport { withSelect } from '@wordpress/data';\nimport { PanelBody } from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport FlatTermSelector from '../post-taxonomies/flat-term-selector';\n\nconst TagsPanel = () => {\n\tconst panelBodyTitle = [\n\t\t__( 'Suggestion:' ),\n\t\t(\n\t\t\t<span className=\"editor-post-publish-panel__link\" key=\"label\">\n\t\t\t\t{ __( 'Add tags' ) }\n\t\t\t</span>\n\t\t),\n\t];\n\n\treturn (\n\t\t<PanelBody initialOpen={ false } title={ panelBodyTitle }>\n\t\t\t<p>\n\t\t\t\t{ __( 'Tags help users and search engines navigate your site and find your content. Add a few keywords to describe your post.' ) }\n\t\t\t</p>\n\t\t\t<FlatTermSelector slug={ 'post_tag' } />\n\t\t</PanelBody>\n\t);\n};\n\nclass MaybeTagsPanel extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\thadTagsWhenOpeningThePanel: props.hasTags,\n\t\t};\n\t}\n\n\t/*\n\t * We only want to show the tag panel if the post didn't have\n\t * any tags when the user hit the Publish button.\n\t *\n\t * We can't use the prop.hasTags because it'll change to true\n\t * if the user adds a new tag within the pre-publish panel.\n\t * This would force a re-render and a new prop.hasTags check,\n\t * hiding this panel and keeping the user from adding\n\t * more than one tag.\n\t */\n\trender() {\n\t\tif ( ! this.state.hadTagsWhenOpeningThePanel ) {\n\t\t\treturn <TagsPanel />;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\nexport default compose(\n\twithSelect( ( select ) => {\n\t\tconst postType = select( 'core/editor' ).getCurrentPostType();\n\t\tconst tagsTaxonomy = select( 'core' ).getTaxonomy( 'post_tag' );\n\t\tconst tags = tagsTaxonomy && select( 'core/editor' ).getEditedPostAttribute( tagsTaxonomy.rest_base );\n\t\treturn {\n\t\t\tareTagsFetched: tagsTaxonomy !== undefined,\n\t\t\tisPostTypeSupported: tagsTaxonomy && some( tagsTaxonomy.types, ( type ) => type === postType ),\n\t\t\thasTags: tags && tags.length,\n\t\t};\n\t} ),\n\tifCondition( ( { areTagsFetched, isPostTypeSupported } ) => isPostTypeSupported && areTagsFetched ),\n)( MaybeTagsPanel );\n"]}