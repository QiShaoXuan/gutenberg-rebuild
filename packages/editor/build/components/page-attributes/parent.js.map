{"version":3,"sources":["@wordpress/editor/src/components/page-attributes/parent.js"],"names":["PageAttributesParent","parent","postType","items","onUpdateParent","isHierarchical","parentPageLabel","pageItems","length","pagesTree","map","item","id","name","title","raw","applyWithSelect","select","getPostType","getEntityRecords","getCurrentPostId","getEditedPostAttribute","postTypeSlug","postId","query","per_page","exclude","parent_exclude","orderby","order","applyWithDispatch","dispatch","editPost"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { get } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { TreeSelect } from '@wordpress/components';\nimport { compose } from '@wordpress/compose';\nimport { withSelect, withDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { buildTermsTree } from '../../utils/terms';\n\nexport function PageAttributesParent( { parent, postType, items, onUpdateParent } ) {\n\tconst isHierarchical = get( postType, [ 'hierarchical' ], false );\n\tconst parentPageLabel = get( postType, [ 'labels', 'parent_item_colon' ] );\n\tconst pageItems = items || [];\n\tif ( ! isHierarchical || ! parentPageLabel || ! pageItems.length ) {\n\t\treturn null;\n\t}\n\n\tconst pagesTree = buildTermsTree( pageItems.map( ( item ) => ( {\n\t\tid: item.id,\n\t\tparent: item.parent,\n\t\tname: item.title.raw ? item.title.raw : `#${ item.id } (${ __( 'no title' ) })`,\n\t} ) ) );\n\treturn (\n\t\t<TreeSelect\n\t\t\tclassName=\"editor-page-attributes__parent\"\n\t\t\tlabel={ parentPageLabel }\n\t\t\tnoOptionLabel={ `(${ __( 'no parent' ) })` }\n\t\t\ttree={ pagesTree }\n\t\t\tselectedId={ parent }\n\t\t\tonChange={ onUpdateParent }\n\t\t/>\n\t);\n}\n\nconst applyWithSelect = withSelect( ( select ) => {\n\tconst { getPostType, getEntityRecords } = select( 'core' );\n\tconst { getCurrentPostId, getEditedPostAttribute } = select( 'core/editor' );\n\tconst postTypeSlug = getEditedPostAttribute( 'type' );\n\tconst postType = getPostType( postTypeSlug );\n\tconst postId = getCurrentPostId();\n\tconst isHierarchical = get( postType, [ 'hierarchical' ], false );\n\tconst query = {\n\t\tper_page: -1,\n\t\texclude: postId,\n\t\tparent_exclude: postId,\n\t\torderby: 'menu_order',\n\t\torder: 'asc',\n\t};\n\n\treturn {\n\t\tparent: getEditedPostAttribute( 'parent' ),\n\t\titems: isHierarchical ? getEntityRecords( 'postType', postTypeSlug, query ) : [],\n\t\tpostType,\n\t};\n} );\n\nconst applyWithDispatch = withDispatch( ( dispatch ) => {\n\tconst { editPost } = dispatch( 'core/editor' );\n\treturn {\n\t\tonUpdateParent( parent ) {\n\t\t\teditPost( { parent: parent || 0 } );\n\t\t},\n\t};\n} );\n\nexport default compose( [\n\tapplyWithSelect,\n\tapplyWithDispatch,\n] )( PageAttributesParent );\n"]}