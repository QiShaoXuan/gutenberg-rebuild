{"version":3,"sources":["@wordpress/editor/src/components/reusable-blocks-buttons/reusable-block-convert-button.js"],"names":["ReusableBlockConvertButton","isVisible","isReusable","onConvertToStatic","onConvertToReusable","select","clientIds","getBlocksByClientId","canInsertBlockType","getReusableBlock","__experimentalGetReusableBlock","canUser","blocks","length","attributes","ref","block","isValid","name","dispatch","onToggle","noop","convertBlockToReusable","__experimentalConvertBlockToReusable","convertBlockToStatic","__experimentalConvertBlockToStatic"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { noop, every } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Fragment } from '@wordpress/element';\nimport { MenuItem } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\n\nexport function ReusableBlockConvertButton( {\n\tisVisible,\n\tisReusable,\n\tonConvertToStatic,\n\tonConvertToReusable,\n} ) {\n\tif ( ! isVisible ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t{ ! isReusable && (\n\t\t\t\t<MenuItem\n\t\t\t\t\tclassName=\"editor-block-settings-menu__control block-editor-block-settings-menu__control\"\n\t\t\t\t\ticon=\"controls-repeat\"\n\t\t\t\t\tonClick={ onConvertToReusable }\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Add to Reusable Blocks' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t\t{ isReusable && (\n\t\t\t\t<MenuItem\n\t\t\t\t\tclassName=\"editor-block-settings-menu__control block-editor-block-settings-menu__control\"\n\t\t\t\t\ticon=\"controls-repeat\"\n\t\t\t\t\tonClick={ onConvertToStatic }\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Convert to Regular Block' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</Fragment>\n\t);\n}\n\nexport default compose( [\n\twithSelect( ( select, { clientIds } ) => {\n\t\tconst {\n\t\t\tgetBlocksByClientId,\n\t\t\tcanInsertBlockType,\n\t\t} = select( 'core/block-editor' );\n\t\tconst {\n\t\t\t__experimentalGetReusableBlock: getReusableBlock,\n\t\t} = select( 'core/editor' );\n\t\tconst { canUser } = select( 'core' );\n\n\t\tconst blocks = getBlocksByClientId( clientIds );\n\n\t\tconst isReusable = (\n\t\t\tblocks.length === 1 &&\n\t\t\tblocks[ 0 ] &&\n\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t!! getReusableBlock( blocks[ 0 ].attributes.ref )\n\t\t);\n\n\t\t// Show 'Convert to Regular Block' when selected block is a reusable block\n\t\tconst isVisible = isReusable || (\n\t\t\t// Hide 'Add to Reusable Blocks' when reusable blocks are disabled\n\t\t\tcanInsertBlockType( 'core/block' ) &&\n\n\t\t\tevery( blocks, ( block ) => (\n\t\t\t\t// Guard against the case where a regular block has *just* been converted\n\t\t\t\t!! block &&\n\n\t\t\t\t// Hide 'Add to Reusable Blocks' on invalid blocks\n\t\t\t\tblock.isValid &&\n\n\t\t\t\t// Hide 'Add to Reusable Blocks' when block doesn't support being made reusable\n\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t) ) &&\n\n\t\t\t// Hide 'Add to Reusable Blocks' when current doesn't have permission to do that\n\t\t\t!! canUser( 'create', 'blocks' )\n\t\t);\n\n\t\treturn {\n\t\t\tisReusable,\n\t\t\tisVisible,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, { clientIds, onToggle = noop } ) => {\n\t\tconst {\n\t\t\t__experimentalConvertBlockToReusable: convertBlockToReusable,\n\t\t\t__experimentalConvertBlockToStatic: convertBlockToStatic,\n\t\t} = dispatch( 'core/editor' );\n\n\t\treturn {\n\t\t\tonConvertToStatic() {\n\t\t\t\tif ( clientIds.length !== 1 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconvertBlockToStatic( clientIds[ 0 ] );\n\t\t\t\tonToggle();\n\t\t\t},\n\t\t\tonConvertToReusable() {\n\t\t\t\tconvertBlockToReusable( clientIds );\n\t\t\t\tonToggle();\n\t\t\t},\n\t\t};\n\t} ),\n] )( ReusableBlockConvertButton );\n"]}