{"version":3,"sources":["@wordpress/editor/src/store/utils/notice-builder.js"],"names":["getNotificationArgumentsForSaveSuccess","data","previousPost","post","postType","options","publishStatus","isPublished","status","willPublish","noticeMessage","shouldShowLink","labels","item_reverted_to_draft","publish","item_published","private","item_published_privately","future","item_scheduled","item_updated","actions","push","label","view_item","url","link","id","SAVE_POST_NOTICE_ID","getNotificationArgumentsForSaveFail","edits","error","code","indexOf","messages","getNotificationArgumentsForTrashFail","message","TRASH_POST_NOTICE_ID"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { SAVE_POST_NOTICE_ID, TRASH_POST_NOTICE_ID } from '../constants';\n\n/**\n * External dependencies\n */\nimport { get, includes } from 'lodash';\n\n/**\n * Builds the arguments for a success notification dispatch.\n *\n * @param {Object} data Incoming data to build the arguments from.\n *\n * @return {Array} Arguments for dispatch. An empty array signals no\n *                 notification should be sent.\n */\nexport function getNotificationArgumentsForSaveSuccess( data ) {\n\tconst { previousPost, post, postType } = data;\n\t// Autosaves are neither shown a notice nor redirected.\n\tif ( get( data.options, [ 'isAutosave' ] ) ) {\n\t\treturn [];\n\t}\n\n\tconst publishStatus = [ 'publish', 'private', 'future' ];\n\tconst isPublished = includes( publishStatus, previousPost.status );\n\tconst willPublish = includes( publishStatus, post.status );\n\n\tlet noticeMessage;\n\tlet shouldShowLink = get( postType, [ 'viewable' ], false );\n\n\tif ( ! isPublished && ! willPublish ) {\n\t\t// If saving a non-published post, don't show notice.\n\t\tnoticeMessage = null;\n\t} else if ( isPublished && ! willPublish ) {\n\t\t// If undoing publish status, show specific notice\n\t\tnoticeMessage = postType.labels.item_reverted_to_draft;\n\t\tshouldShowLink = false;\n\t} else if ( ! isPublished && willPublish ) {\n\t\t// If publishing or scheduling a post, show the corresponding\n\t\t// publish message\n\t\tnoticeMessage = {\n\t\t\tpublish: postType.labels.item_published,\n\t\t\tprivate: postType.labels.item_published_privately,\n\t\t\tfuture: postType.labels.item_scheduled,\n\t\t}[ post.status ];\n\t} else {\n\t\t// Generic fallback notice\n\t\tnoticeMessage = postType.labels.item_updated;\n\t}\n\n\tif ( noticeMessage ) {\n\t\tconst actions = [];\n\t\tif ( shouldShowLink ) {\n\t\t\tactions.push( {\n\t\t\t\tlabel: postType.labels.view_item,\n\t\t\t\turl: post.link,\n\t\t\t} );\n\t\t}\n\t\treturn [\n\t\t\tnoticeMessage,\n\t\t\t{\n\t\t\t\tid: SAVE_POST_NOTICE_ID,\n\t\t\t\tactions,\n\t\t\t},\n\t\t];\n\t}\n\treturn [];\n}\n\n/**\n * Builds the fail notification arguments for dispatch.\n *\n * @param {Object} data Incoming data to build the arguments with.\n *\n * @return {Array} Arguments for dispatch. An empty array signals no\n *                 notification should be sent.\n */\nexport function getNotificationArgumentsForSaveFail( data ) {\n\tconst { post, edits, error } = data;\n\tif ( error && 'rest_autosave_no_changes' === error.code ) {\n\t\t// Autosave requested a new autosave, but there were no changes. This shouldn't\n\t\t// result in an error notice for the user.\n\t\treturn [];\n\t}\n\n\tconst publishStatus = [ 'publish', 'private', 'future' ];\n\tconst isPublished = publishStatus.indexOf( post.status ) !== -1;\n\t// If the post was being published, we show the corresponding publish error message\n\t// Unless we publish an \"updating failed\" message\n\tconst messages = {\n\t\tpublish: __( 'Publishing failed' ),\n\t\tprivate: __( 'Publishing failed' ),\n\t\tfuture: __( 'Scheduling failed' ),\n\t};\n\tconst noticeMessage = ! isPublished && publishStatus.indexOf( edits.status ) !== -1 ?\n\t\tmessages[ edits.status ] :\n\t\t__( 'Updating failed' );\n\n\treturn [ noticeMessage, { id: SAVE_POST_NOTICE_ID } ];\n}\n\n/**\n * Builds the trash fail notification arguments for dispatch.\n *\n * @param {Object} data\n *\n * @return {Array} Arguments for dispatch.\n */\nexport function getNotificationArgumentsForTrashFail( data ) {\n\treturn [\n\t\tdata.error.message && data.error.code !== 'unknown_error' ?\n\t\t\tdata.error.message :\n\t\t\t__( 'Trashing failed' ),\n\t\t{ id: TRASH_POST_NOTICE_ID },\n\t];\n}\n"]}