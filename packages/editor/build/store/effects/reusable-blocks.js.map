{"version":3,"sources":["@wordpress/editor/src/store/effects/reusable-blocks.js"],"names":["REUSABLE_BLOCK_NOTICE_ID","fetchReusableBlocks","action","store","id","dispatch","path","postType","rest_base","posts","results","post","status","content","protected","parsedBlocks","raw","reusableBlock","title","parsedBlock","length","type","error","saveReusableBlocks","state","getState","clientId","isTemporary","getBlock","name","innerBlocks","data","method","updatedReusableBlock","updatedId","message","createSuccessNotice","__unstableSaveReusableBlock","createErrorNotice","deleteReusableBlocks","allBlocks","getBlocks","associatedBlocks","filter","block","attributes","ref","associatedBlockClientIds","map","transactionId","optimist","BEGIN","removeBlocks","COMMIT","REVERT","receiveReusableBlocks","receiveBlocks","convertBlockToStatic","oldBlock","referencedBlock","newBlocks","innerBlock","replaceBlocks","convertBlockToReusable","clientIds","getBlocksByClientId"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { compact, map, uniqueId } from 'lodash';\nimport { BEGIN, COMMIT, REVERT } from 'redux-optimist';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport {\n\tparse,\n\tserialize,\n\tcreateBlock,\n\tisReusableBlock,\n\tcloneBlock,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n// TODO: Ideally this would be the only dispatch in scope. This requires either\n// refactoring editor actions to yielded controls, or replacing direct dispatch\n// on the editor store with action creators (e.g. `REMOVE_REUSABLE_BLOCK`).\nimport { dispatch as dataDispatch, select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\t__experimentalReceiveReusableBlocks as receiveReusableBlocksAction,\n\t__experimentalSaveReusableBlock as saveReusableBlock,\n} from '../actions';\nimport {\n\t__experimentalGetReusableBlock as getReusableBlock,\n} from '../selectors';\nimport { getPostRawValue } from '../reducer';\n\n/**\n * Module Constants\n */\nconst REUSABLE_BLOCK_NOTICE_ID = 'REUSABLE_BLOCK_NOTICE_ID';\n\n/**\n * Fetch Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const fetchReusableBlocks = async ( action, store ) => {\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tlet posts;\n\n\t\tif ( id ) {\n\t\t\tposts = [ await apiFetch( { path: `/wp/v2/${ postType.rest_base }/${ id }` } ) ];\n\t\t} else {\n\t\t\tposts = await apiFetch( { path: `/wp/v2/${ postType.rest_base }?per_page=-1` } );\n\t\t}\n\n\t\tconst results = compact( map( posts, ( post ) => {\n\t\t\tif ( post.status !== 'publish' || post.content.protected ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst parsedBlocks = parse( post.content.raw );\n\t\t\treturn {\n\t\t\t\treusableBlock: {\n\t\t\t\t\tid: post.id,\n\t\t\t\t\ttitle: getPostRawValue( post.title ),\n\t\t\t\t},\n\t\t\t\tparsedBlock: parsedBlocks.length === 1 ?\n\t\t\t\t\tparsedBlocks[ 0 ] :\n\t\t\t\t\tcreateBlock( 'core/template', {}, parsedBlocks ),\n\t\t\t};\n\t\t} ) );\n\n\t\tif ( results.length ) {\n\t\t\tdispatch( receiveReusableBlocksAction( results ) );\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_SUCCESS',\n\t\t\tid,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_FAILURE',\n\t\t\tid,\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Save Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const saveReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\tconst state = store.getState();\n\tconst { clientId, title, isTemporary } = getReusableBlock( state, id );\n\tconst reusableBlock = select( 'core/block-editor' ).getBlock( clientId );\n\tconst content = serialize( reusableBlock.name === 'core/template' ? reusableBlock.innerBlocks : reusableBlock );\n\n\tconst data = isTemporary ? { title, content, status: 'publish' } : { id, title, content, status: 'publish' };\n\tconst path = isTemporary ? `/wp/v2/${ postType.rest_base }` : `/wp/v2/${ postType.rest_base }/${ id }`;\n\tconst method = isTemporary ? 'POST' : 'PUT';\n\n\ttry {\n\t\tconst updatedReusableBlock = await apiFetch( { path, data, method } );\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tupdatedId: updatedReusableBlock.id,\n\t\t\tid,\n\t\t} );\n\t\tconst message = isTemporary ? __( 'Block created.' ) : __( 'Block updated.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\n\t\tdataDispatch( 'core/block-editor' ).__unstableSaveReusableBlock( id, updatedReusableBlock.id );\n\t} catch ( error ) {\n\t\tdispatch( { type: 'SAVE_REUSABLE_BLOCK_FAILURE', id } );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Delete Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const deleteReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { getState, dispatch } = store;\n\n\t// Don't allow a reusable block with a temporary ID to be deleted\n\tconst reusableBlock = getReusableBlock( getState(), id );\n\tif ( ! reusableBlock || reusableBlock.isTemporary ) {\n\t\treturn;\n\t}\n\n\t// Remove any other blocks that reference this reusable block\n\tconst allBlocks = select( 'core/block-editor' ).getBlocks();\n\tconst associatedBlocks = allBlocks.filter( ( block ) => isReusableBlock( block ) && block.attributes.ref === id );\n\tconst associatedBlockClientIds = associatedBlocks.map( ( block ) => block.clientId );\n\n\tconst transactionId = uniqueId();\n\n\tdispatch( {\n\t\ttype: 'REMOVE_REUSABLE_BLOCK',\n\t\tid,\n\t\toptimist: { type: BEGIN, id: transactionId },\n\t} );\n\n\t// Remove the parsed block.\n\tdataDispatch( 'core/block-editor' ).removeBlocks( [\n\t\t...associatedBlockClientIds,\n\t\treusableBlock.clientId,\n\t] );\n\n\ttry {\n\t\tawait apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tid,\n\t\t\toptimist: { type: COMMIT, id: transactionId },\n\t\t} );\n\t\tconst message = __( 'Block deleted.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_FAILURE',\n\t\t\tid,\n\t\t\toptimist: { type: REVERT, id: transactionId },\n\t\t} );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Receive Reusable Blocks Effect Handler.\n *\n * @param {Object} action  action object.\n */\nexport const receiveReusableBlocks = ( action ) => {\n\tdataDispatch( 'core/block-editor' ).receiveBlocks( map( action.results, 'parsedBlock' ) );\n};\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToStatic = ( action, store ) => {\n\tconst state = store.getState();\n\tconst oldBlock = select( 'core/block-editor' ).getBlock( action.clientId );\n\tconst reusableBlock = getReusableBlock( state, oldBlock.attributes.ref );\n\tconst referencedBlock = select( 'core/block-editor' ).getBlock( reusableBlock.clientId );\n\tlet newBlocks;\n\tif ( referencedBlock.name === 'core/template' ) {\n\t\tnewBlocks = referencedBlock.innerBlocks.map( ( innerBlock ) => cloneBlock( innerBlock ) );\n\t} else {\n\t\tnewBlocks = [ cloneBlock( referencedBlock ) ];\n\t}\n\tdataDispatch( 'core/block-editor' ).replaceBlocks( oldBlock.clientId, newBlocks );\n};\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToReusable = ( action, store ) => {\n\tconst { dispatch } = store;\n\tlet parsedBlock;\n\tif ( action.clientIds.length === 1 ) {\n\t\tparsedBlock = select( 'core/block-editor' ).getBlock( action.clientIds[ 0 ] );\n\t} else {\n\t\tparsedBlock = createBlock(\n\t\t\t'core/template',\n\t\t\t{},\n\t\t\tselect( 'core/block-editor' ).getBlocksByClientId( action.clientIds )\n\t\t);\n\n\t\t// This shouldn't be necessary but at the moment\n\t\t// we expect the content of the shared blocks to live in the blocks state.\n\t\tdataDispatch( 'core/block-editor' ).receiveBlocks( [ parsedBlock ] );\n\t}\n\n\tconst reusableBlock = {\n\t\tid: uniqueId( 'reusable' ),\n\t\tclientId: parsedBlock.clientId,\n\t\ttitle: __( 'Untitled Reusable Block' ),\n\t};\n\n\tdispatch( receiveReusableBlocksAction( [ {\n\t\treusableBlock,\n\t\tparsedBlock,\n\t} ] ) );\n\n\tdispatch( saveReusableBlock( reusableBlock.id ) );\n\n\tdataDispatch( 'core/block-editor' ).replaceBlocks(\n\t\taction.clientIds,\n\t\tcreateBlock( 'core/block', {\n\t\t\tref: reusableBlock.id,\n\t\t} )\n\t);\n\n\t// Re-add the original block to the store, since replaceBlock() will have removed it\n\tdataDispatch( 'core/block-editor' ).receiveBlocks( [ parsedBlock ] );\n};\n"]}