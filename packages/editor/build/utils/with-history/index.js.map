{"version":3,"sources":["@wordpress/editor/src/utils/with-history/index.js"],"names":["DEFAULT_OPTIONS","resetTypes","ignoreTypes","shouldOverwriteState","withHistory","options","reducer","action","type","initialState","past","present","undefined","future","lastAction","shouldCreateUndoLevel","state","previousAction","length","nextPresent","nextPast","lastActionToSubmit"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { overSome, includes, first, last, drop, dropRight } from 'lodash';\n\n/**\n * Default options for withHistory reducer enhancer. Refer to withHistory\n * documentation for options explanation.\n *\n * @see withHistory\n *\n * @type {Object}\n */\nconst DEFAULT_OPTIONS = {\n\tresetTypes: [],\n\tignoreTypes: [],\n\tshouldOverwriteState: () => false,\n};\n\n/**\n * Higher-order reducer creator which transforms the result of the original\n * reducer into an object tracking its own history (past, present, future).\n *\n * @param {?Object}   options                      Optional options.\n * @param {?Array}    options.resetTypes           Action types upon which to\n *                                                 clear past.\n * @param {?Array}    options.ignoreTypes          Action types upon which to\n *                                                 avoid history tracking.\n * @param {?Function} options.shouldOverwriteState Function receiving last and\n *                                                 current actions, returning\n *                                                 boolean indicating whether\n *                                                 present should be merged,\n *                                                 rather than add undo level.\n *\n * @return {Function} Higher-order reducer.\n */\nconst withHistory = ( options = {} ) => ( reducer ) => {\n\toptions = { ...DEFAULT_OPTIONS, ...options };\n\n\t// `ignoreTypes` is simply a convenience for `shouldOverwriteState`\n\toptions.shouldOverwriteState = overSome( [\n\t\toptions.shouldOverwriteState,\n\t\t( action ) => includes( options.ignoreTypes, action.type ),\n\t] );\n\n\tconst initialState = {\n\t\tpast: [],\n\t\tpresent: reducer( undefined, {} ),\n\t\tfuture: [],\n\t\tlastAction: null,\n\t\tshouldCreateUndoLevel: false,\n\t};\n\n\tconst {\n\t\tresetTypes = [],\n\t\tshouldOverwriteState = () => false,\n\t} = options;\n\n\treturn ( state = initialState, action ) => {\n\t\tconst { past, present, future, lastAction, shouldCreateUndoLevel } = state;\n\t\tconst previousAction = lastAction;\n\n\t\tswitch ( action.type ) {\n\t\t\tcase 'UNDO':\n\t\t\t\t// Can't undo if no past.\n\t\t\t\tif ( ! past.length ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tpast: dropRight( past ),\n\t\t\t\t\tpresent: last( past ),\n\t\t\t\t\tfuture: [ present, ...future ],\n\t\t\t\t\tlastAction: null,\n\t\t\t\t\tshouldCreateUndoLevel: false,\n\t\t\t\t};\n\t\t\tcase 'REDO':\n\t\t\t\t// Can't redo if no future.\n\t\t\t\tif ( ! future.length ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tpast: [ ...past, present ],\n\t\t\t\t\tpresent: first( future ),\n\t\t\t\t\tfuture: drop( future ),\n\t\t\t\t\tlastAction: null,\n\t\t\t\t\tshouldCreateUndoLevel: false,\n\t\t\t\t};\n\n\t\t\tcase 'CREATE_UNDO_LEVEL':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tlastAction: null,\n\t\t\t\t\tshouldCreateUndoLevel: true,\n\t\t\t\t};\n\t\t}\n\n\t\tconst nextPresent = reducer( present, action );\n\n\t\tif ( includes( resetTypes, action.type ) ) {\n\t\t\treturn {\n\t\t\t\tpast: [],\n\t\t\t\tpresent: nextPresent,\n\t\t\t\tfuture: [],\n\t\t\t\tlastAction: null,\n\t\t\t\tshouldCreateUndoLevel: false,\n\t\t\t};\n\t\t}\n\n\t\tif ( present === nextPresent ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tlet nextPast = past;\n\t\t// The `lastAction` property is used to compare actions in the\n\t\t// `shouldOverwriteState` option. If an action should be ignored, do not\n\t\t// submit that action as the last action, otherwise the ability to\n\t\t// compare subsequent actions will break.\n\t\tlet lastActionToSubmit = previousAction;\n\n\t\tif (\n\t\t\tshouldCreateUndoLevel ||\n\t\t\t! past.length ||\n\t\t\t! shouldOverwriteState( action, previousAction )\n\t\t) {\n\t\t\tnextPast = [ ...past, present ];\n\t\t\tlastActionToSubmit = action;\n\t\t}\n\n\t\treturn {\n\t\t\tpast: nextPast,\n\t\t\tpresent: nextPresent,\n\t\t\tfuture: [],\n\t\t\tshouldCreateUndoLevel: false,\n\t\t\tlastAction: lastActionToSubmit,\n\t\t};\n\t};\n};\n\nexport default withHistory;\n"]}