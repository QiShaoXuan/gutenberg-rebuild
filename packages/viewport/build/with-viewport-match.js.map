{"version":3,"sources":["@wordpress/viewport/src/with-viewport-match.js"],"names":["withViewportMatch","queries","select","query","isViewportMatch"],"mappings":";;;;;;;AAGA;;AAKA;;AACA;;AATA;;;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAEC,OAAF;AAAA,SAAe,yCACxC,sBAAY,UAAEC,MAAF,EAAc;AACzB,WAAO,uBAAWD,OAAX,EAAoB,UAAEE,KAAF,EAAa;AACvC,aAAOD,MAAM,CAAE,eAAF,CAAN,CAA0BE,eAA1B,CAA2CD,KAA3C,CAAP;AACA,KAFM,CAAP;AAGA,GAJD,CADwC,EAMxC,mBANwC,CAAf;AAAA,CAA1B;;eASeH,iB","sourcesContent":["/**\n * External dependencies\n */\nimport { mapValues } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { withSelect } from '@wordpress/data';\n\n/**\n * Higher-order component creator, creating a new component which renders with\n * the given prop names, where the value passed to the underlying component is\n * the result of the query assigned as the object's value.\n *\n * @see isViewportMatch\n *\n * @param {Object} queries  Object of prop name to viewport query.\n *\n * @example\n *\n * ```jsx\n * function MyComponent( { isMobile } ) {\n * \treturn (\n * \t\t<div>Currently: { isMobile ? 'Mobile' : 'Not Mobile' }</div>\n * \t);\n * }\n *\n * MyComponent = withViewportMatch( { isMobile: '< small' } )( MyComponent );\n * ```\n *\n * @return {Function} Higher-order component.\n */\nconst withViewportMatch = ( queries ) => createHigherOrderComponent(\n\twithSelect( ( select ) => {\n\t\treturn mapValues( queries, ( query ) => {\n\t\t\treturn select( 'core/viewport' ).isViewportMatch( query );\n\t\t} );\n\t} ),\n\t'withViewportMatch'\n);\n\nexport default withViewportMatch;\n"]}