{"version":3,"sources":["@wordpress/viewport/src/if-viewport-matches.js"],"names":["ifViewportMatches","query","isViewportMatch","props"],"mappings":";;;;;;;;;AAGA;;AAKA;;AARA;;;;AAKA;;;;AAKA;;;;;;;;;;;;;;;;;;;;AAoBA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAEC,KAAF;AAAA,SAAa,yCACtC,sBAAS,CACR,gCAAmB;AAClBC,IAAAA,eAAe,EAAED;AADC,GAAnB,CADQ,EAIR,0BAAa,UAAEE,KAAF;AAAA,WAAaA,KAAK,CAACD,eAAnB;AAAA,GAAb,CAJQ,CAAT,CADsC,EAOtC,mBAPsC,CAAb;AAAA,CAA1B;;eAUeF,iB","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { ifCondition, compose, createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport withViewportMatch from './with-viewport-match';\n\n/**\n * Higher-order component creator, creating a new component which renders if\n * the viewport query is satisfied.\n *\n * @see withViewportMatches\n *\n * @param {string} query Viewport query.\n *\n * @example\n *\n * ```jsx\n * function MyMobileComponent() {\n * \treturn <div>I'm only rendered on mobile viewports!</div>;\n * }\n *\n * MyMobileComponent = ifViewportMatches( '< small' )( MyMobileComponent );\n * ```\n *\n * @return {Function} Higher-order component.\n */\nconst ifViewportMatches = ( query ) => createHigherOrderComponent(\n\tcompose( [\n\t\twithViewportMatch( {\n\t\t\tisViewportMatch: query,\n\t\t} ),\n\t\tifCondition( ( props ) => props.isViewportMatch ),\n\t] ),\n\t'ifViewportMatches'\n);\n\nexport default ifViewportMatches;\n"]}