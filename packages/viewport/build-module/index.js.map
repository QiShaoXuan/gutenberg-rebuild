{"version":3,"sources":["@wordpress/viewport/src/index.js"],"names":["reduce","forEach","debounce","mapValues","dispatch","default","ifViewportMatches","withViewportMatch","BREAKPOINTS","huge","wide","large","medium","small","mobile","OPERATORS","setIsMatching","values","queries","query","matches","leading","result","width","name","condition","operator","list","window","matchMedia","addListener","key","join","addEventListener","flush"],"mappings":"AAAA;;;AAGA,SAASA,MAAT,EAAiBC,OAAjB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,QAArD;AAEA;;;;AAGA,SAASC,QAAT,QAAyB,iBAAzB;AAEA;;;;AAGA,OAAO,SAAP;AAEA,SAASC,OAAO,IAAIC,iBAApB,QAA6C,uBAA7C;AACA,SAASD,OAAO,IAAIE,iBAApB,QAA6C,uBAA7C;AAEA;;;;;;;;AAOA,IAAMC,WAAW,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,KAAK,EAAE,GAHY;AAInBC,EAAAA,MAAM,EAAE,GAJW;AAKnBC,EAAAA,KAAK,EAAE,GALY;AAMnBC,EAAAA,MAAM,EAAE;AANW,CAApB;AASA;;;;;;AAKA,IAAMC,SAAS,GAAG;AACjB,OAAK,WADY;AAEjB,QAAM;AAFW,CAAlB;AAKA;;;;;AAIA,IAAMC,aAAa,GAAGd,QAAQ,CAAE,YAAM;AACrC,MAAMe,MAAM,GAAGd,SAAS,CAAEe,OAAF,EAAW,UAAEC,KAAF;AAAA,WAAaA,KAAK,CAACC,OAAnB;AAAA,GAAX,CAAxB;AACAhB,EAAAA,QAAQ,CAAE,eAAF,CAAR,CAA4BY,aAA5B,CAA2CC,MAA3C;AACA,CAH6B,EAG3B;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAH2B,CAA9B;AAKA;;;;;;;;;;AASA,IAAMH,OAAO,GAAGlB,MAAM,CAAEQ,WAAF,EAAe,UAAEc,MAAF,EAAUC,KAAV,EAAiBC,IAAjB,EAA2B;AAC/DvB,EAAAA,OAAO,CAAEc,SAAF,EAAa,UAAEU,SAAF,EAAaC,QAAb,EAA2B;AAC9C,QAAMC,IAAI,GAAGC,MAAM,CAACC,UAAP,YAAwBJ,SAAxB,eAAwCF,KAAxC,SAAb;AACAI,IAAAA,IAAI,CAACG,WAAL,CAAkBd,aAAlB;AAEA,QAAMe,GAAG,GAAG,CAAEL,QAAF,EAAYF,IAAZ,EAAmBQ,IAAnB,CAAyB,GAAzB,CAAZ;AACAV,IAAAA,MAAM,CAAES,GAAF,CAAN,GAAgBJ,IAAhB;AACA,GANM,CAAP;AAQA,SAAOL,MAAP;AACA,CAVqB,EAUnB,EAVmB,CAAtB;AAYAM,MAAM,CAACK,gBAAP,CAAyB,mBAAzB,EAA8CjB,aAA9C,E,CAEA;;AACAA,aAAa;AACbA,aAAa,CAACkB,KAAd","sourcesContent":["/**\n * External dependencies\n */\nimport { reduce, forEach, debounce, mapValues } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { dispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport './store';\n\nexport { default as ifViewportMatches } from './if-viewport-matches';\nexport { default as withViewportMatch } from './with-viewport-match';\n\n/**\n * Hash of breakpoint names with pixel width at which it becomes effective.\n *\n * @see _breakpoints.scss\n *\n * @type {Object}\n */\nconst BREAKPOINTS = {\n\thuge: 1440,\n\twide: 1280,\n\tlarge: 960,\n\tmedium: 782,\n\tsmall: 600,\n\tmobile: 480,\n};\n\n/**\n * Hash of query operators with corresponding condition for media query.\n *\n * @type {Object}\n */\nconst OPERATORS = {\n\t'<': 'max-width',\n\t'>=': 'min-width',\n};\n\n/**\n * Callback invoked when media query state should be updated. Is invoked a\n * maximum of one time per call stack.\n */\nconst setIsMatching = debounce( () => {\n\tconst values = mapValues( queries, ( query ) => query.matches );\n\tdispatch( 'core/viewport' ).setIsMatching( values );\n}, { leading: true } );\n\n/**\n * Hash of breakpoint names with generated MediaQueryList for corresponding\n * media query.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList\n *\n * @type {Object<string,MediaQueryList>}\n */\nconst queries = reduce( BREAKPOINTS, ( result, width, name ) => {\n\tforEach( OPERATORS, ( condition, operator ) => {\n\t\tconst list = window.matchMedia( `(${ condition }: ${ width }px)` );\n\t\tlist.addListener( setIsMatching );\n\n\t\tconst key = [ operator, name ].join( ' ' );\n\t\tresult[ key ] = list;\n\t} );\n\n\treturn result;\n}, {} );\n\nwindow.addEventListener( 'orientationchange', setIsMatching );\n\n// Set initial values\nsetIsMatching();\nsetIsMatching.flush();\n"]}