{"version":3,"sources":["@wordpress/blocks/src/store/selectors.js"],"names":["getNormalizedBlockType","state","nameOrType","getBlockType","getBlockTypes","Object","values","blockTypes","name","getBlockStyles","blockStyles","getCategories","categories","getDefaultBlockName","defaultBlockName","getFreeformFallbackBlockName","freeformFallbackBlockName","getUnregisteredFallbackBlockName","unregisteredFallbackBlockName","getChildBlockNames","blockName","blockType","parent","getBlockSupport","feature","defaultSupports","hasBlockSupport","isMatchingSearchTerm","searchTerm","getNormalizedSearchTerm","deburr","term","toLowerCase","trim","normalizedSearchTerm","isSearchMatch","normalizedCandidate","title","keywords","category","hasChildBlocks","length","hasChildBlocksWithInserterSupport","childBlockName"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { filter, get, includes, map, some, flow, deburr } from 'lodash';\n\n/**\n * Given a block name or block type object, returns the corresponding\n * normalized block type object.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object\n *\n * @return {Object} Block type object.\n */\nconst getNormalizedBlockType = ( state, nameOrType ) => (\n\t'string' === typeof nameOrType ?\n\t\tgetBlockType( state, nameOrType ) :\n\t\tnameOrType\n);\n\n/**\n * Returns all the available block types.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Block Types.\n */\nexport const getBlockTypes = createSelector(\n\t( state ) => Object.values( state.blockTypes ),\n\t( state ) => [\n\t\tstate.blockTypes,\n\t]\n);\n\n/**\n * Returns a block type by name.\n *\n * @param {Object} state Data state.\n * @param {string} name Block type name.\n *\n * @return {Object?} Block Type.\n */\nexport function getBlockType( state, name ) {\n\treturn state.blockTypes[ name ];\n}\n\n/**\n * Returns block styles by block name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Block type name.\n *\n * @return {Array?} Block Styles.\n */\nexport function getBlockStyles( state, name ) {\n\treturn state.blockStyles[ name ];\n}\n\n/**\n * Returns all the available categories.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Categories list.\n */\nexport function getCategories( state ) {\n\treturn state.categories;\n}\n\n/**\n * Returns the name of the default block name.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Default block name.\n */\nexport function getDefaultBlockName( state ) {\n\treturn state.defaultBlockName;\n}\n\n/**\n * Returns the name of the block for handling non-block content.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling non-block content.\n */\nexport function getFreeformFallbackBlockName( state ) {\n\treturn state.freeformFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling unregistered blocks.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling unregistered blocks.\n */\nexport function getUnregisteredFallbackBlockName( state ) {\n\treturn state.unregisteredFallbackBlockName;\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = createSelector(\n\t( state, blockName ) => {\n\t\treturn map(\n\t\t\tfilter( state.blockTypes, ( blockType ) => {\n\t\t\t\treturn includes( blockType.parent, blockName );\n\t\t\t} ),\n\t\t\t( { name } ) => name\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.blockTypes,\n\t]\n);\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param  {Object}          state           Data state.\n * @param  {(string|Object)} nameOrType      Block name or type object\n * @param  {string}          feature         Feature to retrieve\n * @param  {*}               defaultSupports Default value to return if not\n *                                           explicitly defined\n *\n * @return {?*} Block support value\n */\nexport const getBlockSupport = ( state, nameOrType, feature, defaultSupports ) => {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\n\treturn get( blockType, [\n\t\t'supports',\n\t\tfeature,\n\t], defaultSupports );\n};\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param  {Object}         state           Data state.\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( state, nameOrType, feature, defaultSupports ) {\n\treturn !! getBlockSupport( state, nameOrType, feature, defaultSupports );\n}\n\n/**\n * Returns true if the block type by the given name or object value matches a\n * search term, or false otherwise.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object.\n * @param {string}          searchTerm Search term by which to filter.\n *\n * @return {Object[]} Wheter block type matches search term.\n */\nexport function isMatchingSearchTerm( state, nameOrType, searchTerm ) {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\n\tconst getNormalizedSearchTerm = flow( [\n\t\t// Disregard diacritics.\n\t\t//  Input: \"mÃ©dia\"\n\t\tdeburr,\n\n\t\t// Lowercase.\n\t\t//  Input: \"MEDIA\"\n\t\t( term ) => term.toLowerCase(),\n\n\t\t// Strip leading and trailing whitespace.\n\t\t//  Input: \" media \"\n\t\t( term ) => term.trim(),\n\t] );\n\n\tconst normalizedSearchTerm = getNormalizedSearchTerm( searchTerm );\n\n\tconst isSearchMatch = flow( [\n\t\tgetNormalizedSearchTerm,\n\t\t( normalizedCandidate ) => includes(\n\t\t\tnormalizedCandidate,\n\t\t\tnormalizedSearchTerm\n\t\t),\n\t] );\n\n\treturn (\n\t\tisSearchMatch( blockType.title ) ||\n\t\tsome( blockType.keywords, isSearchMatch ) ||\n\t\tisSearchMatch( blockType.category )\n\t);\n}\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( state, blockName ) => {\n\treturn getChildBlockNames( state, blockName ).length > 0;\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( state, blockName ) => {\n\treturn some( getChildBlockNames( state, blockName ), ( childBlockName ) => {\n\t\treturn hasBlockSupport( state, childBlockName, 'inserter', true );\n\t} );\n};\n"]}