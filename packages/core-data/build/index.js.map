{"version":3,"sources":["@wordpress/core-data/src/index.js"],"names":["entitySelectors","defaultEntities","reduce","result","entity","kind","name","state","key","selectors","getEntityRecord","args","getEntityRecords","entityResolvers","resolvers","pluralMethodName","shouldInvalidate","action","entityActions","actions","saveEntityRecord","REDUCER_KEY","reducer","controls"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { registerStore } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport controls from './controls';\nimport * as selectors from './selectors';\nimport * as actions from './actions';\nimport * as resolvers from './resolvers';\nimport { defaultEntities, getMethodName } from './entities';\nimport { REDUCER_KEY } from './name';\n\n// The entity selectors/resolvers and actions are shortcuts to their generic equivalents\n// (getEntityRecord, getEntityRecords, updateEntityRecord, updateEntityRecordss)\n// Instead of getEntityRecord, the consumer could use more user-frieldly named selector: getPostType, getTaxonomy...\n// The \"kind\" and the \"name\" of the entity are combined to generate these shortcuts.\n\nconst entitySelectors = defaultEntities.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name ) ] = ( state, key ) => selectors.getEntityRecord( state, kind, name, key );\n\tresult[ getMethodName( kind, name, 'get', true ) ] = ( state, ...args ) => selectors.getEntityRecords( state, kind, name, ...args );\n\treturn result;\n}, {} );\n\nconst entityResolvers = defaultEntities.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name ) ] = ( key ) => resolvers.getEntityRecord( kind, name, key );\n\tconst pluralMethodName = getMethodName( kind, name, 'get', true );\n\tresult[ pluralMethodName ] = ( ...args ) => resolvers.getEntityRecords( kind, name, ...args );\n\tresult[ pluralMethodName ].shouldInvalidate = ( action, ...args ) => resolvers.getEntityRecords.shouldInvalidate( action, kind, name, ...args );\n\treturn result;\n}, {} );\n\nconst entityActions = defaultEntities.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name, 'save' ) ] = ( key ) => actions.saveEntityRecord( kind, name, key );\n\treturn result;\n}, {} );\n\nregisterStore( REDUCER_KEY, {\n\treducer,\n\tcontrols,\n\tactions: { ...actions, ...entityActions },\n\tselectors: { ...selectors, ...entitySelectors },\n\tresolvers: { ...resolvers, ...entityResolvers },\n} );\n"]}