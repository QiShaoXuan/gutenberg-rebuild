{"version":3,"sources":["@wordpress/core-data/src/entities.js"],"names":["loadPostTypeEntities","loadTaxonomyEntities","getKindEntities","DEFAULT_ENTITY_KEY","defaultEntities","name","kind","key","baseURL","plural","kinds","loadEntities","path","postTypes","postType","rest_base","taxonomies","taxonomy","getMethodName","prefix","usePlural","entity","kindPrefix","nameSuffix","suffix","entities","length","kindConfig"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { upperFirst, camelCase, map, find } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { addEntities } from './actions';\nimport { apiFetch, select } from './controls';\n\nexport const DEFAULT_ENTITY_KEY = 'id';\n\nexport const defaultEntities = [\n\t{ name: 'postType', kind: 'root', key: 'slug', baseURL: '/wp/v2/types' },\n\t{ name: 'media', kind: 'root', baseURL: '/wp/v2/media', plural: 'mediaItems' },\n\t{ name: 'taxonomy', kind: 'root', key: 'slug', baseURL: '/wp/v2/taxonomies', plural: 'taxonomies' },\n];\n\nexport const kinds = [\n\t{ name: 'postType', loadEntities: loadPostTypeEntities },\n\t{ name: 'taxonomy', loadEntities: loadTaxonomyEntities },\n];\n\n/**\n * Returns the list of post type entities.\n *\n * @return {Promise} Entities promise\n */\nfunction* loadPostTypeEntities() {\n\tconst postTypes = yield apiFetch( { path: '/wp/v2/types?context=edit' } );\n\treturn map( postTypes, ( postType, name ) => {\n\t\treturn {\n\t\t\tkind: 'postType',\n\t\t\tbaseURL: '/wp/v2/' + postType.rest_base,\n\t\t\tname,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the list of the taxonomies entities.\n *\n * @return {Promise} Entities promise\n */\nfunction* loadTaxonomyEntities() {\n\tconst taxonomies = yield apiFetch( { path: '/wp/v2/taxonomies?context=edit' } );\n\treturn map( taxonomies, ( taxonomy, name ) => {\n\t\treturn {\n\t\t\tkind: 'taxonomy',\n\t\t\tbaseURL: '/wp/v2/' + taxonomy.rest_base,\n\t\t\tname,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the entity's getter method name given its kind and name.\n *\n * @param {string}  kind      Entity kind.\n * @param {string}  name      Entity name.\n * @param {string}  prefix    Function prefix.\n * @param {boolean} usePlural Whether to use the plural form or not.\n *\n * @return {string} Method name\n */\nexport const getMethodName = ( kind, name, prefix = 'get', usePlural = false ) => {\n\tconst entity = find( defaultEntities, { kind, name } );\n\tconst kindPrefix = kind === 'root' ? '' : upperFirst( camelCase( kind ) );\n\tconst nameSuffix = upperFirst( camelCase( name ) ) + ( usePlural ? 's' : '' );\n\tconst suffix = usePlural && entity.plural ? upperFirst( camelCase( entity.plural ) ) : nameSuffix;\n\treturn `${ prefix }${ kindPrefix }${ suffix }`;\n};\n\n/**\n * Loads the kind entities into the store.\n *\n * @param {string} kind  Kind\n *\n * @return {Array} Entities\n */\nexport function* getKindEntities( kind ) {\n\tlet entities = yield select( 'getEntitiesByKind', kind );\n\tif ( entities && entities.length !== 0 ) {\n\t\treturn entities;\n\t}\n\n\tconst kindConfig = find( kinds, { name: kind } );\n\tif ( ! kindConfig ) {\n\t\treturn [];\n\t}\n\n\tentities = yield kindConfig.loadEntities();\n\tyield addEntities( entities );\n\n\treturn entities;\n}\n"]}