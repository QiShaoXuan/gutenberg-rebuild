{"version":3,"sources":["@wordpress/core-data/src/selectors.js"],"names":["isRequestingEmbedPreview","select","state","url","isResolving","REDUCER_KEY","getAuthors","getUserQueryResults","queryID","queryResults","users","queries","id","byId","getEntitiesByKind","kind","entities","config","getEntity","name","getEntityRecord","key","data","getEntityRecords","query","queriedState","getThemeSupports","themeSupports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","hasUploadPermissions","alternative","canUser","action","resource","join"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { map, find, get, filter, compact, defaultTo } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { REDUCER_KEY } from './name';\nimport { getQueriedItems } from './queried-data';\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param {Object} state Data state.\n * @param {string} url   URL the preview would be for.\n *\n * @return {boolean} Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector( ( select ) => ( state, url ) => {\n\treturn select( 'core/data' ).isResolving( REDUCER_KEY, 'getEmbedPreview', [ url ] );\n} );\n\n/**\n * Returns all available authors.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Authors list.\n */\nexport function getAuthors( state ) {\n\treturn getUserQueryResults( state, 'authors' );\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param {Object} state   Data state.\n * @param {string} queryID Query ID.\n *\n * @return {Array} Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state, queryID ) => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state, queryID ) => [ state.users.queries[ queryID ], state.users.byId ]\n);\n\n/**\n * Returns whether the entities for the give kind are loaded.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n *\n * @return {boolean} Whether the entities are loaded\n */\nexport function getEntitiesByKind( state, kind ) {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity object given its kind and name.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n *\n * @return {Object} Entity\n */\nexport function getEntity( state, kind, name ) {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * Returns the Entity's record object by key.\n *\n * @param {Object} state  State tree\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n *\n * @return {Object?} Record.\n */\nexport function getEntityRecord( state, kind, name, key ) {\n\treturn get( state.entities.data, [ kind, name, 'items', key ] );\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param {Object}  state  State tree\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {?Object} query  Optional terms query.\n *\n * @return {Array} Records.\n */\nexport function getEntityRecords( state, kind, name, query ) {\n\tconst queriedState = get( state.entities.data, [ kind, name ] );\n\tif ( ! queriedState ) {\n\t\treturn [];\n\t}\n\treturn getQueriedItems( queriedState, query );\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param {Object} state Data state.\n *\n * @return {*}           Index data.\n */\nexport function getThemeSupports( state ) {\n\treturn state.themeSupports;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {*} Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state, url ) {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {booleans} Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state, url ) {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can upload media.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *             `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n *\n * @param {Object} state Data state.\n *\n * @return {boolean} Whether or not the user can upload media. Defaults to `true` if the OPTIONS\n *                   request is being made.\n */\nexport function hasUploadPermissions( state ) {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\treturn defaultTo( canUser( state, 'create', 'media' ), true );\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object}   state            Data state.\n * @param {string}   action           Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param {string}   resource         REST resource to check, e.g. 'media' or 'posts'.\n * @param {string=}  id               Optional ID of the rest resource to check.\n *\n * @return {boolean|undefined} Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser( state, action, resource, id ) {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n"]}