{"version":3,"sources":["@wordpress/core-data/src/actions.js"],"names":["saveEntityRecord","receiveUserQuery","queryID","users","type","addEntities","entities","receiveEntityRecords","kind","name","records","query","invalidateCache","action","receiveThemeSupports","themeSupports","receiveEmbedPreview","url","preview","record","entity","key","DEFAULT_ENTITY_KEY","recordId","path","baseURL","method","data","updatedRecord","undefined","receiveUploadPermissions","hasUploadPermissions","isAllowed","receiveUserPermission"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray, find } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveItems,\n\treceiveQueriedItems,\n} from './queried-data';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { apiFetch } from './controls';\n\n/**\n * Returns an action object used in signalling that authors have been received.\n *\n * @param {string}       queryID Query ID.\n * @param {Array|Object} users   Users received.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserQuery( queryID, users ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_QUERY',\n\t\tusers: castArray( users ),\n\t\tqueryID,\n\t};\n}\n\n/**\n * Returns an action object used in adding new entities.\n *\n * @param {Array} entities  Entities received.\n *\n * @return {Object} Action object.\n */\nexport function addEntities( entities ) {\n\treturn {\n\t\ttype: 'ADD_ENTITIES',\n\t\tentities,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that entity records have been received.\n *\n * @param {string}       kind            Kind of the received entity.\n * @param {string}       name            Name of the received entity.\n * @param {Array|Object} records         Records received.\n * @param {?Object}      query           Query Object.\n * @param {?boolean}     invalidateCache Should invalidate query caches\n *\n * @return {Object} Action object.\n */\nexport function receiveEntityRecords( kind, name, records, query, invalidateCache = false ) {\n\tlet action;\n\tif ( query ) {\n\t\taction = receiveQueriedItems( records, query );\n\t} else {\n\t\taction = receiveItems( records );\n\t}\n\n\treturn {\n\t\t...action,\n\t\tkind,\n\t\tname,\n\t\tinvalidateCache,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the index has been received.\n *\n * @param {Object} themeSupports Theme support for the current theme.\n *\n * @return {Object} Action object.\n */\nexport function receiveThemeSupports( themeSupports ) {\n\treturn {\n\t\ttype: 'RECEIVE_THEME_SUPPORTS',\n\t\tthemeSupports,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the preview data for\n * a given URl has been received.\n *\n * @param {string}  url      URL to preview the embed for.\n * @param {Mixed}   preview  Preview data.\n *\n * @return {Object} Action object.\n */\nexport function receiveEmbedPreview( url, preview ) {\n\treturn {\n\t\ttype: 'RECEIVE_EMBED_PREVIEW',\n\t\turl,\n\t\tpreview,\n\t};\n}\n\n/**\n * Action triggered to save an entity record.\n *\n * @param {string} kind    Kind of the received entity.\n * @param {string} name    Name of the received entity.\n * @param {Object} record  Record to be saved.\n *\n * @return {Object} Updated record.\n */\nexport function* saveEntityRecord( kind, name, record ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst key = entity.key || DEFAULT_ENTITY_KEY;\n\tconst recordId = record[ key ];\n\tconst updatedRecord = yield apiFetch( {\n\t\tpath: `${ entity.baseURL }${ recordId ? '/' + recordId : '' }`,\n\t\tmethod: recordId ? 'PUT' : 'POST',\n\t\tdata: record,\n\t} );\n\tyield receiveEntityRecords( kind, name, updatedRecord, undefined, true );\n\n\treturn updatedRecord;\n}\n\n/**\n * Returns an action object used in signalling that Upload permissions have been received.\n *\n * @param {boolean} hasUploadPermissions Does the user have permission to upload files?\n *\n * @return {Object} Action object.\n */\nexport function receiveUploadPermissions( hasUploadPermissions ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_PERMISSION',\n\t\tkey: 'create/media',\n\t\tisAllowed: hasUploadPermissions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current user has\n * permission to perform an action on a REST resource.\n *\n * @param {string}  key       A key that represents the action and REST resource.\n * @param {boolean} isAllowed Whether or not the user can perform the action.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserPermission( key, isAllowed ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_PERMISSION',\n\t\tkey,\n\t\tisAllowed,\n\t};\n}\n"]}