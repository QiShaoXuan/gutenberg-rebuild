{"version":3,"sources":["@wordpress/core-data/src/resolvers.js"],"names":["getAuthors","getEntityRecord","getEntityRecords","getThemeSupports","getEmbedPreview","hasUploadPermissions","canUser","find","includes","get","hasIn","compact","addQueryArgs","deprecated","receiveUserQuery","receiveEntityRecords","receiveThemeSupports","receiveEmbedPreview","receiveUserPermission","getKindEntities","apiFetch","path","users","kind","name","key","entities","entity","baseURL","record","query","context","records","Object","values","shouldInvalidate","action","type","invalidateCache","activeThemes","theme_supports","url","embedProxyResponse","alternative","resource","id","methods","create","read","update","delete","method","Error","parse","response","allowHeader","headers","join","isAllowed"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, includes, get, hasIn, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n\treceiveUserPermission,\n} from './actions';\nimport { getKindEntities } from './entities';\nimport { apiFetch } from './controls';\n\n/**\n * Requests authors from the REST API.\n */\nexport function* getAuthors() {\n\tconst users = yield apiFetch( { path: '/wp/v2/users/?who=authors&per_page=-1' } );\n\tyield receiveUserQuery( 'authors', users );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n */\nexport function* getEntityRecord( kind, name, key ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst record = yield apiFetch( { path: `${ entity.baseURL }/${ key }?context=edit` } );\n\tyield receiveEntityRecords( kind, name, record );\n}\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {Object?} query  Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst path = addQueryArgs( entity.baseURL, {\n\t\t...query,\n\t\tcontext: 'edit',\n\t} );\n\tconst records = yield apiFetch( { path } );\n\tyield receiveEntityRecords( kind, name, Object.values( records ), query );\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\taction.type === 'RECEIVE_ITEMS' &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( { path: '/wp/v2/themes?status=active' } );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url   URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( { path: addQueryArgs( '/oembed/1.0/proxy', { url } ) } );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n\n/**\n * Requests Upload Permissions from the REST API.\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *            `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n */\nexport function* hasUploadPermissions() {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\tyield* canUser( 'create', 'media' );\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport function* canUser( action, resource, id ) {\n\tconst methods = {\n\t\tcreate: 'POST',\n\t\tread: 'GET',\n\t\tupdate: 'PUT',\n\t\tdelete: 'DELETE',\n\t};\n\n\tconst method = methods[ action ];\n\tif ( ! method ) {\n\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t}\n\n\tconst path = id ? `/wp/v2/${ resource }/${ id }` : `/wp/v2/${ resource }`;\n\n\tlet response;\n\ttry {\n\t\tresponse = yield apiFetch( {\n\t\t\tpath,\n\t\t\t// Ideally this would always be an OPTIONS request, but unfortunately there's\n\t\t\t// a bug in the REST API which causes the Allow header to not be sent on\n\t\t\t// OPTIONS requests to /posts/:id routes.\n\t\t\t// https://core.trac.wordpress.org/ticket/45753\n\t\t\tmethod: id ? 'GET' : 'OPTIONS',\n\t\t\tparse: false,\n\t\t} );\n\t} catch ( error ) {\n\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\treturn;\n\t}\n\n\tlet allowHeader;\n\tif ( hasIn( response, [ 'headers', 'get' ] ) ) {\n\t\t// If the request is fetched using the fetch api, the header can be\n\t\t// retrieved using the 'get' method.\n\t\tallowHeader = response.headers.get( 'allow' );\n\t} else {\n\t\t// If the request was preloaded server-side and is returned by the\n\t\t// preloading middleware, the header will be a simple property.\n\t\tallowHeader = get( response, [ 'headers', 'Allow' ], '' );\n\t}\n\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\tconst isAllowed = includes( allowHeader, method );\n\tyield receiveUserPermission( key, isAllowed );\n}\n"]}