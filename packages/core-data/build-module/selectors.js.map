{"version":3,"sources":["@wordpress/core-data/src/selectors.js"],"names":["createSelector","map","find","get","filter","compact","defaultTo","createRegistrySelector","deprecated","REDUCER_KEY","getQueriedItems","isRequestingEmbedPreview","select","state","url","isResolving","getAuthors","getUserQueryResults","queryID","queryResults","users","queries","id","byId","getEntitiesByKind","kind","entities","config","getEntity","name","getEntityRecord","key","data","getEntityRecords","query","queriedState","getThemeSupports","themeSupports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","hasUploadPermissions","alternative","canUser","action","resource","join"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { map, find, get, filter, compact, defaultTo } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { REDUCER_KEY } from './name';\nimport { getQueriedItems } from './queried-data';\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param {Object} state Data state.\n * @param {string} url   URL the preview would be for.\n *\n * @return {boolean} Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector( ( select ) => ( state, url ) => {\n\treturn select( 'core/data' ).isResolving( REDUCER_KEY, 'getEmbedPreview', [ url ] );\n} );\n\n/**\n * Returns all available authors.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Authors list.\n */\nexport function getAuthors( state ) {\n\treturn getUserQueryResults( state, 'authors' );\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param {Object} state   Data state.\n * @param {string} queryID Query ID.\n *\n * @return {Array} Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state, queryID ) => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state, queryID ) => [ state.users.queries[ queryID ], state.users.byId ]\n);\n\n/**\n * Returns whether the entities for the give kind are loaded.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n *\n * @return {boolean} Whether the entities are loaded\n */\nexport function getEntitiesByKind( state, kind ) {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity object given its kind and name.\n *\n * @param {Object} state   Data state.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n *\n * @return {Object} Entity\n */\nexport function getEntity( state, kind, name ) {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * Returns the Entity's record object by key.\n *\n * @param {Object} state  State tree\n * @param {string} kind   Entity kind.\n * @param {string} name   Entity name.\n * @param {number} key    Record's key\n *\n * @return {Object?} Record.\n */\nexport function getEntityRecord( state, kind, name, key ) {\n\treturn get( state.entities.data, [ kind, name, 'items', key ] );\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param {Object}  state  State tree\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {?Object} query  Optional terms query.\n *\n * @return {Array} Records.\n */\nexport function getEntityRecords( state, kind, name, query ) {\n\tconst queriedState = get( state.entities.data, [ kind, name ] );\n\tif ( ! queriedState ) {\n\t\treturn [];\n\t}\n\treturn getQueriedItems( queriedState, query );\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param {Object} state Data state.\n *\n * @return {*}           Index data.\n */\nexport function getThemeSupports( state ) {\n\treturn state.themeSupports;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {*} Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state, url ) {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param {Object} state    Data state.\n * @param {string} url      Embedded URL.\n *\n * @return {booleans} Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state, url ) {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can upload media.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *             `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n *\n * @param {Object} state Data state.\n *\n * @return {boolean} Whether or not the user can upload media. Defaults to `true` if the OPTIONS\n *                   request is being made.\n */\nexport function hasUploadPermissions( state ) {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\treturn defaultTo( canUser( state, 'create', 'media' ), true );\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object}   state            Data state.\n * @param {string}   action           Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param {string}   resource         REST resource to check, e.g. 'media' or 'posts'.\n * @param {string=}  id               Optional ID of the rest resource to check.\n *\n * @return {boolean|undefined} Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser( state, action, resource, id ) {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n"]}