{"version":3,"sources":["@wordpress/core-data/src/queried-data/selectors.js"],"names":["createSelector","EquivalentKeyMap","getQueryParts","queriedItemsCacheByState","WeakMap","getQueriedItemsUncached","state","query","stableKey","page","perPage","queries","itemIds","startOffset","endOffset","length","Math","min","items","i","itemId","push","getQueriedItems","queriedItemsCache","get","queriedItems","undefined","set"],"mappings":"AAAA;;;AAGA,OAAOA,cAAP,MAA2B,QAA3B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA;;;;AAGA,OAAOC,aAAP,MAA0B,mBAA1B;AAEA;;;;;;;;AAOA,IAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;AAEA;;;;;;;;;AAQA,SAASC,uBAAT,CAAkCC,KAAlC,EAAyCC,KAAzC,EAAiD;AAAA,uBACXL,aAAa,CAAEK,KAAF,CADF;AAAA,MACxCC,SADwC,kBACxCA,SADwC;AAAA,MAC7BC,IAD6B,kBAC7BA,IAD6B;AAAA,MACvBC,OADuB,kBACvBA,OADuB;;AAGhD,MAAK,CAAEJ,KAAK,CAACK,OAAN,CAAeH,SAAf,CAAP,EAAoC;AACnC,WAAO,IAAP;AACA;;AAED,MAAMI,OAAO,GAAGN,KAAK,CAACK,OAAN,CAAeH,SAAf,CAAhB;;AACA,MAAK,CAAEI,OAAP,EAAiB;AAChB,WAAO,IAAP;AACA;;AAED,MAAMC,WAAW,GAAGH,OAAO,KAAK,CAAC,CAAb,GAAiB,CAAjB,GAAqB,CAAED,IAAI,GAAG,CAAT,IAAeC,OAAxD;AACA,MAAMI,SAAS,GAAGJ,OAAO,KAAK,CAAC,CAAb,GAAiBE,OAAO,CAACG,MAAzB,GAAkCC,IAAI,CAACC,GAAL,CACnDJ,WAAW,GAAGH,OADqC,EAEnDE,OAAO,CAACG,MAF2C,CAApD;AAKA,MAAMG,KAAK,GAAG,EAAd;;AACA,OAAM,IAAIC,CAAC,GAAGN,WAAd,EAA2BM,CAAC,GAAGL,SAA/B,EAA0CK,CAAC,EAA3C,EAAgD;AAC/C,QAAMC,MAAM,GAAGR,OAAO,CAAEO,CAAF,CAAtB;AACAD,IAAAA,KAAK,CAACG,IAAN,CAAYf,KAAK,CAACY,KAAN,CAAaE,MAAb,CAAZ;AACA;;AAED,SAAOF,KAAP;AACA;AAED;;;;;;;;;;;;;;;AAaA,OAAO,IAAMI,eAAe,GAAGtB,cAAc,CAAE,UAAEM,KAAF,EAAyB;AAAA,MAAhBC,KAAgB,uEAAR,EAAQ;AACvE,MAAIgB,iBAAiB,GAAGpB,wBAAwB,CAACqB,GAAzB,CAA8BlB,KAA9B,CAAxB;;AACA,MAAKiB,iBAAL,EAAyB;AACxB,QAAME,YAAY,GAAGF,iBAAiB,CAACC,GAAlB,CAAuBjB,KAAvB,CAArB;;AACA,QAAKkB,YAAY,KAAKC,SAAtB,EAAkC;AACjC,aAAOD,YAAP;AACA;AACD,GALD,MAKO;AACNF,IAAAA,iBAAiB,GAAG,IAAItB,gBAAJ,EAApB;AACAE,IAAAA,wBAAwB,CAACwB,GAAzB,CAA8BrB,KAA9B,EAAqCiB,iBAArC;AACA;;AAED,MAAML,KAAK,GAAGb,uBAAuB,CAAEC,KAAF,EAASC,KAAT,CAArC;AACAgB,EAAAA,iBAAiB,CAACI,GAAlB,CAAuBpB,KAAvB,EAA8BW,KAA9B;AACA,SAAOA,KAAP;AACA,CAf4C,CAAtC","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport EquivalentKeyMap from 'equivalent-key-map';\n\n/**\n * Internal dependencies\n */\nimport getQueryParts from './get-query-parts';\n\n/**\n * Cache of state keys to EquivalentKeyMap where the inner map tracks queries\n * to their resulting items set. WeakMap allows garbage collection on expired\n * state references.\n *\n * @type {WeakMap<Object,EquivalentKeyMap>}\n */\nconst queriedItemsCacheByState = new WeakMap();\n\n/**\n * Returns items for a given query, or null if the items are not known.\n *\n * @param {Object}  state State object.\n * @param {?Object} query Optional query.\n *\n * @return {?Array} Query items.\n */\nfunction getQueriedItemsUncached( state, query ) {\n\tconst { stableKey, page, perPage } = getQueryParts( query );\n\n\tif ( ! state.queries[ stableKey ] ) {\n\t\treturn null;\n\t}\n\n\tconst itemIds = state.queries[ stableKey ];\n\tif ( ! itemIds ) {\n\t\treturn null;\n\t}\n\n\tconst startOffset = perPage === -1 ? 0 : ( page - 1 ) * perPage;\n\tconst endOffset = perPage === -1 ? itemIds.length : Math.min(\n\t\tstartOffset + perPage,\n\t\titemIds.length\n\t);\n\n\tconst items = [];\n\tfor ( let i = startOffset; i < endOffset; i++ ) {\n\t\tconst itemId = itemIds[ i ];\n\t\titems.push( state.items[ itemId ] );\n\t}\n\n\treturn items;\n}\n\n/**\n * Returns items for a given query, or null if the items are not known. Caches\n * result both per state (by reference) and per query (by deep equality).\n * The caching approach is intended to be durable to query objects which are\n * deeply but not referentially equal, since otherwise:\n *\n * `getQueriedItems( state, {} ) !== getQueriedItems( state, {} )`\n *\n * @param {Object}  state State object.\n * @param {?Object} query Optional query.\n *\n * @return {?Array} Query items.\n */\nexport const getQueriedItems = createSelector( ( state, query = {} ) => {\n\tlet queriedItemsCache = queriedItemsCacheByState.get( state );\n\tif ( queriedItemsCache ) {\n\t\tconst queriedItems = queriedItemsCache.get( query );\n\t\tif ( queriedItems !== undefined ) {\n\t\t\treturn queriedItems;\n\t\t}\n\t} else {\n\t\tqueriedItemsCache = new EquivalentKeyMap();\n\t\tqueriedItemsCacheByState.set( state, queriedItemsCache );\n\t}\n\n\tconst items = getQueriedItemsUncached( state, query );\n\tqueriedItemsCache.set( query, items );\n\treturn items;\n} );\n"]}