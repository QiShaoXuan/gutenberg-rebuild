{"version":3,"sources":["@wordpress/data/src/index.js"],"names":["select","defaultRegistry","dispatch","subscribe","registerGenericStore","registerStore","use"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAKA;;AACA;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAlBA;;;;AAKA;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;;;;;;;;;;;AAgBO,IAAMA,MAAM,GAAGC,yBAAgBD,MAA/B;AAEP;;;;;;;;;;;;;;;;AAcO,IAAME,QAAQ,GAAGD,yBAAgBC,QAAjC;AAEP;;;;;;;;;;;;;;;;;;;;;;AAoBO,IAAMC,SAAS,GAAGF,yBAAgBE,SAAlC;AAEP;;;;;;;;AAMO,IAAMC,oBAAoB,GAAGH,yBAAgBG,oBAA7C;AAEP;;;;;;;;;;AAQO,IAAMC,aAAa,GAAGJ,yBAAgBI,aAAtC;;AACA,IAAMC,GAAG,GAAGL,yBAAgBK,GAA5B","sourcesContent":["/**\n * External dependencies\n */\nimport combineReducers from 'turbo-combine-reducers';\n\n/**\n * Internal dependencies\n */\nimport defaultRegistry from './default-registry';\nimport * as plugins from './plugins';\n\nexport { default as withSelect } from './components/with-select';\nexport { default as withDispatch } from './components/with-dispatch';\nexport { default as withRegistry } from './components/with-registry';\nexport { default as RegistryProvider, RegistryConsumer } from './components/registry-provider';\nexport { default as __experimentalAsyncModeProvider } from './components/async-mode-provider';\nexport { createRegistry } from './registry';\nexport { plugins };\nexport { createRegistrySelector, createRegistryControl } from './factory';\n\n/**\n * The combineReducers helper function turns an object whose values are different\n * reducing functions into a single reducing function you can pass to registerReducer.\n *\n * @param {Object} reducers An object whose values correspond to different reducing\n *                          functions that need to be combined into one.\n *\n * @example\n * ```js\n * const { combineReducers, registerStore } = wp.data;\n *\n * const prices = ( state = {}, action ) => {\n * \treturn action.type === 'SET_PRICE' ?\n * \t\t{\n * \t\t\t...state,\n * \t\t\t[ action.item ]: action.price,\n * \t\t} :\n * \t\tstate;\n * };\n *\n * const discountPercent = ( state = 0, action ) => {\n * \treturn action.type === 'START_SALE' ?\n * \t\taction.discountPercent :\n * \t\tstate;\n * };\n *\n * registerStore( 'my-shop', {\n * \treducer: combineReducers( {\n * \t\tprices,\n * \t\tdiscountPercent,\n * \t} ),\n * } );\n * ```\n *\n * @return {Function}       A reducer that invokes every reducer inside the reducers\n *                          object, and constructs a state object with the same shape.\n */\nexport { combineReducers };\n\n/**\n * Given the name of a registered store, returns an object of the store's selectors.\n * The selector functions are been pre-bound to pass the current state automatically.\n * As a consumer, you need only pass arguments of the selector, if applicable.\n *\n * @param {string} name Store name\n *\n * @example\n * ```js\n * const { select } = wp.data;\n *\n * select( 'my-shop' ).getPrice( 'hammer' );\n * ```\n *\n * @return {Object} Object containing the store's selectors.\n */\nexport const select = defaultRegistry.select;\n\n/**\n * Given the name of a registered store, returns an object of the store's action creators.\n * Calling an action creator will cause it to be dispatched, updating the state value accordingly.\n *\n * @param {string} name Store name\n *\n * @example\n * ```js\n * const { dispatch } = wp.data;\n *\n * dispatch( 'my-shop' ).setPrice( 'hammer', 9.75 );\n * ```\n * @return {Object} Object containing the action creators.\n */\nexport const dispatch = defaultRegistry.dispatch;\n\n/**\n * Given a listener function, the function will be called any time the state value\n * of one of the registered stores has changed. This function returns a `unsubscribe`\n * function used to stop the subscription.\n *\n * @param {Function} listener Callback function.\n *\n * @example\n * ```js\n * const { subscribe } = wp.data;\n *\n * const unsubscribe = subscribe( () => {\n * \t// You could use this opportunity to test whether the derived result of a\n * \t// selector has subsequently changed as the result of a state update.\n * } );\n *\n * // Later, if necessary...\n * unsubscribe();\n * ```\n */\nexport const subscribe = defaultRegistry.subscribe;\n\n/**\n* Registers a generic store.\n*\n* @param {string} key    Store registry key.\n* @param {Object} config Configuration (getSelectors, getActions, subscribe).\n*/\nexport const registerGenericStore = defaultRegistry.registerGenericStore;\n\n/**\n * Registers a standard `@wordpress/data` store.\n *\n * @param {string} reducerKey Reducer key.\n * @param {Object} options    Store description (reducer, actions, selectors, resolvers).\n *\n * @return {Object} Registered store object.\n */\nexport const registerStore = defaultRegistry.registerStore;\nexport const use = defaultRegistry.use;\n"]}