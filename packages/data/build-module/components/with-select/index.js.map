{"version":3,"sources":["@wordpress/data/src/components/with-select/index.js"],"names":["Component","isShallowEqualObjects","createHigherOrderComponent","createQueue","RegistryConsumer","AsyncModeConsumer","renderQueue","withSelect","mapSelectToProps","WrappedComponent","DEFAULT_MERGE_PROPS","getNextMergeProps","props","registry","select","ownProps","ComponentWithSelect","onStoreChange","bind","subscribe","mergeProps","canRunSelection","hasQueuedSelection","unsubscribe","flush","nextProps","nextState","hasRegistryChanged","hasSyncRenderingChanged","isAsync","hasPropsChanged","state","nextMergeProps","setState","add"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { isShallowEqualObjects } from '@wordpress/is-shallow-equal';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { createQueue } from '@wordpress/priority-queue';\n\n/**\n * Internal dependencies\n */\nimport { RegistryConsumer } from '../registry-provider';\nimport { AsyncModeConsumer } from '../async-mode-provider';\n\nconst renderQueue = createQueue();\n\n/**\n * Higher-order component used to inject state-derived props using registered\n * selectors.\n *\n * @param {Function} mapSelectToProps Function called on every state change,\n *                                   expected to return object of props to\n *                                   merge with the component's own props.\n *\n * @example\n * ```js\n * function PriceDisplay( { price, currency } ) {\n * \treturn new Intl.NumberFormat( 'en-US', {\n * \t\tstyle: 'currency',\n * \t\tcurrency,\n * \t} ).format( price );\n * }\n *\n * const { withSelect } = wp.data;\n *\n * const HammerPriceDisplay = withSelect( ( select, ownProps ) => {\n * \tconst { getPrice } = select( 'my-shop' );\n * \tconst { currency } = ownProps;\n *\n * \treturn {\n * \t\tprice: getPrice( 'hammer', currency ),\n * \t};\n * } )( PriceDisplay );\n *\n * // Rendered in the application:\n * //\n * //  <HammerPriceDisplay currency=\"USD\" />\n * ```\n * In the above example, when `HammerPriceDisplay` is rendered into an application, it will pass the price into the underlying `PriceDisplay` component and update automatically if the price of a hammer ever changes in the store.\n *\n * @return {Component} Enhanced component with merged state data props.\n */\nconst withSelect = ( mapSelectToProps ) => createHigherOrderComponent( ( WrappedComponent ) => {\n\t/**\n\t * Default merge props. A constant value is used as the fallback since it\n\t * can be more efficiently shallow compared in case component is repeatedly\n \t * rendered without its own merge props.\n\t *\n\t * @type {Object}\n\t */\n\tconst DEFAULT_MERGE_PROPS = {};\n\n\t/**\n\t * Given a props object, returns the next merge props by mapSelectToProps.\n\t *\n\t * @param {Object} props Props to pass as argument to mapSelectToProps.\n\t *\n\t * @return {Object} Props to merge into rendered wrapped element.\n\t */\n\tfunction getNextMergeProps( props ) {\n\t\treturn (\n\t\t\tmapSelectToProps( props.registry.select, props.ownProps, props.registry ) ||\n\t\t\tDEFAULT_MERGE_PROPS\n\t\t);\n\t}\n\n\tclass ComponentWithSelect extends Component {\n\t\tconstructor( props ) {\n\t\t\tsuper( props );\n\n\t\t\tthis.onStoreChange = this.onStoreChange.bind( this );\n\n\t\t\tthis.subscribe( props.registry );\n\n\t\t\tthis.mergeProps = getNextMergeProps( props );\n\t\t}\n\n\t\tcomponentDidMount() {\n\t\t\tthis.canRunSelection = true;\n\n\t\t\t// A state change may have occurred between the constructor and\n\t\t\t// mount of the component (e.g. during the wrapped component's own\n\t\t\t// constructor), in which case selection should be rerun.\n\t\t\tif ( this.hasQueuedSelection ) {\n\t\t\t\tthis.hasQueuedSelection = false;\n\t\t\t\tthis.onStoreChange();\n\t\t\t}\n\t\t}\n\n\t\tcomponentWillUnmount() {\n\t\t\tthis.canRunSelection = false;\n\t\t\tthis.unsubscribe();\n\t\t\trenderQueue.flush( this );\n\t\t}\n\n\t\tshouldComponentUpdate( nextProps, nextState ) {\n\t\t\t// Cycle subscription if registry changes.\n\t\t\tconst hasRegistryChanged = nextProps.registry !== this.props.registry;\n\t\t\tconst hasSyncRenderingChanged = nextProps.isAsync !== this.props.isAsync;\n\n\t\t\tif ( hasRegistryChanged ) {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.subscribe( nextProps.registry );\n\t\t\t}\n\n\t\t\tif ( hasSyncRenderingChanged ) {\n\t\t\t\trenderQueue.flush( this );\n\t\t\t}\n\n\t\t\t// Treat a registry change as equivalent to `ownProps`, to reflect\n\t\t\t// `mergeProps` to rendered component if and only if updated.\n\t\t\tconst hasPropsChanged = (\n\t\t\t\thasRegistryChanged ||\n\t\t\t\t! isShallowEqualObjects( this.props.ownProps, nextProps.ownProps )\n\t\t\t);\n\n\t\t\t// Only render if props have changed or merge props have been updated\n\t\t\t// from the store subscriber.\n\t\t\tif ( this.state === nextState && ! hasPropsChanged && ! hasSyncRenderingChanged ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( hasPropsChanged || hasSyncRenderingChanged ) {\n\t\t\t\tconst nextMergeProps = getNextMergeProps( nextProps );\n\t\t\t\tif ( ! isShallowEqualObjects( this.mergeProps, nextMergeProps ) ) {\n\t\t\t\t\t// If merge props change as a result of the incoming props,\n\t\t\t\t\t// they should be reflected as such in the upcoming render.\n\t\t\t\t\t// While side effects are discouraged in lifecycle methods,\n\t\t\t\t\t// this component is used heavily, and prior efforts to use\n\t\t\t\t\t// `getDerivedStateFromProps` had demonstrated miserable\n\t\t\t\t\t// performance.\n\t\t\t\t\tthis.mergeProps = nextMergeProps;\n\t\t\t\t}\n\n\t\t\t\t// Regardless whether merge props are changing, fall through to\n\t\t\t\t// incur the render since the component will need to receive\n\t\t\t\t// the changed `ownProps`.\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tonStoreChange() {\n\t\t\tif ( ! this.canRunSelection ) {\n\t\t\t\tthis.hasQueuedSelection = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextMergeProps = getNextMergeProps( this.props );\n\t\t\tif ( isShallowEqualObjects( this.mergeProps, nextMergeProps ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.mergeProps = nextMergeProps;\n\n\t\t\t// Schedule an update. Merge props are not assigned to state since\n\t\t\t// derivation of merge props from incoming props occurs within\n\t\t\t// shouldComponentUpdate, where setState is not allowed. setState\n\t\t\t// is used here instead of forceUpdate because forceUpdate bypasses\n\t\t\t// shouldComponentUpdate altogether, which isn't desireable if both\n\t\t\t// state and props change within the same render. Unfortunately,\n\t\t\t// this requires that next merge props are generated twice.\n\t\t\tthis.setState( {} );\n\t\t}\n\n\t\tsubscribe( registry ) {\n\t\t\tthis.unsubscribe = registry.subscribe( () => {\n\t\t\t\tif ( this.props.isAsync ) {\n\t\t\t\t\trenderQueue.add( this, this.onStoreChange );\n\t\t\t\t} else {\n\t\t\t\t\tthis.onStoreChange();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\trender() {\n\t\t\treturn <WrappedComponent { ...this.props.ownProps } { ...this.mergeProps } />;\n\t\t}\n\t}\n\n\treturn ( ownProps ) => (\n\t\t<AsyncModeConsumer>\n\t\t\t{ ( isAsync ) => (\n\t\t\t\t<RegistryConsumer>\n\t\t\t\t\t{ ( registry ) => (\n\t\t\t\t\t\t<ComponentWithSelect\n\t\t\t\t\t\t\townProps={ ownProps }\n\t\t\t\t\t\t\tregistry={ registry }\n\t\t\t\t\t\t\tisAsync={ isAsync }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</RegistryConsumer>\n\t\t\t) }\n\t\t</AsyncModeConsumer>\n\t);\n}, 'withSelect' );\n\nexport default withSelect;\n"]}