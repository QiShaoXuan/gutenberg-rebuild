{"version":3,"sources":["@wordpress/block-editor/src/utils/dom.js"],"names":["getBlockDOMNode","clientId","document","querySelector","getBlockFocusableWrapper","closest","isBlockFocusStop","element","classList","contains","isInSameBlock","a","b","isInsideRootBlock","blockElement","innerBlocksContainer","hasInnerBlocksContext"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;AASO,SAASA,eAAT,CAA0BC,QAA1B,EAAqC;AAC3C,SAAOC,QAAQ,CAACC,aAAT,CAAwB,kBAAkBF,QAAlB,GAA6B,IAArD,CAAP;AACA;AAED;;;;;;;;;;;;AAUO,SAASG,wBAAT,CAAmCH,QAAnC,EAA8C;AACpD,SAAOD,eAAe,CAAEC,QAAF,CAAf,CAA4BI,OAA5B,CAAqC,iCAArC,CAAP;AACA;AAED;;;;;;;;;;AAQO,SAASC,gBAAT,CAA2BC,OAA3B,EAAqC;AAC3C,SAAOA,OAAO,CAACC,SAAR,CAAkBC,QAAlB,CAA4B,gCAA5B,CAAP;AACA;AAED;;;;;;;;;;AAQO,SAASC,aAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA+B;AACrC,SAAOD,CAAC,CAACN,OAAF,CAAW,cAAX,MAAgCO,CAAC,CAACP,OAAF,CAAW,cAAX,CAAvC;AACA;AAED;;;;;;;;;;AAQO,SAASQ,iBAAT,CAA4BC,YAA5B,EAA0CP,OAA1C,EAAoD;AAC1D,MAAMQ,oBAAoB,GAAGD,YAAY,CAACX,aAAb,CAA4B,kCAA5B,CAA7B;AACA,SAAOW,YAAY,CAACL,QAAb,CAAuBF,OAAvB,MACN,CAAEQ,oBAAF,IAA0B,CAAEA,oBAAoB,CAACN,QAArB,CAA+BF,OAA/B,CADtB,CAAP;AAGA;AAED;;;;;;;;;;AAQO,SAASS,qBAAT,CAAgCT,OAAhC,EAA0C;AAChD,SAAO,CAAC,CAAEA,OAAO,CAACJ,aAAR,CAAuB,kCAAvB,CAAV;AACA","sourcesContent":["/**\n * Given a block client ID, returns the corresponding DOM node for the block,\n * if exists. As much as possible, this helper should be avoided, and used only\n * in cases where isolated behaviors need remote access to a block node.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Element} Block DOM node.\n */\nexport function getBlockDOMNode( clientId ) {\n\treturn document.querySelector( '[data-block=\"' + clientId + '\"]' );\n}\n\n/**\n * Given a block client ID, returns the corresponding DOM node for the block\n * focusable wrapper, if exists. As much as possible, this helper should be\n * avoided, and used only in cases where isolated behaviors need remote access\n * to a block node.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Element} Block DOM node.\n */\nexport function getBlockFocusableWrapper( clientId ) {\n\treturn getBlockDOMNode( clientId ).closest( '.block-editor-block-list__block' );\n}\n\n/**\n * Returns true if the given HTMLElement is a block focus stop. Blocks without\n * their own text fields rely on the focus stop to be keyboard navigable.\n *\n * @param {HTMLElement} element Element to test.\n *\n * @return {boolean} Whether element is a block focus stop.\n */\nexport function isBlockFocusStop( element ) {\n\treturn element.classList.contains( 'block-editor-block-list__block' );\n}\n\n/**\n * Returns true if two elements are contained within the same block.\n *\n * @param {HTMLElement} a First element.\n * @param {HTMLElement} b Second element.\n *\n * @return {boolean} Whether elements are in the same block.\n */\nexport function isInSameBlock( a, b ) {\n\treturn a.closest( '[data-block]' ) === b.closest( '[data-block]' );\n}\n\n/**\n * Returns true if an elements is considered part of the block and not its children.\n *\n * @param {HTMLElement} blockElement Block container element.\n * @param {HTMLElement} element      Element.\n *\n * @return {boolean} Whether element is in the block Element but not its children.\n */\nexport function isInsideRootBlock( blockElement, element ) {\n\tconst innerBlocksContainer = blockElement.querySelector( '.block-editor-block-list__layout' );\n\treturn blockElement.contains( element ) && (\n\t\t! innerBlocksContainer || ! innerBlocksContainer.contains( element )\n\t);\n}\n\n/**\n * Returns true if the given HTMLElement contains inner blocks (an InnerBlocks\n * element).\n *\n * @param {HTMLElement} element Element to test.\n *\n * @return {boolean} Whether element contains inner blocks.\n */\nexport function hasInnerBlocksContext( element ) {\n\treturn !! element.querySelector( '.block-editor-block-list__layout' );\n}\n"]}