{"version":3,"sources":["@wordpress/block-editor/src/store/reducer.js"],"names":["mapBlockOrder","blocks","rootClientId","result","forEach","block","clientId","innerBlocks","push","Object","assign","flattenBlocks","transform","stack","length","shift","getFlattenedBlocksWithoutAttributes","getFlattenedBlockAttributes","attributes","getNestedBlockClientIds","blocksOrder","getMutateSafeObject","original","working","hasSameKeys","a","b","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","withPersistentBlockChange","reducer","IGNORED_ACTION_TYPES","Set","state","nextState","isExplicitPersistentChange","isPersistentChange","isIgnoredActionType","has","withInnerBlocksRemoveCascade","clientIds","i","order","withBlockReset","visibleClientIds","byClientId","withReplaceInnerBlocks","stateAfterBlocksRemoval","stateAfterInsert","index","withSaveReusableBlock","id","updatedId","name","ref","combineReducers","changes","updates","nextAttributes","value","key","subState","mappedBlocks","fromRootClientId","toRootClientId","fromIndex","indexOf","firstClientId","firstIndex","lastClientId","without","isTyping","isCaretWithinFormattedText","blockSelection","start","end","isMultiSelecting","isEnabled","initialPosition","updateSelection","lastBlock","nextSelectedBlockClientId","isSelectionEnabled","blocksMode","insertionPoint","template","isValid","settings","SETTINGS_DEFAULTS","preferences","PREFERENCES_DEFAULTS","reduce","prevState","insert","insertUsage","time","count","blockListSettings","hasOwnProperty"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tflow,\n\treduce,\n\tfirst,\n\tlast,\n\tomit,\n\twithout,\n\tmapValues,\n\tkeys,\n\tisEqual,\n\tisEmpty,\n\tget,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\nimport { isReusableBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport {\n\tPREFERENCES_DEFAULTS,\n\tSETTINGS_DEFAULTS,\n} from './defaults';\nimport { insertAt, moveTo } from './array';\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = { [ rootClientId ]: [] };\n\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\n\t\tresult[ rootClientId ].push( clientId );\n\n\t\tObject.assign( result, mapBlockOrder( innerBlocks, clientId ) );\n\t} );\n\n\treturn result;\n}\n\n/**\n * Helper method to iterate through all blocks, recursing into inner blocks,\n * applying a transformation function to each one.\n * Returns a flattened object with the transformed blocks.\n *\n * @param {Array} blocks Blocks to flatten.\n * @param {Function} transform Transforming function to be applied to each block.\n *\n * @return {Object} Flattened object.\n */\nfunction flattenBlocks( blocks, transform ) {\n\tconst result = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult[ block.clientId ] = transform( block );\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, without\n * attributes, recursing into inner blocks. Keys correspond to the block client\n * ID, the value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => omit( block, 'attributes' ) );\n}\n\n/**\n * Given an array of blocks, returns an object containing all block attributes,\n * recursing into inner blocks. Keys correspond to the block client ID, the\n * value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlockAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\n}\n\n/**\n * Given a block order map object, returns *all* of the block client IDs that are\n * a descendant of the given root client ID.\n *\n * Calling this with `rootClientId` set to `''` results in a list of client IDs\n * that are in the post. That is, it excludes blocks like fetched reusable\n * blocks which are stored into state but not visible.\n *\n * @param {Object}  blocksOrder  Object that maps block client IDs to a list of\n *                               nested block client IDs.\n * @param {?string} rootClientId The root client ID to search. Defaults to ''.\n *\n * @return {Array} List of descendant client IDs.\n */\nfunction getNestedBlockClientIds( blocksOrder, rootClientId = '' ) {\n\treturn reduce( blocksOrder[ rootClientId ], ( result, clientId ) => [\n\t\t...result,\n\t\tclientId,\n\t\t...getNestedBlockClientIds( blocksOrder, clientId ),\n\t], [] );\n}\n\n/**\n * Returns an object against which it is safe to perform mutating operations,\n * given the original object and its current working copy.\n *\n * @param {Object} original Original object.\n * @param {Object} working  Working object.\n *\n * @return {Object} Mutation-safe object.\n */\nfunction getMutateSafeObject( original, working ) {\n\tif ( original === working ) {\n\t\treturn { ...original };\n\t}\n\n\treturn working;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( keys( a ), keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action     Currently dispatching action.\n * @param {Object} lastAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tlastAction !== undefined &&\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\taction.clientId === lastAction.clientId &&\n\t\thasSameKeys( action.attributes, lastAction.attributes )\n\t);\n}\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isPersistentChange` property value corresponding to whether a change in\n * state can be considered as persistent. All changes are considered persistent\n * except when updating the same block attribute as in the previous action.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withPersistentBlockChange( reducer ) {\n\tlet lastAction;\n\n\t/**\n\t * Set of action types for which a blocks state change should be considered\n\t * non-persistent.\n\t *\n\t * @type {Set}\n\t */\n\tconst IGNORED_ACTION_TYPES = new Set( [\n\t\t'RECEIVE_BLOCKS',\n\t] );\n\n\treturn ( state, action ) => {\n\t\tlet nextState = reducer( state, action );\n\n\t\tconst isExplicitPersistentChange = action.type === 'MARK_LAST_CHANGE_AS_PERSISTENT';\n\n\t\t// Defer to previous state value (or default) unless changing or\n\t\t// explicitly marking as persistent.\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: get( state, [ 'isPersistentChange' ], true ),\n\t\t\t};\n\t\t}\n\n\t\t// Some state changes should not be considered persistent, namely those\n\t\t// which are not a direct result of user interaction.\n\t\tconst isIgnoredActionType = IGNORED_ACTION_TYPES.has( action.type );\n\t\tif ( isIgnoredActionType ) {\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: false,\n\t\t\t};\n\t\t}\n\n\t\tnextState = {\n\t\t\t...nextState,\n\t\t\tisPersistentChange: (\n\t\t\t\tisExplicitPersistentChange ||\n\t\t\t\t! isUpdatingSameBlockAttribute( action, lastAction )\n\t\t\t),\n\t\t};\n\n\t\t// In comparing against the previous action, consider only those which\n\t\t// would have qualified as one which would have been ignored or not\n\t\t// have resulted in a changed state.\n\t\tlastAction = action;\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer targeting the combined blocks reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'REMOVE_BLOCKS' ) {\n\t\tconst clientIds = [ ...action.clientIds ];\n\n\t\t// For each removed client ID, include its inner blocks to remove,\n\t\t// recursing into those so long as inner blocks exist.\n\t\tfor ( let i = 0; i < clientIds.length; i++ ) {\n\t\t\tclientIds.push( ...state.order[ clientIds[ i ] ] );\n\t\t}\n\n\t\taction = { ...action, clientIds };\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\n * reusable blocks) alone.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockReset = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'RESET_BLOCKS' ) {\n\t\tconst visibleClientIds = getNestedBlockClientIds( state.order );\n\t\treturn {\n\t\t\t...state,\n\t\t\tbyClientId: {\n\t\t\t\t...omit( state.byClientId, visibleClientIds ),\n\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t},\n\t\t\tattributes: {\n\t\t\t\t...omit( state.attributes, visibleClientIds ),\n\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t},\n\t\t\torder: {\n\t\t\t\t...omit( state.order, visibleClientIds ),\n\t\t\t\t...mapBlockOrder( action.blocks ),\n\t\t\t},\n\t\t};\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state should become equivalent\n * to the execution of a `REMOVE_BLOCKS` action containing all the child's of the root block followed by\n * the execution of `INSERT_BLOCKS` with the new blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\n\t\treturn reducer( state, action );\n\t}\n\tlet stateAfterBlocksRemoval = state;\n\tif ( state.order[ action.rootClientId ] ) {\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\n\t\t\ttype: 'REMOVE_BLOCKS',\n\t\t\tclientIds: state.order[ action.rootClientId ],\n\t\t} );\n\t}\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\n\tif ( action.blocks.length ) {\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\n\t\t\t...action,\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tindex: 0,\n\t\t} );\n\t}\n\treturn stateAfterInsert;\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\n * regular reducers and needs a higher-order reducer since it needs access to\n * both `byClientId` and `attributes` simultaneously.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\n\t\tconst { id, updatedId } = action;\n\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\tif ( id === updatedId ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate = { ...state };\n\n\t\tstate.attributes = mapValues( state.attributes, ( attributes, clientId ) => {\n\t\t\tconst { name } = state.byClientId[ clientId ];\n\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\n\t\t\t\treturn {\n\t\t\t\t\t...attributes,\n\t\t\t\t\tref: updatedId,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn attributes;\n\t\t} );\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Reducer returning the blocks state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @returns {Object} Updated state.\n */\nexport const blocks = flow(\n\tcombineReducers,\n\twithInnerBlocksRemoveCascade,\n\twithReplaceInnerBlocks, // needs to be after withInnerBlocksRemoveCascade\n\twithBlockReset,\n\twithSaveReusableBlock,\n\twithPersistentBlockChange,\n)( {\n\tbyClientId( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlocksWithoutAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Do nothing if only attributes change.\n\t\t\t\tconst changes = omit( action.updates, 'attributes' );\n\t\t\t\tif ( isEmpty( changes ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...changes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.clientIds ),\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tattributes( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlockAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\n\t\t\t\tif ( ! state[ action.clientId ] || ! action.updates.attributes ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...action.updates.attributes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Consider as updates only changed values\n\t\t\t\tconst nextAttributes = reduce( action.attributes, ( result, value, key ) => {\n\t\t\t\t\tif ( value !== result[ key ] ) {\n\t\t\t\t\t\tresult = getMutateSafeObject( state[ action.clientId ], result );\n\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t}, state[ action.clientId ] );\n\n\t\t\t\t// Skip update if nothing has been changed. The reference will\n\t\t\t\t// match the original block if `reduce` had no changed values.\n\t\t\t\tif ( nextAttributes === state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise replace attributes in state\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: nextAttributes,\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.clientIds ),\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\torder( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn mapBlockOrder( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...omit( mapBlockOrder( action.blocks ), '' ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst { rootClientId = '' } = action;\n\t\t\t\tconst subState = state[ rootClientId ] || [];\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks, rootClientId );\n\t\t\t\tconst { index = subState.length } = action;\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mappedBlocks,\n\t\t\t\t\t[ rootClientId ]: insertAt( subState, mappedBlocks[ rootClientId ], index ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCK_TO_POSITION': {\n\t\t\t\tconst { fromRootClientId = '', toRootClientId = '', clientId } = action;\n\t\t\t\tconst { index = state[ toRootClientId ].length } = action;\n\n\t\t\t\t// Moving inside the same parent block\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\tconst subState = state[ toRootClientId ];\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientId );\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ toRootClientId ]: moveTo( state[ toRootClientId ], fromIndex, index ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Moving from a parent block to another\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ fromRootClientId ]: without( state[ fromRootClientId ], clientId ),\n\t\t\t\t\t[ toRootClientId ]: insertAt( state[ toRootClientId ], clientId, index ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif ( ! subState.length || firstClientId === first( subState ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo( subState, firstIndex, firstIndex - 1, clientIds.length ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst lastClientId = last( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif ( ! subState.length || lastClientId === last( subState ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo( subState, firstIndex, firstIndex + 1, clientIds.length ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS': {\n\t\t\t\tconst { clientIds } = action;\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\n\n\t\t\t\treturn flow( [\n\t\t\t\t\t( nextState ) => omit( nextState, clientIds ),\n\t\t\t\t\t( nextState ) => ( {\n\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\t...omit( mappedBlocks, '' ),\n\t\t\t\t\t} ),\n\t\t\t\t\t( nextState ) => mapValues( nextState, ( subState ) => (\n\t\t\t\t\t\treduce( subState, ( result, clientId ) => {\n\t\t\t\t\t\t\tif ( clientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t...mappedBlocks[ '' ],\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( clientIds.indexOf( clientId ) === -1 ) {\n\t\t\t\t\t\t\t\tresult.push( clientId );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}, [] )\n\t\t\t\t\t) ),\n\t\t\t\t] )( state );\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\treturn flow( [\n\t\t\t\t\t// Remove inner block ordering for removed blocks\n\t\t\t\t\t( nextState ) => omit( nextState, action.clientIds ),\n\n\t\t\t\t\t// Remove deleted blocks from other blocks' orderings\n\t\t\t\t\t( nextState ) => mapValues( nextState, ( subState ) => (\n\t\t\t\t\t\twithout( subState, ...action.clientIds )\n\t\t\t\t\t) ),\n\t\t\t\t] )( state );\n\t\t}\n\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the caret is within formatted text.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isCaretWithinFormattedText( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENTER_FORMATTED_TEXT':\n\t\t\treturn true;\n\n\t\tcase 'EXIT_FORMATTED_TEXT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block selection's state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function blockSelection( state = {\n\tstart: null,\n\tend: null,\n\tisMultiSelecting: false,\n\tisEnabled: true,\n\tinitialPosition: null,\n}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK':\n\t\t\tif ( state.start === null && state.end === null && ! state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: null,\n\t\t\t\tend: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'START_MULTI_SELECT':\n\t\t\tif ( state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: true,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\tif ( ! state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.start,\n\t\t\t\tend: action.end,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.start && action.clientId === state.end ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.clientId,\n\t\t\t\tend: action.clientId,\n\t\t\t\tinitialPosition: action.initialPosition,\n\t\t\t};\n\t\tcase 'REPLACE_INNER_BLOCKS': // REPLACE_INNER_BLOCKS and INSERT_BLOCKS should follow the same logic.\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( action.updateSelection ) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tstart: action.blocks[ 0 ].clientId,\n\t\t\t\t\tend: action.blocks[ 0 ].clientId,\n\t\t\t\t\tinitialPosition: null,\n\t\t\t\t\tisMultiSelecting: false,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn state;\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif ( ! action.clientIds || ! action.clientIds.length || action.clientIds.indexOf( state.start ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: null,\n\t\t\t\tend: null,\n\t\t\t\tinitialPosition: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t};\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\tif ( action.clientIds.indexOf( state.start ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// If there are replacement blocks, assign last block as the next\n\t\t\t// selected block, otherwise set to null.\n\t\t\tconst lastBlock = last( action.blocks );\n\t\t\tconst nextSelectedBlockClientId = lastBlock ? lastBlock.clientId : null;\n\n\t\t\tif ( nextSelectedBlockClientId === state.start && nextSelectedBlockClientId === state.end ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: nextSelectedBlockClientId,\n\t\t\t\tend: nextSelectedBlockClientId,\n\t\t\t\tinitialPosition: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t};\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisEnabled: action.isSelectionEnabled,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]: state[ clientId ] && state[ clientId ] === 'html' ? 'visual' : 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT':\n\t\t\tconst { rootClientId, index } = action;\n\t\t\treturn { rootClientId, index };\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object}  state                 Current state.\n * @param {Object}  action                Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tlet id = block.name;\n\t\t\t\tconst insert = { name: block.name };\n\t\t\t\tif ( isReusableBlock( block ) ) {\n\t\t\t\t\tinsert.ref = block.attributes.ref;\n\t\t\t\t\tid += '/' + block.attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ] ? prevState.insertUsage[ id ].count + 1 : 1,\n\t\t\t\t\t\t\tinsert,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS' :\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\treturn omit( state, clientId );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( isEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\nexport default combineReducers( {\n\tblocks,\n\tisTyping,\n\tisCaretWithinFormattedText,\n\tblockSelection,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\ttemplate,\n\tsettings,\n\tpreferences,\n} );\n"]}