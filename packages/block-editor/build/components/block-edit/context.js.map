{"version":3,"sources":["@wordpress/block-editor/src/components/block-edit/context.js"],"names":["name","isSelected","focusedElement","setFocusedElement","noop","clientId","Consumer","Provider","withBlockEditContext","mapContextToProps","OriginalComponent","props","context","ifBlockEditSelected"],"mappings":";;;;;;;;;AAQA;;;;AALA;;AAMA;;AATA;;;;AAKA;;;qBAM+B,4BAAe;AAC7CA,EAAAA,IAAI,EAAE,EADuC;AAE7CC,EAAAA,UAAU,EAAE,KAFiC;AAG7CC,EAAAA,cAAc,EAAE,IAH6B;AAI7CC,EAAAA,iBAAiB,EAAEC,YAJ0B;AAK7CC,EAAAA,QAAQ,EAAE;AALmC,CAAf,C;IAAvBC,Q,kBAAAA,Q;IAAUC,Q,kBAAAA,Q;;;;AAUlB;;;;;;;;;;AAUO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAEC,iBAAF;AAAA,SAAyB,yCAA4B,UAAEC,iBAAF,EAAyB;AACjH,WAAO,UAAEC,KAAF;AAAA,aACN,4BAAC,QAAD,QACG,UAAEC,OAAF;AAAA,eACD,4BAAC,iBAAD,6BACMD,KADN,EAEMF,iBAAiB,CAAEG,OAAF,EAAWD,KAAX,CAFvB,EADC;AAAA,OADH,CADM;AAAA,KAAP;AAUA,GAX4D,EAW1D,sBAX0D,CAAzB;AAAA,CAA7B;AAaP;;;;;;;;;;;AAQO,IAAME,mBAAmB,GAAG,yCAA4B,UAAEH,iBAAF,EAAyB;AACvF,SAAO,UAAEC,KAAF;AAAA,WACN,4BAAC,QAAD,QACG;AAAA,UAAIV,UAAJ,QAAIA,UAAJ;AAAA,aAAsBA,UAAU,IACjC,4BAAC,iBAAD,EAAwBU,KAAxB,CADC;AAAA,KADH,CADM;AAAA,GAAP;AAOA,CARkC,EAQhC,qBARgC,CAA5B","sourcesContent":["/**\n * External dependencies\n */\nimport { noop } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createContext } from '@wordpress/element';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\nconst { Consumer, Provider } = createContext( {\n\tname: '',\n\tisSelected: false,\n\tfocusedElement: null,\n\tsetFocusedElement: noop,\n\tclientId: null,\n} );\n\nexport { Provider as BlockEditContextProvider };\n\n/**\n * A Higher Order Component used to inject BlockEdit context to the\n * wrapped component.\n *\n * @param {Function} mapContextToProps Function called on every context change,\n *                                     expected to return object of props to\n *                                     merge with the component's own props.\n *\n * @return {Component} Enhanced component with injected context as props.\n */\nexport const withBlockEditContext = ( mapContextToProps ) => createHigherOrderComponent( ( OriginalComponent ) => {\n\treturn ( props ) => (\n\t\t<Consumer>\n\t\t\t{ ( context ) => (\n\t\t\t\t<OriginalComponent\n\t\t\t\t\t{ ...props }\n\t\t\t\t\t{ ...mapContextToProps( context, props ) }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</Consumer>\n\t);\n}, 'withBlockEditContext' );\n\n/**\n * A Higher Order Component used to render conditionally the wrapped\n * component only when the BlockEdit has selected state set.\n *\n * @param {Component} OriginalComponent Component to wrap.\n *\n * @return {Component} Component which renders only when the BlockEdit is selected.\n */\nexport const ifBlockEditSelected = createHigherOrderComponent( ( OriginalComponent ) => {\n\treturn ( props ) => (\n\t\t<Consumer>\n\t\t\t{ ( { isSelected } ) => isSelected && (\n\t\t\t\t<OriginalComponent { ...props } />\n\t\t\t) }\n\t\t</Consumer>\n\t);\n}, 'ifBlockEditSelected' );\n"]}