{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/patterns.js"],"names":["getPatterns","onReplace","valueToFormat","prefixTransforms","filter","type","record","start","text","characterBefore","slice","test","trimmedTextBefore","trim","transformation","prefix","content","length","block","transform","BACKTICK","textBefore","indexBefore","lastIndexOf","startIndex","endIndex"],"mappings":";;;;;;;AAGA;;AACA;;AAJA;;;AAYO,SAASA,WAAT,OAAqD;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,aAAkB,QAAlBA,aAAkB;AAC3D,MAAMC,gBAAgB,GAAG,gCAAoB,MAApB,EACvBC,MADuB,CACf;AAAA,QAAIC,IAAJ,SAAIA,IAAJ;AAAA,WAAgBA,IAAI,KAAK,QAAzB;AAAA,GADe,CAAzB;AAGA,SAAO,CACN,UAAEC,MAAF,EAAc;AACb,QAAK,CAAEL,SAAP,EAAmB;AAClB,aAAOK,MAAP;AACA;;AAED,QAAMC,KAAK,GAAG,iCAAmBD,MAAnB,CAAd;AACA,QAAME,IAAI,GAAG,8BAAgBF,MAAhB,CAAb;AACA,QAAMG,eAAe,GAAGD,IAAI,CAACE,KAAL,CAAYH,KAAK,GAAG,CAApB,EAAuBA,KAAvB,CAAxB;;AAEA,QAAK,CAAE,KAAKI,IAAL,CAAWF,eAAX,CAAP,EAAsC;AACrC,aAAOH,MAAP;AACA;;AAED,QAAMM,iBAAiB,GAAGJ,IAAI,CAACE,KAAL,CAAY,CAAZ,EAAeH,KAAf,EAAuBM,IAAvB,EAA1B;AACA,QAAMC,cAAc,GAAG,2BAAeX,gBAAf,EAAiC,iBAAkB;AAAA,UAAdY,MAAc,SAAdA,MAAc;AACzE,aAAOH,iBAAiB,KAAKG,MAA7B;AACA,KAFsB,CAAvB;;AAIA,QAAK,CAAED,cAAP,EAAwB;AACvB,aAAOR,MAAP;AACA;;AAED,QAAMU,OAAO,GAAGd,aAAa,CAAE,qBAAOI,MAAP,EAAeC,KAAf,EAAsBC,IAAI,CAACS,MAA3B,CAAF,CAA7B;AACA,QAAMC,KAAK,GAAGJ,cAAc,CAACK,SAAf,CAA0BH,OAA1B,CAAd;AAEAf,IAAAA,SAAS,CAAE,CAAEiB,KAAF,CAAF,CAAT;AAEA,WAAOZ,MAAP;AACA,GA7BK,EA8BN,UAAEA,MAAF,EAAc;AACb,QAAMc,QAAQ,GAAG,GAAjB;AACA,QAAMb,KAAK,GAAG,iCAAmBD,MAAnB,CAAd;AACA,QAAME,IAAI,GAAG,8BAAgBF,MAAhB,CAAb;AACA,QAAMG,eAAe,GAAGD,IAAI,CAACE,KAAL,CAAYH,KAAK,GAAG,CAApB,EAAuBA,KAAvB,CAAxB,CAJa,CAMb;;AACA,QAAKE,eAAe,KAAKW,QAAzB,EAAoC;AACnC,aAAOd,MAAP;AACA;;AAED,QAAMe,UAAU,GAAGb,IAAI,CAACE,KAAL,CAAY,CAAZ,EAAeH,KAAK,GAAG,CAAvB,CAAnB;AACA,QAAMe,WAAW,GAAGD,UAAU,CAACE,WAAX,CAAwBH,QAAxB,CAApB;;AAEA,QAAKE,WAAW,KAAK,CAAC,CAAtB,EAA0B;AACzB,aAAOhB,MAAP;AACA;;AAED,QAAMkB,UAAU,GAAGF,WAAnB;AACA,QAAMG,QAAQ,GAAGlB,KAAK,GAAG,CAAzB;;AAEA,QAAKiB,UAAU,KAAKC,QAApB,EAA+B;AAC9B,aAAOnB,MAAP;AACA;;AAEDA,IAAAA,MAAM,GAAG,sBAAQA,MAAR,EAAgBkB,UAAhB,EAA4BA,UAAU,GAAG,CAAzC,CAAT;AACAlB,IAAAA,MAAM,GAAG,sBAAQA,MAAR,EAAgBmB,QAAhB,EAA0BA,QAAQ,GAAG,CAArC,CAAT;AACAnB,IAAAA,MAAM,GAAG,2BAAaA,MAAb,EAAqB;AAAED,MAAAA,IAAI,EAAE;AAAR,KAArB,EAAuCmB,UAAvC,EAAmDC,QAAnD,CAAT;AAEA,WAAOnB,MAAP;AACA,GA5DK,CAAP;AA8DA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { getBlockTransforms, findTransform } from '@wordpress/blocks';\nimport {\n\tremove,\n\tapplyFormat,\n\tgetTextContent,\n\tgetSelectionStart,\n\tslice,\n} from '@wordpress/rich-text';\n\nexport function getPatterns( { onReplace, valueToFormat } ) {\n\tconst prefixTransforms = getBlockTransforms( 'from' )\n\t\t.filter( ( { type } ) => type === 'prefix' );\n\n\treturn [\n\t\t( record ) => {\n\t\t\tif ( ! onReplace ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst start = getSelectionStart( record );\n\t\t\tconst text = getTextContent( record );\n\t\t\tconst characterBefore = text.slice( start - 1, start );\n\n\t\t\tif ( ! /\\s/.test( characterBefore ) ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst trimmedTextBefore = text.slice( 0, start ).trim();\n\t\t\tconst transformation = findTransform( prefixTransforms, ( { prefix } ) => {\n\t\t\t\treturn trimmedTextBefore === prefix;\n\t\t\t} );\n\n\t\t\tif ( ! transformation ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst content = valueToFormat( slice( record, start, text.length ) );\n\t\t\tconst block = transformation.transform( content );\n\n\t\t\tonReplace( [ block ] );\n\n\t\t\treturn record;\n\t\t},\n\t\t( record ) => {\n\t\t\tconst BACKTICK = '`';\n\t\t\tconst start = getSelectionStart( record );\n\t\t\tconst text = getTextContent( record );\n\t\t\tconst characterBefore = text.slice( start - 1, start );\n\n\t\t\t// Quick check the text for the necessary character.\n\t\t\tif ( characterBefore !== BACKTICK ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst textBefore = text.slice( 0, start - 1 );\n\t\t\tconst indexBefore = textBefore.lastIndexOf( BACKTICK );\n\n\t\t\tif ( indexBefore === -1 ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst startIndex = indexBefore;\n\t\t\tconst endIndex = start - 2;\n\n\t\t\tif ( startIndex === endIndex ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\trecord = remove( record, startIndex, startIndex + 1 );\n\t\t\trecord = remove( record, endIndex, endIndex + 1 );\n\t\t\trecord = applyFormat( record, { type: 'code' }, startIndex, endIndex );\n\n\t\t\treturn record;\n\t\t},\n\t];\n}\n"]}