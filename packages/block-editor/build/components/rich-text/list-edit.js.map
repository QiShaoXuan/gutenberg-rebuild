{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/list-edit.js"],"names":["window","Node","TEXT_NODE","ELEMENT_NODE","getSelectedListNode","selection","getSelection","rangeCount","getRangeAt","startContainer","nodeType","parentNode","rootNode","closest","contains","isListRootSelected","listNode","contentEditable","isActiveListType","tagName","rootTagName","nodeName","toLowerCase","ListEdit","onTagNameChange","value","onChange","type","icon","title","isActive","onClick","shortcut","filter","Boolean"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport { Toolbar } from '@wordpress/components';\nimport { __, _x } from '@wordpress/i18n';\nimport { Fragment } from '@wordpress/element';\nimport {\n\tindentListItems,\n\toutdentListItems,\n\tchangeListType,\n} from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\n\nimport { RichTextShortcut } from './shortcut';\nimport BlockFormatControls from '../block-format-controls';\n\nconst { TEXT_NODE, ELEMENT_NODE } = window.Node;\n\n/**\n * Gets the selected list node, which is the closest list node to the start of\n * the selection.\n *\n * @return {?Element} The selected list node, or undefined if none is selected.\n */\nfunction getSelectedListNode() {\n\tconst selection = window.getSelection();\n\n\tif ( selection.rangeCount === 0 ) {\n\t\treturn;\n\t}\n\n\tlet { startContainer } = selection.getRangeAt( 0 );\n\n\tif ( startContainer.nodeType === TEXT_NODE ) {\n\t\tstartContainer = startContainer.parentNode;\n\t}\n\n\tif ( startContainer.nodeType !== ELEMENT_NODE ) {\n\t\treturn;\n\t}\n\n\tconst rootNode = startContainer.closest( '*[contenteditable]' );\n\n\tif ( ! rootNode || ! rootNode.contains( startContainer ) ) {\n\t\treturn;\n\t}\n\n\treturn startContainer.closest( 'ol,ul' );\n}\n\n/**\n * Whether or not the root list is selected.\n *\n * @return {boolean} True if the root list or nothing is selected, false if an\n *                   inner list is selected.\n */\nfunction isListRootSelected() {\n\tconst listNode = getSelectedListNode();\n\n\t// Consider the root list selected if nothing is selected.\n\treturn ! listNode || listNode.contentEditable === 'true';\n}\n\n/**\n * Wether or not the selected list has the given tag name.\n *\n * @param {string}  tagName     The tag name the list should have.\n * @param {string}  rootTagName The current root tag name, to compare with in\n *                              case nothing is selected.\n *\n * @return {boolean}             [description]\n */\nfunction isActiveListType( tagName, rootTagName ) {\n\tconst listNode = getSelectedListNode();\n\n\tif ( ! listNode ) {\n\t\treturn tagName === rootTagName;\n\t}\n\n\treturn listNode.nodeName.toLowerCase() === tagName;\n}\n\nexport const ListEdit = ( {\n\tonTagNameChange,\n\ttagName,\n\tvalue,\n\tonChange,\n} ) => (\n\t<Fragment>\n\t\t<RichTextShortcut\n\t\t\ttype=\"primary\"\n\t\t\tcharacter=\"[\"\n\t\t\tonUse={ () => {\n\t\t\t\tonChange( outdentListItems( value ) );\n\t\t\t} }\n\t\t/>\n\t\t<RichTextShortcut\n\t\t\ttype=\"primary\"\n\t\t\tcharacter=\"]\"\n\t\t\tonUse={ () => {\n\t\t\t\tonChange( indentListItems( value, { type: tagName } ) );\n\t\t\t} }\n\t\t/>\n\t\t<RichTextShortcut\n\t\t\ttype=\"primary\"\n\t\t\tcharacter=\"m\"\n\t\t\tonUse={ () => {\n\t\t\t\tonChange( indentListItems( value, { type: tagName } ) );\n\t\t\t} }\n\t\t/>\n\t\t<RichTextShortcut\n\t\t\ttype=\"primaryShift\"\n\t\t\tcharacter=\"m\"\n\t\t\tonUse={ () => {\n\t\t\t\tonChange( outdentListItems( value ) );\n\t\t\t} }\n\t\t/>\n\t\t<BlockFormatControls>\n\t\t\t<Toolbar\n\t\t\t\tcontrols={ [\n\t\t\t\t\tonTagNameChange && {\n\t\t\t\t\t\ticon: 'editor-ul',\n\t\t\t\t\t\ttitle: __( 'Convert to unordered list' ),\n\t\t\t\t\t\tisActive: isActiveListType( 'ul', tagName ),\n\t\t\t\t\t\tonClick() {\n\t\t\t\t\t\t\tonChange( changeListType( value, { type: 'ul' } ) );\n\n\t\t\t\t\t\t\tif ( isListRootSelected() ) {\n\t\t\t\t\t\t\t\tonTagNameChange( 'ul' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tonTagNameChange && {\n\t\t\t\t\t\ticon: 'editor-ol',\n\t\t\t\t\t\ttitle: __( 'Convert to ordered list' ),\n\t\t\t\t\t\tisActive: isActiveListType( 'ol', tagName ),\n\t\t\t\t\t\tonClick() {\n\t\t\t\t\t\t\tonChange( changeListType( value, { type: 'ol' } ) );\n\n\t\t\t\t\t\t\tif ( isListRootSelected() ) {\n\t\t\t\t\t\t\t\tonTagNameChange( 'ol' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ticon: 'editor-outdent',\n\t\t\t\t\t\ttitle: __( 'Outdent list item' ),\n\t\t\t\t\t\tshortcut: _x( 'Backspace', 'keyboard key' ),\n\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\tonChange( outdentListItems( value ) );\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ticon: 'editor-indent',\n\t\t\t\t\t\ttitle: __( 'Indent list item' ),\n\t\t\t\t\t\tshortcut: _x( 'Space', 'keyboard key' ),\n\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\tonChange( indentListItems( value, { type: tagName } ) );\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t].filter( Boolean ) }\n\t\t\t/>\n\t\t</BlockFormatControls>\n\t</Fragment>\n);\n"]}