{"version":3,"sources":["@wordpress/block-editor/src/components/observe-typing/index.js"],"names":["KEY_DOWN_ELIGIBLE_KEY_CODES","UP","RIGHT","DOWN","LEFT","ENTER","BACKSPACE","isKeyDownEligibleForStartTyping","event","keyCode","shiftKey","ObserveTyping","arguments","stopTypingOnSelectionUncollapse","bind","stopTypingOnMouseMove","startTypingInTextField","stopTypingOnNonTextField","stopTypingOnEscapeKey","onKeyDown","lastMouseMove","toggleEventBindings","props","isTyping","prevProps","isBound","bindFn","document","clientX","clientY","lastClientX","lastClientY","onStopTyping","selection","window","getSelection","isCollapsed","rangeCount","getRangeAt","collapsed","ESCAPE","onStartTyping","type","target","closest","persist","setTimeout","children","Component","select","dispatch","startTyping","stopTyping","withSafeTimeout"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { over, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { isTextField } from '@wordpress/dom';\nimport {\n\tUP,\n\tRIGHT,\n\tDOWN,\n\tLEFT,\n\tENTER,\n\tBACKSPACE,\n\tESCAPE,\n} from '@wordpress/keycodes';\nimport { withSafeTimeout, compose } from '@wordpress/compose';\n\n/**\n * Set of key codes upon which typing is to be initiated on a keydown event.\n *\n * @type {number[]}\n */\nconst KEY_DOWN_ELIGIBLE_KEY_CODES = [ UP, RIGHT, DOWN, LEFT, ENTER, BACKSPACE ];\n\n/**\n * Returns true if a given keydown event can be inferred as intent to start\n * typing, or false otherwise. A keydown is considered eligible if it is a\n * text navigation without shift active.\n *\n * @param {KeyboardEvent} event Keydown event to test.\n *\n * @return {boolean} Whether event is eligible to start typing.\n */\nfunction isKeyDownEligibleForStartTyping( event ) {\n\tconst { keyCode, shiftKey } = event;\n\treturn ! shiftKey && includes( KEY_DOWN_ELIGIBLE_KEY_CODES, keyCode );\n}\n\nclass ObserveTyping extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.stopTypingOnSelectionUncollapse = this.stopTypingOnSelectionUncollapse.bind( this );\n\t\tthis.stopTypingOnMouseMove = this.stopTypingOnMouseMove.bind( this );\n\t\tthis.startTypingInTextField = this.startTypingInTextField.bind( this );\n\t\tthis.stopTypingOnNonTextField = this.stopTypingOnNonTextField.bind( this );\n\t\tthis.stopTypingOnEscapeKey = this.stopTypingOnEscapeKey.bind( this );\n\n\t\tthis.onKeyDown = over( [\n\t\t\tthis.startTypingInTextField,\n\t\t\tthis.stopTypingOnEscapeKey,\n\t\t] );\n\n\t\tthis.lastMouseMove = null;\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.toggleEventBindings( this.props.isTyping );\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tif ( this.props.isTyping !== prevProps.isTyping ) {\n\t\t\tthis.toggleEventBindings( this.props.isTyping );\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.toggleEventBindings( false );\n\t}\n\n\t/**\n\t * Bind or unbind events to the document when typing has started or stopped\n\t * respectively, or when component has become unmounted.\n\t *\n\t * @param {boolean} isBound Whether event bindings should be applied.\n\t */\n\ttoggleEventBindings( isBound ) {\n\t\tconst bindFn = isBound ? 'addEventListener' : 'removeEventListener';\n\t\tdocument[ bindFn ]( 'selectionchange', this.stopTypingOnSelectionUncollapse );\n\t\tdocument[ bindFn ]( 'mousemove', this.stopTypingOnMouseMove );\n\t}\n\n\t/**\n\t * On mouse move, unset typing flag if user has moved cursor.\n\t *\n\t * @param {MouseEvent} event Mousemove event.\n\t */\n\tstopTypingOnMouseMove( event ) {\n\t\tconst { clientX, clientY } = event;\n\n\t\t// We need to check that the mouse really moved because Safari triggers\n\t\t// mousemove events when shift or ctrl are pressed.\n\t\tif ( this.lastMouseMove ) {\n\t\t\tconst {\n\t\t\t\tclientX: lastClientX,\n\t\t\t\tclientY: lastClientY,\n\t\t\t} = this.lastMouseMove;\n\n\t\t\tif ( lastClientX !== clientX || lastClientY !== clientY ) {\n\t\t\t\tthis.props.onStopTyping();\n\t\t\t}\n\t\t}\n\n\t\tthis.lastMouseMove = { clientX, clientY };\n\t}\n\n\t/**\n\t * On selection change, unset typing flag if user has made an uncollapsed\n\t * (shift) selection.\n\t */\n\tstopTypingOnSelectionUncollapse() {\n\t\tconst selection = window.getSelection();\n\t\tconst isCollapsed = selection.rangeCount > 0 && selection.getRangeAt( 0 ).collapsed;\n\n\t\tif ( ! isCollapsed ) {\n\t\t\tthis.props.onStopTyping();\n\t\t}\n\t}\n\n\t/**\n\t * Unsets typing flag if user presses Escape while typing flag is active.\n\t *\n\t * @param {KeyboardEvent} event Keypress or keydown event to interpret.\n\t */\n\tstopTypingOnEscapeKey( event ) {\n\t\tif ( this.props.isTyping && event.keyCode === ESCAPE ) {\n\t\t\tthis.props.onStopTyping();\n\t\t}\n\t}\n\n\t/**\n\t * Handles a keypress or keydown event to infer intention to start typing.\n\t *\n\t * @param {KeyboardEvent} event Keypress or keydown event to interpret.\n\t */\n\tstartTypingInTextField( event ) {\n\t\tconst { isTyping, onStartTyping } = this.props;\n\t\tconst { type, target } = event;\n\n\t\t// Abort early if already typing, or key press is incurred outside a\n\t\t// text field (e.g. arrow-ing through toolbar buttons).\n\t\t// Ignore typing in a block toolbar\n\t\tif ( isTyping || ! isTextField( target ) || target.closest( '.block-editor-block-toolbar' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Special-case keydown because certain keys do not emit a keypress\n\t\t// event. Conversely avoid keydown as the canonical event since there\n\t\t// are many keydown which are explicitly not targeted for typing.\n\t\tif ( type === 'keydown' && ! isKeyDownEligibleForStartTyping( event ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tonStartTyping();\n\t}\n\n\t/**\n\t * Stops typing when focus transitions to a non-text field element.\n\t *\n\t * @param {FocusEvent} event Focus event.\n\t */\n\tstopTypingOnNonTextField( event ) {\n\t\tevent.persist();\n\n\t\t// Since focus to a non-text field via arrow key will trigger before\n\t\t// the keydown event, wait until after current stack before evaluating\n\t\t// whether typing is to be stopped. Otherwise, typing will re-start.\n\t\tthis.props.setTimeout( () => {\n\t\t\tconst { isTyping, onStopTyping } = this.props;\n\t\t\tconst { target } = event;\n\t\t\tif ( isTyping && ! isTextField( target ) ) {\n\t\t\t\tonStopTyping();\n\t\t\t}\n\t\t} );\n\t}\n\n\trender() {\n\t\tconst { children } = this.props;\n\n\t\t// Disable reason: This component is responsible for capturing bubbled\n\t\t// keyboard events which are interpreted as typing intent.\n\n\t\t/* eslint-disable jsx-a11y/no-static-element-interactions */\n\t\treturn (\n\t\t\t<div\n\t\t\t\tonFocus={ this.stopTypingOnNonTextField }\n\t\t\t\tonKeyPress={ this.startTypingInTextField }\n\t\t\t\tonKeyDown={ this.onKeyDown }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</div>\n\t\t);\n\t\t/* eslint-enable jsx-a11y/no-static-element-interactions */\n\t}\n}\n\nexport default compose( [\n\twithSelect( ( select ) => {\n\t\tconst { isTyping } = select( 'core/block-editor' );\n\n\t\treturn {\n\t\t\tisTyping: isTyping(),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { startTyping, stopTyping } = dispatch( 'core/block-editor' );\n\n\t\treturn {\n\t\t\tonStartTyping: startTyping,\n\t\t\tonStopTyping: stopTyping,\n\t\t};\n\t} ),\n\twithSafeTimeout,\n] )( ObserveTyping );\n"]}