{"version":3,"sources":["@wordpress/block-editor/src/components/colors/utils.js"],"names":["getColorObjectByAttributeValues","colors","definedColor","customColor","colorObj","slug","color","getColorObjectByColorValue","colorValue","getColorClassName","colorContextName","colorSlug","getMostReadableColor","tinycolor","mostReadable","toHexString"],"mappings":";;;;;;;;;;;AAGA;;AACA;;AAJA;;;;AAMA;;;;;;;;;;;;AAYO,IAAMA,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAEC,MAAF,EAAUC,YAAV,EAAwBC,WAAxB,EAAyC;AACvF,MAAKD,YAAL,EAAoB;AACnB,QAAME,QAAQ,GAAG,kBAAMH,MAAN,EAAc;AAAEI,MAAAA,IAAI,EAAEH;AAAR,KAAd,CAAjB;;AAEA,QAAKE,QAAL,EAAgB;AACf,aAAOA,QAAP;AACA;AACD;;AACD,SAAO;AACNE,IAAAA,KAAK,EAAEH;AADD,GAAP;AAGA,CAXM;AAaP;;;;;;;;;;;;;AASO,IAAMI,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAEN,MAAF,EAAUO,UAAV,EAA0B;AACnE,SAAO,kBAAMP,MAAN,EAAc;AAAEK,IAAAA,KAAK,EAAEE;AAAT,GAAd,CAAP;AACA,CAFM;AAIP;;;;;;;;;;;;AAQO,SAASC,iBAAT,CAA4BC,gBAA5B,EAA8CC,SAA9C,EAA0D;AAChE,MAAK,CAAED,gBAAF,IAAsB,CAAEC,SAA7B,EAAyC;AACxC;AACA;;AAED,uBAAe,uBAAWA,SAAX,CAAf,cAA2CD,gBAA3C;AACA;AAED;;;;;;;;;;AAQO,SAASE,oBAAT,CAA+BX,MAA/B,EAAuCO,UAAvC,EAAoD;AAC1D,SAAOK,mBAAUC,YAAV,CACNN,UADM,EAEN,iBAAKP,MAAL,EAAa,OAAb,CAFM,EAGLc,WAHK,EAAP;AAIA","sourcesContent":["/**\n * External dependencies\n */\nimport { find, kebabCase, map } from 'lodash';\nimport tinycolor from 'tinycolor2';\n\n/**\n * Provided an array of color objects as set by the theme or by the editor defaults,\n * and the values of the defined color or custom color returns a color object describing the color.\n *\n * @param {Array}   colors       Array of color objects as set by the theme or by the editor defaults.\n * @param {?string} definedColor A string containing the color slug.\n * @param {?string} customColor  A string containing the customColor value.\n *\n * @return {?string} If definedColor is passed and the name is found in colors,\n *                   the color object exactly as set by the theme or editor defaults is returned.\n *                   Otherwise, an object that just sets the color is defined.\n */\nexport const getColorObjectByAttributeValues = ( colors, definedColor, customColor ) => {\n\tif ( definedColor ) {\n\t\tconst colorObj = find( colors, { slug: definedColor } );\n\n\t\tif ( colorObj ) {\n\t\t\treturn colorObj;\n\t\t}\n\t}\n\treturn {\n\t\tcolor: customColor,\n\t};\n};\n\n/**\n* Provided an array of color objects as set by the theme or by the editor defaults, and a color value returns the color object matching that value or undefined.\n*\n* @param {Array}   colors      Array of color objects as set by the theme or by the editor defaults.\n* @param {?string} colorValue  A string containing the color value.\n*\n* @return {?string} Returns the color object included in the colors array whose color property equals colorValue.\n*                   Returns undefined if no color object matches this requirement.\n*/\nexport const getColorObjectByColorValue = ( colors, colorValue ) => {\n\treturn find( colors, { color: colorValue } );\n};\n\n/**\n * Returns a class based on the context a color is being used and its slug.\n *\n * @param {string} colorContextName Context/place where color is being used e.g: background, text etc...\n * @param {string} colorSlug        Slug of the color.\n *\n * @return {string} String with the class corresponding to the color in the provided context.\n */\nexport function getColorClassName( colorContextName, colorSlug ) {\n\tif ( ! colorContextName || ! colorSlug ) {\n\t\treturn;\n\t}\n\n\treturn `has-${ kebabCase( colorSlug ) }-${ colorContextName }`;\n}\n\n/**\n* Given an array of color objects and a color value returns the color value of the most readable color in the array.\n*\n* @param {Array}   colors     Array of color objects as set by the theme or by the editor defaults.\n* @param {?string} colorValue A string containing the color value.\n*\n* @return {string} String with the color value of the most readable color.\n*/\nexport function getMostReadableColor( colors, colorValue ) {\n\treturn tinycolor.mostReadable(\n\t\tcolorValue,\n\t\tmap( colors, 'color' )\n\t).toHexString();\n}\n"]}