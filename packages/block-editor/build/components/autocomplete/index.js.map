{"version":3,"sources":["@wordpress/block-editor/src/components/autocomplete/index.js"],"names":["completersFallback","withFilteredAutocompleters","Autocomplete","state","completers","saveParentRef","bind","onFocus","hasFocus","parentNode","contains","document","activeElement","hasStaleCompleters","updateCompletersState","lastFilteredCompletersProp","props","blockName","nextCompleters","map","clone","setState","autocompleteProps","Component","name","OriginalAutocomplete"],"mappings":";;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;AANA;;AAKA;;AAEA;;AACA;;AAKA;;AAhBA;;;;AAKA;;;;AAQA;;;;AAKA;;;;AAIA,IAAMA,kBAAkB,GAAG,EAA3B;AAEA;;;;;;;;;;;;;;AAaO,SAASC,0BAAT,CAAqCC,YAArC,EAAoD;AAC1D;AAAA;AAAA;AAAA;;AACC,sCAAc;AAAA;;AAAA;AACb;AAEA,cAAKC,KAAL,GAAa;AAAEC,UAAAA,UAAU,EAAEJ;AAAd,SAAb;AAEA,cAAKK,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,mFAArB;AACA,cAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaD,IAAb,mFAAf;AANa;AAOb;;AARF;AAAA;AAAA,6CAUsB;AACpB,cAAME,QAAQ,GAAG,KAAKC,UAAL,CAAgBC,QAAhB,CAA0BC,QAAQ,CAACC,aAAnC,CAAjB;AAEA;;;;;;;;AAOA,cAAKJ,QAAQ,IAAI,KAAKK,kBAAL,EAAjB,EAA6C;AAC5C,iBAAKC,qBAAL;AACA;AACD;AAvBF;AAAA;AAAA,kCAyBW;AACT,cAAK,KAAKD,kBAAL,EAAL,EAAiC;AAChC,iBAAKC,qBAAL;AACA;AACD;AA7BF;AAAA;AAAA,6CA+BsB;AACpB,iBACC,EAAI,gCAAgC,KAAKX,KAAzC,KACA,KAAKA,KAAL,CAAWY,0BAAX,KAA0C,KAAKC,KAAL,CAAWZ,UAFtD;AAIA;AApCF;AAAA;AAAA,gDAsCyB;AAAA,4BACW,KAAKY,KADhB;AAAA,cACfC,SADe,eACfA,SADe;AAAA,cACJb,UADI,eACJA,UADI;AAEvB,cAAIc,cAAc,GAAGd,UAArB;AACA,cAAMW,0BAA0B,GAAGG,cAAnC;;AAEA,cAAK,sBAAW,gCAAX,CAAL,EAAqD;AACpDA,YAAAA,cAAc,GAAG,yBAChB,gCADgB,EAEhB;AACAA,YAAAA,cAAc,IAAIA,cAAc,CAACC,GAAf,CAAoBC,aAApB,CAHF,EAIhBH,SAJgB,CAAjB;AAMA;;AAED,eAAKI,QAAL,CAAe;AACdN,YAAAA,0BAA0B,EAA1BA,0BADc;AAEdX,YAAAA,UAAU,EAAEc,cAAc,IAAIlB;AAFhB,WAAf;AAIA;AAxDF;AAAA;AAAA,sCA0DgBS,UA1DhB,EA0D6B;AAC3B,eAAKA,UAAL,GAAkBA,UAAlB;AACA;AA5DF;AAAA;AAAA,iCA8DU;AAAA,cACAL,UADA,GACe,KAAKD,KADpB,CACAC,UADA;AAER,cAAMkB,iBAAiB,mCACnB,KAAKN,KADc;AAEtBZ,YAAAA,UAAU,EAAVA;AAFsB,YAAvB;AAKA,iBACC;AAAK,YAAA,OAAO,EAAG,KAAKG,OAApB;AAA8B,YAAA,GAAG,EAAG,KAAKF;AAAzC,aACC,4BAAC,YAAD;AAAc,YAAA,OAAO,EAAG,KAAKE;AAA7B,aAA4Ce,iBAA5C,EADD,CADD;AAKA;AA1EF;AAAA;AAAA,MAA0CC,kBAA1C;AAAA;AA4EA;;eAEc,sBAAS,CACvB,mCAAsB,gBAAgB;AAAA,MAAZC,IAAY,QAAZA,IAAY;AACrC,SAAO;AACNP,IAAAA,SAAS,EAAEO;AADL,GAAP;AAGA,CAJD,CADuB,EAMvBvB,0BANuB,CAAT,EAOVwB,wBAPU,C","sourcesContent":["/**\n * External dependencies\n */\nimport { clone } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters, hasFilter } from '@wordpress/hooks';\nimport { Component } from '@wordpress/element';\nimport { compose } from '@wordpress/compose';\nimport { Autocomplete as OriginalAutocomplete } from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport { withBlockEditContext } from '../block-edit/context';\n\n/*\n * Use one array instance for fallback rather than inline array literals\n * because the latter may cause rerender due to failed prop equality checks.\n */\nconst completersFallback = [];\n\n/**\n * Wrap the default Autocomplete component with one that\n * supports a filter hook for customizing its list of autocompleters.\n *\n * Since there may be many Autocomplete instances at one time, this component\n * applies the filter on demand, when the component is first focused after\n * receiving a new list of completers.\n *\n * This function is exported for unit test.\n *\n * @param  {Function} Autocomplete Original component.\n * @return {Function}              Wrapped component\n */\nexport function withFilteredAutocompleters( Autocomplete ) {\n\treturn class FilteredAutocomplete extends Component {\n\t\tconstructor() {\n\t\t\tsuper();\n\n\t\t\tthis.state = { completers: completersFallback };\n\n\t\t\tthis.saveParentRef = this.saveParentRef.bind( this );\n\t\t\tthis.onFocus = this.onFocus.bind( this );\n\t\t}\n\n\t\tcomponentDidUpdate() {\n\t\t\tconst hasFocus = this.parentNode.contains( document.activeElement );\n\n\t\t\t/*\n\t\t\t * It's possible for props to be updated when the component has focus,\n\t\t\t * so here, we ensure new completers are immediately applied while we\n\t\t\t * have the focus.\n\t\t\t *\n\t\t\t * NOTE: This may trigger another render but only when the component has focus.\n\t\t\t */\n\t\t\tif ( hasFocus && this.hasStaleCompleters() ) {\n\t\t\t\tthis.updateCompletersState();\n\t\t\t}\n\t\t}\n\n\t\tonFocus() {\n\t\t\tif ( this.hasStaleCompleters() ) {\n\t\t\t\tthis.updateCompletersState();\n\t\t\t}\n\t\t}\n\n\t\thasStaleCompleters() {\n\t\t\treturn (\n\t\t\t\t! ( 'lastFilteredCompletersProp' in this.state ) ||\n\t\t\t\tthis.state.lastFilteredCompletersProp !== this.props.completers\n\t\t\t);\n\t\t}\n\n\t\tupdateCompletersState() {\n\t\t\tconst { blockName, completers } = this.props;\n\t\t\tlet nextCompleters = completers;\n\t\t\tconst lastFilteredCompletersProp = nextCompleters;\n\n\t\t\tif ( hasFilter( 'editor.Autocomplete.completers' ) ) {\n\t\t\t\tnextCompleters = applyFilters(\n\t\t\t\t\t'editor.Autocomplete.completers',\n\t\t\t\t\t// Provide copies so filters may directly modify them.\n\t\t\t\t\tnextCompleters && nextCompleters.map( clone ),\n\t\t\t\t\tblockName,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.setState( {\n\t\t\t\tlastFilteredCompletersProp,\n\t\t\t\tcompleters: nextCompleters || completersFallback,\n\t\t\t} );\n\t\t}\n\n\t\tsaveParentRef( parentNode ) {\n\t\t\tthis.parentNode = parentNode;\n\t\t}\n\n\t\trender() {\n\t\t\tconst { completers } = this.state;\n\t\t\tconst autocompleteProps = {\n\t\t\t\t...this.props,\n\t\t\t\tcompleters,\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<div onFocus={ this.onFocus } ref={ this.saveParentRef }>\n\t\t\t\t\t<Autocomplete onFocus={ this.onFocus } { ...autocompleteProps } />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t};\n}\n\nexport default compose( [\n\twithBlockEditContext( ( { name } ) => {\n\t\treturn {\n\t\t\tblockName: name,\n\t\t};\n\t} ),\n\twithFilteredAutocompleters,\n] )( OriginalAutocomplete );\n"]}