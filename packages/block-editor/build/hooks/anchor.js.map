{"version":3,"sources":["@wordpress/block-editor/src/hooks/anchor.js"],"names":["ANCHOR_REGEX","addAttribute","settings","attributes","anchor","type","source","attribute","selector","withInspectorControl","BlockEdit","props","hasAnchor","name","isSelected","nextValue","replace","setAttributes","addSaveProps","extraProps","blockType","id"],"mappings":";;;;;;;;;AAQA;;AALA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AAKA;;AAlBA;;;;AAKA;;;;AAUA;;;;AAKA;;;;;AAKA,IAAMA,YAAY,GAAG,QAArB;AAEA;;;;;;;;;AAQO,SAASC,YAAT,CAAuBC,QAAvB,EAAkC;AACxC,MAAK,6BAAiBA,QAAjB,EAA2B,QAA3B,CAAL,EAA6C;AAC5C;AACAA,IAAAA,QAAQ,CAACC,UAAT,GAAsB,oBAAQD,QAAQ,CAACC,UAAjB,EAA6B;AAClDC,MAAAA,MAAM,EAAE;AACPC,QAAAA,IAAI,EAAE,QADC;AAEPC,QAAAA,MAAM,EAAE,WAFD;AAGPC,QAAAA,SAAS,EAAE,IAHJ;AAIPC,QAAAA,QAAQ,EAAE;AAJH;AAD0C,KAA7B,CAAtB;AAQA;;AAED,SAAON,QAAP;AACA;AAED;;;;;;;;;;AAQO,IAAMO,oBAAoB,GAAG,yCAA4B,UAAEC,SAAF,EAAiB;AAChF,SAAO,UAAEC,KAAF,EAAa;AACnB,QAAMC,SAAS,GAAG,6BAAiBD,KAAK,CAACE,IAAvB,EAA6B,QAA7B,CAAlB;;AAEA,QAAKD,SAAS,IAAID,KAAK,CAACG,UAAxB,EAAqC;AACpC,aACC,4BAAC,iBAAD,QACC,4BAAC,SAAD,EAAgBH,KAAhB,CADD,EAEC,4BAAC,sCAAD,QACC,4BAAC,uBAAD;AACC,QAAA,KAAK,EAAG,cAAI,aAAJ,CADT;AAEC,QAAA,IAAI,EAAG,cAAI,wDAAJ,CAFR;AAGC,QAAA,KAAK,EAAGA,KAAK,CAACR,UAAN,CAAiBC,MAAjB,IAA2B,EAHpC;AAIC,QAAA,QAAQ,EAAG,kBAAEW,SAAF,EAAiB;AAC3BA,UAAAA,SAAS,GAAGA,SAAS,CAACC,OAAV,CAAmBhB,YAAnB,EAAiC,GAAjC,CAAZ;AACAW,UAAAA,KAAK,CAACM,aAAN,CAAqB;AACpBb,YAAAA,MAAM,EAAEW;AADY,WAArB;AAGA;AATF,QADD,CAFD,CADD;AAiBA;;AAED,WAAO,4BAAC,SAAD,EAAgBJ,KAAhB,CAAP;AACA,GAxBD;AAyBA,CA1BmC,EA0BjC,sBA1BiC,CAA7B;AA4BP;;;;;;;;;;;;;;AAWO,SAASO,YAAT,CAAuBC,UAAvB,EAAmCC,SAAnC,EAA8CjB,UAA9C,EAA2D;AACjE,MAAK,6BAAiBiB,SAAjB,EAA4B,QAA5B,CAAL,EAA8C;AAC7CD,IAAAA,UAAU,CAACE,EAAX,GAAgBlB,UAAU,CAACC,MAAX,KAAsB,EAAtB,GAA2B,IAA3B,GAAkCD,UAAU,CAACC,MAA7D;AACA;;AAED,SAAOe,UAAP;AACA;;AAED,sBAAW,0BAAX,EAAuC,uBAAvC,EAAgElB,YAAhE;AACA,sBAAW,kBAAX,EAA+B,2CAA/B,EAA4EQ,oBAA5E;AACA,sBAAW,kCAAX,EAA+C,wBAA/C,EAAyES,YAAzE","sourcesContent":["/**\n * External dependencies\n */\nimport { assign } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Fragment } from '@wordpress/element';\nimport { addFilter } from '@wordpress/hooks';\nimport { TextControl } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { hasBlockSupport } from '@wordpress/blocks';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { InspectorAdvancedControls } from '../components';\n\n/**\n * Regular expression matching invalid anchor characters for replacement.\n *\n * @type {RegExp}\n */\nconst ANCHOR_REGEX = /[\\s#]/g;\n\n/**\n * Filters registered block settings, extending attributes with anchor using ID\n * of the first node.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nexport function addAttribute( settings ) {\n\tif ( hasBlockSupport( settings, 'anchor' ) ) {\n\t\t// Use Lodash's assign to gracefully handle if attributes are undefined\n\t\tsettings.attributes = assign( settings.attributes, {\n\t\t\tanchor: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'attribute',\n\t\t\t\tattribute: 'id',\n\t\t\t\tselector: '*',\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override the default edit UI to include a new block inspector control for\n * assigning the anchor ID, if block supports anchor.\n *\n * @param {function|Component} BlockEdit Original component.\n *\n * @return {string} Wrapped component.\n */\nexport const withInspectorControl = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\tconst hasAnchor = hasBlockSupport( props.name, 'anchor' );\n\n\t\tif ( hasAnchor && props.isSelected ) {\n\t\t\treturn (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<BlockEdit { ...props } />\n\t\t\t\t\t<InspectorAdvancedControls>\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={ __( 'HTML Anchor' ) }\n\t\t\t\t\t\t\thelp={ __( 'Anchors lets you link directly to a section on a page.' ) }\n\t\t\t\t\t\t\tvalue={ props.attributes.anchor || '' }\n\t\t\t\t\t\t\tonChange={ ( nextValue ) => {\n\t\t\t\t\t\t\t\tnextValue = nextValue.replace( ANCHOR_REGEX, '-' );\n\t\t\t\t\t\t\t\tprops.setAttributes( {\n\t\t\t\t\t\t\t\t\tanchor: nextValue,\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} } />\n\t\t\t\t\t</InspectorAdvancedControls>\n\t\t\t\t</Fragment>\n\t\t\t);\n\t\t}\n\n\t\treturn <BlockEdit { ...props } />;\n\t};\n}, 'withInspectorControl' );\n\n/**\n * Override props assigned to save component to inject anchor ID, if block\n * supports anchor. This is only applied if the block's save result is an\n * element and not a markup string.\n *\n * @param {Object} extraProps Additional props applied to save element.\n * @param {Object} blockType  Block type.\n * @param {Object} attributes Current block attributes.\n *\n * @return {Object} Filtered props applied to save element.\n */\nexport function addSaveProps( extraProps, blockType, attributes ) {\n\tif ( hasBlockSupport( blockType, 'anchor' ) ) {\n\t\textraProps.id = attributes.anchor === '' ? null : attributes.anchor;\n\t}\n\n\treturn extraProps;\n}\n\naddFilter( 'blocks.registerBlockType', 'core/anchor/attribute', addAttribute );\naddFilter( 'editor.BlockEdit', 'core/editor/anchor/with-inspector-control', withInspectorControl );\naddFilter( 'blocks.getSaveContent.extraProps', 'core/anchor/save-props', addSaveProps );\n"]}