{"version":3,"sources":["@wordpress/block-editor/src/store/actions.js"],"names":["selectPreviousBlock","selectNextBlock","removeBlocks","castArray","getDefaultBlockName","createBlock","select","resetBlocks","blocks","type","receiveBlocks","updateBlockAttributes","clientId","attributes","updateBlock","updates","selectBlock","initialPosition","previousBlockClientId","nextBlockClientId","startMultiSelect","stopMultiSelect","multiSelect","start","end","clearSelectedBlock","toggleSelection","isSelectionEnabled","replaceBlocks","clientIds","time","Date","now","replaceBlock","block","createOnMove","rootClientId","moveBlocksDown","moveBlocksUp","moveBlockToPosition","fromRootClientId","toRootClientId","index","insertBlock","updateSelection","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","isValid","synchronizeTemplate","mergeBlocks","firstBlockClientId","secondBlockClientId","selectPrevious","count","insertDefaultBlock","removeBlock","replaceInnerBlocks","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","updateBlockListSettings","settings","updateSettings","__unstableSaveReusableBlock","id","updatedId","__unstableMarkLastChangeAsPersistent"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { getDefaultBlockName, createBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { select } from './controls';\n\n/**\n * Returns an action object used in signalling that blocks state should be\n * reset to the specified array of blocks, taking precedence over any other\n * content reflected as an edit in state.\n *\n * @param {Array} blocks Array of blocks.\n *\n * @return {Object} Action object.\n */\nexport function resetBlocks( blocks ) {\n\treturn {\n\t\ttype: 'RESET_BLOCKS',\n\t\tblocks,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that blocks have been received.\n * Unlike resetBlocks, these should be appended to the existing known set, not\n * replacing.\n *\n * @param {Object[]} blocks Array of block objects.\n *\n * @return {Object} Action object.\n */\nexport function receiveBlocks( blocks ) {\n\treturn {\n\t\ttype: 'RECEIVE_BLOCKS',\n\t\tblocks,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block attributes with\n * the specified client ID has been updated.\n *\n * @param {string} clientId   Block client ID.\n * @param {Object} attributes Block attributes to be merged.\n *\n * @return {Object} Action object.\n */\nexport function updateBlockAttributes( clientId, attributes ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_ATTRIBUTES',\n\t\tclientId,\n\t\tattributes,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been updated.\n *\n * @param {string} clientId Block client ID.\n * @param {Object} updates  Block attributes to be merged.\n *\n * @return {Object} Action object.\n */\nexport function updateBlock( clientId, updates ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK',\n\t\tclientId,\n\t\tupdates,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID has been selected, optionally accepting a position\n * value reflecting its selection directionality. An initialPosition of -1\n * reflects a reverse selection.\n *\n * @param {string}  clientId        Block client ID.\n * @param {?number} initialPosition Optional initial position. Pass as -1 to\n *                                  reflect reverse selection.\n *\n * @return {Object} Action object.\n */\nexport function selectBlock( clientId, initialPosition = null ) {\n\treturn {\n\t\ttype: 'SELECT_BLOCK',\n\t\tinitialPosition,\n\t\tclientId,\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the block preceding the given\n * clientId should be selected.\n *\n * @param {string} clientId Block client ID.\n */\nexport function* selectPreviousBlock( clientId ) {\n\tconst previousBlockClientId = yield select(\n\t\t'core/block-editor',\n\t\t'getPreviousBlockClientId',\n\t\tclientId\n\t);\n\n\tyield selectBlock( previousBlockClientId, -1 );\n}\n\n/**\n * Yields action objects used in signalling that the block following the given\n * clientId should be selected.\n *\n * @param {string} clientId Block client ID.\n */\nexport function* selectNextBlock( clientId ) {\n\tconst nextBlockClientId = yield select(\n\t\t'core/block-editor',\n\t\t'getNextBlockClientId',\n\t\tclientId\n\t);\n\n\tyield selectBlock( nextBlockClientId );\n}\n\n/**\n * Returns an action object used in signalling that a block multi-selection has started.\n *\n * @return {Object} Action object.\n */\nexport function startMultiSelect() {\n\treturn {\n\t\ttype: 'START_MULTI_SELECT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block multi-selection stopped.\n *\n * @return {Object} Action object.\n */\nexport function stopMultiSelect() {\n\treturn {\n\t\ttype: 'STOP_MULTI_SELECT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block multi-selection changed.\n *\n * @param {string} start First block of the multi selection.\n * @param {string} end   Last block of the multiselection.\n *\n * @return {Object} Action object.\n */\nexport function multiSelect( start, end ) {\n\treturn {\n\t\ttype: 'MULTI_SELECT',\n\t\tstart,\n\t\tend,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the block selection is cleared.\n *\n * @return {Object} Action object.\n */\nexport function clearSelectedBlock() {\n\treturn {\n\t\ttype: 'CLEAR_SELECTED_BLOCK',\n\t};\n}\n\n/**\n * Returns an action object that enables or disables block selection.\n *\n * @param {boolean} [isSelectionEnabled=true] Whether block selection should\n *                                            be enabled.\n\n * @return {Object} Action object.\n */\nexport function toggleSelection( isSelectionEnabled = true ) {\n\treturn {\n\t\ttype: 'TOGGLE_SELECTION',\n\t\tisSelectionEnabled,\n\t};\n}\n\n/**\n * Returns an action object signalling that a blocks should be replaced with\n * one or more replacement blocks.\n *\n * @param {(string|string[])} clientIds Block client ID(s) to replace.\n * @param {(Object|Object[])} blocks    Replacement block(s).\n *\n * @return {Object} Action object.\n */\nexport function replaceBlocks( clientIds, blocks ) {\n\treturn {\n\t\ttype: 'REPLACE_BLOCKS',\n\t\tclientIds: castArray( clientIds ),\n\t\tblocks: castArray( blocks ),\n\t\ttime: Date.now(),\n\t};\n}\n\n/**\n * Returns an action object signalling that a single block should be replaced\n * with one or more replacement blocks.\n *\n * @param {(string|string[])} clientId Block client ID to replace.\n * @param {(Object|Object[])} block    Replacement block(s).\n *\n * @return {Object} Action object.\n */\nexport function replaceBlock( clientId, block ) {\n\treturn replaceBlocks( clientId, block );\n}\n\n/**\n * Higher-order action creator which, given the action type to dispatch creates\n * an action creator for managing block movement.\n *\n * @param {string} type Action type to dispatch.\n *\n * @return {Function} Action creator.\n */\nfunction createOnMove( type ) {\n\treturn ( clientIds, rootClientId ) => {\n\t\treturn {\n\t\t\tclientIds: castArray( clientIds ),\n\t\t\ttype,\n\t\t\trootClientId,\n\t\t};\n\t};\n}\n\nexport const moveBlocksDown = createOnMove( 'MOVE_BLOCKS_DOWN' );\nexport const moveBlocksUp = createOnMove( 'MOVE_BLOCKS_UP' );\n\n/**\n * Returns an action object signalling that an indexed block should be moved\n * to a new index.\n *\n * @param  {?string} clientId         The client ID of the block.\n * @param  {?string} fromRootClientId Root client ID source.\n * @param  {?string} toRootClientId   Root client ID destination.\n * @param  {number}  index            The index to move the block into.\n *\n * @return {Object} Action object.\n */\nexport function moveBlockToPosition( clientId, fromRootClientId, toRootClientId, index ) {\n\treturn {\n\t\ttype: 'MOVE_BLOCK_TO_POSITION',\n\t\tfromRootClientId,\n\t\ttoRootClientId,\n\t\tclientId,\n\t\tindex,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a single block should be\n * inserted, optionally at a specific index respective a root block list.\n *\n * @param {Object}  block            Block object to insert.\n * @param {?number} index            Index at which block should be inserted.\n * @param {?string} rootClientId     Optional root client ID of block list on which to insert.\n * @param {?boolean} updateSelection If true block selection will be updated. If false, block selection will not change. Defaults to true.\n *\n * @return {Object} Action object.\n */\nexport function insertBlock( block, index, rootClientId, updateSelection = true ) {\n\treturn insertBlocks( [ block ], index, rootClientId, updateSelection );\n}\n\n/**\n * Returns an action object used in signalling that an array of blocks should\n * be inserted, optionally at a specific index respective a root block list.\n *\n * @param {Object[]} blocks          Block objects to insert.\n * @param {?number}  index           Index at which block should be inserted.\n * @param {?string}  rootClientId    Optional root client ID of block list on which to insert.\n * @param {?boolean} updateSelection If true block selection will be updated.  If false, block selection will not change. Defaults to true.\n *\n * @return {Object} Action object.\n */\nexport function insertBlocks( blocks, index, rootClientId, updateSelection = true ) {\n\treturn {\n\t\ttype: 'INSERT_BLOCKS',\n\t\tblocks: castArray( blocks ),\n\t\tindex,\n\t\trootClientId,\n\t\ttime: Date.now(),\n\t\tupdateSelection,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the insertion point should\n * be shown.\n *\n * @param {?string} rootClientId Optional root client ID of block list on\n *                               which to insert.\n * @param {?number} index        Index at which block should be inserted.\n *\n * @return {Object} Action object.\n */\nexport function showInsertionPoint( rootClientId, index ) {\n\treturn {\n\t\ttype: 'SHOW_INSERTION_POINT',\n\t\trootClientId,\n\t\tindex,\n\t};\n}\n\n/**\n * Returns an action object hiding the insertion point.\n *\n * @return {Object} Action object.\n */\nexport function hideInsertionPoint() {\n\treturn {\n\t\ttype: 'HIDE_INSERTION_POINT',\n\t};\n}\n\n/**\n * Returns an action object resetting the template validity.\n *\n * @param {boolean}  isValid  template validity flag.\n *\n * @return {Object} Action object.\n */\nexport function setTemplateValidity( isValid ) {\n\treturn {\n\t\ttype: 'SET_TEMPLATE_VALIDITY',\n\t\tisValid,\n\t};\n}\n\n/**\n * Returns an action object synchronize the template with the list of blocks\n *\n * @return {Object} Action object.\n */\nexport function synchronizeTemplate() {\n\treturn {\n\t\ttype: 'SYNCHRONIZE_TEMPLATE',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that two blocks should be merged\n *\n * @param {string} firstBlockClientId  Client ID of the first block to merge.\n * @param {string} secondBlockClientId Client ID of the second block to merge.\n *\n * @return {Object} Action object.\n */\nexport function mergeBlocks( firstBlockClientId, secondBlockClientId ) {\n\treturn {\n\t\ttype: 'MERGE_BLOCKS',\n\t\tblocks: [ firstBlockClientId, secondBlockClientId ],\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the blocks corresponding to\n * the set of specified client IDs are to be removed.\n *\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious True if the previous block should be\n *                                         selected when a block is removed.\n */\nexport function* removeBlocks( clientIds, selectPrevious = true ) {\n\tclientIds = castArray( clientIds );\n\n\tif ( selectPrevious ) {\n\t\tyield selectPreviousBlock( clientIds[ 0 ] );\n\t}\n\n\tyield {\n\t\ttype: 'REMOVE_BLOCKS',\n\t\tclientIds,\n\t};\n\n\tconst count = yield select(\n\t\t'core/block-editor',\n\t\t'getBlockCount',\n\t);\n\n\t// To avoid a focus loss when removing the last block, assure there is\n\t// always a default block if the last of the blocks have been removed.\n\tif ( count === 0 ) {\n\t\tyield insertDefaultBlock();\n\t}\n}\n\n/**\n * Returns an action object used in signalling that the block with the\n * specified client ID is to be removed.\n *\n * @param {string}  clientId       Client ID of block to remove.\n * @param {boolean} selectPrevious True if the previous block should be\n *                                 selected when a block is removed.\n *\n * @return {Object} Action object.\n */\nexport function removeBlock( clientId, selectPrevious ) {\n\treturn removeBlocks( [ clientId ], selectPrevious );\n}\n\n/**\n * Returns an action object used in signalling that the inner blocks with the\n * specified client ID should be replaced.\n *\n * @param {string}   rootClientId    Client ID of the block whose InnerBlocks will re replaced.\n * @param {Object[]} blocks          Block objects to insert as new InnerBlocks\n * @param {?boolean} updateSelection If true block selection will be updated. If false, block selection will not change. Defaults to true.\n *\n * @return {Object} Action object.\n */\nexport function replaceInnerBlocks( rootClientId, blocks, updateSelection = true ) {\n\treturn {\n\t\ttype: 'REPLACE_INNER_BLOCKS',\n\t\trootClientId,\n\t\tblocks,\n\t\tupdateSelection,\n\t\ttime: Date.now(),\n\t};\n}\n\n/**\n * Returns an action object used to toggle the block editing mode between\n * visual and HTML modes.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Action object.\n */\nexport function toggleBlockMode( clientId ) {\n\treturn {\n\t\ttype: 'TOGGLE_BLOCK_MODE',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has begun to type.\n *\n * @return {Object} Action object.\n */\nexport function startTyping() {\n\treturn {\n\t\ttype: 'START_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has stopped typing.\n *\n * @return {Object} Action object.\n */\nexport function stopTyping() {\n\treturn {\n\t\ttype: 'STOP_TYPING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the caret has entered formatted text.\n *\n * @return {Object} Action object.\n */\nexport function enterFormattedText() {\n\treturn {\n\t\ttype: 'ENTER_FORMATTED_TEXT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user caret has exited formatted text.\n *\n * @return {Object} Action object.\n */\nexport function exitFormattedText() {\n\treturn {\n\t\ttype: 'EXIT_FORMATTED_TEXT',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a new block of the default\n * type should be added to the block list.\n *\n * @param {?Object} attributes   Optional attributes of the block to assign.\n * @param {?string} rootClientId Optional root client ID of block list on which\n *                               to append.\n * @param {?number} index        Optional index where to insert the default block\n *\n * @return {Object} Action object\n */\nexport function insertDefaultBlock( attributes, rootClientId, index ) {\n\tconst block = createBlock( getDefaultBlockName(), attributes );\n\n\treturn insertBlock( block, index, rootClientId );\n}\n\n/**\n * Returns an action object that changes the nested settings of a given block.\n *\n * @param {string} clientId Client ID of the block whose nested setting are\n *                          being received.\n * @param {Object} settings Object with the new settings for the nested block.\n *\n * @return {Object} Action object\n */\nexport function updateBlockListSettings( clientId, settings ) {\n\treturn {\n\t\ttype: 'UPDATE_BLOCK_LIST_SETTINGS',\n\t\tclientId,\n\t\tsettings,\n\t};\n}\n\n/*\n * Returns an action object used in signalling that the block editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a temporary reusable blocks have been saved\n * in order to switch its temporary id with the real id.\n *\n * @param {string} id        Reusable block's id.\n * @param {string} updatedId Updated block's id.\n *\n * @return {Object} Action object.\n */\nexport function __unstableSaveReusableBlock( id, updatedId ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\tid,\n\t\tupdatedId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the last block change should be marked explicitely as persistent.\n *\n * @return {Object} Action object.\n */\nexport function __unstableMarkLastChangeAsPersistent() {\n\treturn { type: 'MARK_LAST_CHANGE_AS_PERSISTENT' };\n}\n\n"]}