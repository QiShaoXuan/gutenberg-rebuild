{"version":3,"sources":["@wordpress/block-editor/src/components/provider/index.native.js"],"names":["Component","SlotFillProvider","withDispatch","RegistryConsumer","createHigherOrderComponent","compose","withRegistry","OriginalComponent","props","registry","BlockEditorProvider","updateSettings","settings","resetBlocks","value","attachChangeObserver","prevProps","isSyncingOutcomingValue","isSyncingIncomingValue","unsubscribe","select","getBlocks","isLastBlockChangePersistent","blocks","isPersistent","subscribe","onChange","onInput","newBlocks","newIsPersistent","children","dispatch"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { SlotFillProvider } from '@wordpress/components';\nimport { withDispatch, RegistryConsumer } from '@wordpress/data';\nimport { createHigherOrderComponent, compose } from '@wordpress/compose';\n\n/**\n * Higher-order component which renders the original component with the current\n * registry context passed as its `registry` prop.\n *\n * @param {WPComponent} OriginalComponent Original component.\n *\n * @return {WPComponent} Enhanced component.\n */\nconst withRegistry = createHigherOrderComponent(\n\t( OriginalComponent ) => ( props ) => (\n\t\t<RegistryConsumer>\n\t\t\t{ ( registry ) => (\n\t\t\t\t<OriginalComponent\n\t\t\t\t\t{ ...props }\n\t\t\t\t\tregistry={ registry }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</RegistryConsumer>\n\t),\n\t'withRegistry'\n);\n\nclass BlockEditorProvider extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.updateSettings( this.props.settings );\n\t\tthis.props.resetBlocks( this.props.value );\n\t\tthis.attachChangeObserver( this.props.registry );\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tconst {\n\t\t\tsettings,\n\t\t\tupdateSettings,\n\t\t\tvalue,\n\t\t\tresetBlocks,\n\t\t\tregistry,\n\t\t} = this.props;\n\n\t\tif ( settings !== prevProps.settings ) {\n\t\t\tupdateSettings( settings );\n\t\t}\n\n\t\tif ( registry !== prevProps.registry ) {\n\t\t\tthis.attachChangeObserver( registry );\n\t\t}\n\n\t\tif ( this.isSyncingOutcomingValue ) {\n\t\t\tthis.isSyncingOutcomingValue = false;\n\t\t} else if ( value !== prevProps.value ) {\n\t\t\tthis.isSyncingIncomingValue = true;\n\t\t\tresetBlocks( value );\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif ( this.unsubscribe ) {\n\t\t\tthis.unsubscribe();\n\t\t}\n\t}\n\n\t/**\n\t * Given a registry object, overrides the default dispatch behavior for the\n\t * `core/block-editor` store to interpret a state change and decide whether\n\t * we should call `onChange` or `onInput` depending on whether the change\n\t * is persistent or not.\n\t *\n\t * This needs to be done synchronously after state changes (instead of using\n\t * `componentDidUpdate`) in order to avoid batching these changes.\n\t *\n\t * @param {WPDataRegistry} registry     Registry from which block editor\n\t *                                      dispatch is to be overriden.\n\t */\n\tattachChangeObserver( registry ) {\n\t\tif ( this.unsubscribe ) {\n\t\t\tthis.unsubscribe();\n\t\t}\n\n\t\tconst {\n\t\t\tgetBlocks,\n\t\t\tisLastBlockChangePersistent,\n\t\t} = registry.select( 'core/block-editor' );\n\n\t\tlet blocks = getBlocks();\n\t\tlet isPersistent = isLastBlockChangePersistent();\n\n\t\tthis.unsubscribe = registry.subscribe( () => {\n\t\t\tconst {\n\t\t\t\tonChange,\n\t\t\t\tonInput,\n\t\t\t} = this.props;\n\t\t\tconst newBlocks = getBlocks();\n\t\t\tconst newIsPersistent = isLastBlockChangePersistent();\n\t\t\tif ( newBlocks !== blocks && this.isSyncingIncomingValue ) {\n\t\t\t\tthis.isSyncingIncomingValue = false;\n\t\t\t\tblocks = newBlocks;\n\t\t\t\tisPersistent = newIsPersistent;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tnewBlocks !== blocks ||\n\t\t\t\t// This happens when a previous input is explicitely marked as persistent.\n\t\t\t\t( newIsPersistent && ! isPersistent )\n\t\t\t) {\n\t\t\t\tblocks = newBlocks;\n\t\t\t\tisPersistent = newIsPersistent;\n\n\t\t\t\tthis.isSyncingOutcomingValue = true;\n\t\t\t\tif ( isPersistent ) {\n\t\t\t\t\tonChange( blocks );\n\t\t\t\t} else {\n\t\t\t\t\tonInput( blocks );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\trender() {\n\t\tconst { children } = this.props;\n\n\t\treturn (\n\t\t\t<SlotFillProvider>\n\t\t\t\t{ children }\n\t\t\t</SlotFillProvider>\n\t\t);\n\t}\n}\n\nexport default compose( [\n\twithDispatch( ( dispatch ) => {\n\t\tconst {\n\t\t\tupdateSettings,\n\t\t\tresetBlocks,\n\t\t} = dispatch( 'core/block-editor' );\n\n\t\treturn {\n\t\t\tupdateSettings,\n\t\t\tresetBlocks,\n\t\t};\n\t} ),\n\twithRegistry,\n] )( BlockEditorProvider );\n"]}