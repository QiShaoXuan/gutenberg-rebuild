{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/block-html.js"],"names":["TextareaAutosize","isEqual","Component","compose","getBlockAttributes","getBlockContent","getBlockType","isValidBlockContent","getSaveContent","withSelect","withDispatch","BlockHTML","props","arguments","onChange","bind","onBlur","state","html","block","isValid","originalContent","prevProps","attributes","setState","blockType","name","content","clientId","event","target","value","select","ownProps","getBlock","dispatch","updateBlock"],"mappings":"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","sourcesContent":["\n/**\n * External dependencies\n */\nimport TextareaAutosize from 'react-autosize-textarea';\nimport { isEqual } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { compose } from '@wordpress/compose';\nimport { getBlockAttributes, getBlockContent, getBlockType, isValidBlockContent, getSaveContent } from '@wordpress/blocks';\nimport { withSelect, withDispatch } from '@wordpress/data';\n\nexport class BlockHTML extends Component {\n\tconstructor( props ) {\n\t\tsuper( ...arguments );\n\t\tthis.onChange = this.onChange.bind( this );\n\t\tthis.onBlur = this.onBlur.bind( this );\n\t\tthis.state = {\n\t\t\thtml: props.block.isValid ? getBlockContent( props.block ) : props.block.originalContent,\n\t\t};\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tif ( ! isEqual( this.props.block.attributes, prevProps.block.attributes ) ) {\n\t\t\tthis.setState( {\n\t\t\t\thtml: getBlockContent( this.props.block ),\n\t\t\t} );\n\t\t}\n\t}\n\n\tonBlur() {\n\t\tconst { html } = this.state;\n\t\tconst blockType = getBlockType( this.props.block.name );\n\t\tconst attributes = getBlockAttributes( blockType, html, this.props.block.attributes );\n\n\t\t// If html is empty  we reset the block to the default HTML and mark it as valid to avoid triggering an error\n\t\tconst content = html ? html : getSaveContent( blockType, attributes );\n\t\tconst isValid = html ? isValidBlockContent( blockType, attributes, content ) : true;\n\n\t\tthis.props.onChange( this.props.clientId, attributes, content, isValid );\n\n\t\t// Ensure the state is updated if we reset so it displays the default content\n\t\tif ( ! html ) {\n\t\t\tthis.setState( { html: content } );\n\t\t}\n\t}\n\n\tonChange( event ) {\n\t\tthis.setState( { html: event.target.value } );\n\t}\n\n\trender() {\n\t\tconst { html } = this.state;\n\t\treturn (\n\t\t\t<TextareaAutosize\n\t\t\t\tclassName=\"editor-block-list__block-html-textarea block-editor-block-list__block-html-textarea\"\n\t\t\t\tvalue={ html }\n\t\t\t\tonBlur={ this.onBlur }\n\t\t\t\tonChange={ this.onChange }\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default compose( [\n\twithSelect( ( select, ownProps ) => ( {\n\t\tblock: select( 'core/block-editor' ).getBlock( ownProps.clientId ),\n\t} ) ),\n\twithDispatch( ( dispatch ) => ( {\n\t\tonChange( clientId, attributes, originalContent, isValid ) {\n\t\t\tdispatch( 'core/block-editor' ).updateBlock( clientId, { attributes, originalContent, isValid } );\n\t\t},\n\t} ) ),\n] )( BlockHTML );\n"]}