{"version":3,"sources":["@wordpress/block-editor/src/components/colors/with-colors.js"],"names":["get","isString","kebabCase","reduce","upperFirst","Component","withSelect","compose","createHigherOrderComponent","getColorClassName","getColorObjectByColorValue","getColorObjectByAttributeValues","getMostReadableColor","DEFAULT_COLORS","withCustomColorPalette","colorsArray","WrappedComponent","props","withEditorColorPalette","select","settings","getSettings","colors","createColorHOC","colorTypes","withColorPalette","colorMap","colorObject","colorType","setters","createSetters","colorUtils","bind","state","colorValue","settersAccumulator","colorContext","colorAttributeName","upperFirstColorAttributeName","customColorAttributeName","createSetColor","setAttributes","slug","undefined","previousState","attributes","newState","previousColorObject","previousColor","color","class","createCustomColorsHOC","withColors"],"mappings":";;;;;;;;;;;AAAA;;;AAGA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CC,UAA3C,QAA6D,QAA7D;AAEA;;;;AAGA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,OAAT,EAAkBC,0BAAlB,QAAoD,oBAApD;AAEA;;;;AAGA,SAASC,iBAAT,EAA4BC,0BAA5B,EAAwDC,+BAAxD,EAAyFC,oBAAoB,IAApBA,qBAAzF,QAAqH,SAArH;AAEA,IAAMC,cAAc,GAAG,EAAvB;AAEA;;;;;;;;;AAQA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAEC,WAAF;AAAA,SAAmBP,0BAA0B,CAAE,UAAEQ,gBAAF;AAAA,WAAwB,UAAEC,KAAF;AAAA,aACrG,cAAC,gBAAD,eAAuBA,KAAvB;AAA+B,QAAA,MAAM,EAAGF;AAAxC,SADqG;AAAA,KAAxB;AAAA,GAAF,EAEzE,wBAFyE,CAA7C;AAAA,CAA/B;AAIA;;;;;;;;AAMA,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,SAAMZ,UAAU,CAAE,UAAEa,MAAF,EAAc;AAC9D,QAAMC,QAAQ,GAAGD,MAAM,CAAE,mBAAF,CAAN,CAA8BE,WAA9B,EAAjB;AACA,WAAO;AACNC,MAAAA,MAAM,EAAEtB,GAAG,CAAEoB,QAAF,EAAY,CAAE,QAAF,CAAZ,EAA0BP,cAA1B;AADL,KAAP;AAGA,GAL8C,CAAhB;AAAA,CAA/B;AAOA;;;;;;;;;;;AASA,SAASU,cAAT,CAAyBC,UAAzB,EAAqCC,gBAArC,EAAwD;AACvD,MAAMC,QAAQ,GAAGvB,MAAM,CAAEqB,UAAF,EAAc,UAAEG,WAAF,EAAeC,SAAf,EAA8B;AAClE,6BACID,WADJ,EAEM1B,QAAQ,CAAE2B,SAAF,CAAR,uBAA4BA,SAA5B,EAAyC1B,SAAS,CAAE0B,SAAF,CAAlD,IAAoEA,SAF1E;AAIA,GALsB,EAKpB,EALoB,CAAvB;AAOA,SAAOrB,OAAO,CAAE,CACfkB,gBADe,EAEf,UAAET,gBAAF,EAAwB;AACvB;AAAA;AAAA;AAAA;;AACC,wBAAaC,KAAb,EAAqB;AAAA;;AAAA;;AACpB,sFAAOA,KAAP;AAEA,gBAAKY,OAAL,GAAe,MAAKC,aAAL,EAAf;AACA,gBAAKC,UAAL,GAAkB;AACjBnB,YAAAA,oBAAoB,EAAE,MAAKA,oBAAL,CAA0BoB,IAA1B;AADL,WAAlB;AAIA,gBAAKC,KAAL,GAAa,EAAb;AARoB;AASpB;;AAVF;AAAA;AAAA,+CAYuBC,UAZvB,EAYoC;AAAA,gBAC1BZ,MAD0B,GACf,KAAKL,KADU,CAC1BK,MAD0B;AAElC,mBAAOV,qBAAoB,CAAEU,MAAF,EAAUY,UAAV,CAA3B;AACA;AAfF;AAAA;AAAA,0CAiBiB;AAAA;;AACf,mBAAO/B,MAAM,CAAEuB,QAAF,EAAY,UAAES,kBAAF,EAAsBC,YAAtB,EAAoCC,kBAApC,EAA4D;AACpF,kBAAMC,4BAA4B,GAAGlC,UAAU,CAAEiC,kBAAF,CAA/C;AACA,kBAAME,wBAAwB,mBAAaD,4BAAb,CAA9B;AACAH,cAAAA,kBAAkB,cAASG,4BAAT,EAAlB,GACC,MAAI,CAACE,cAAL,CAAqBH,kBAArB,EAAyCE,wBAAzC,CADD;AAEA,qBAAOJ,kBAAP;AACA,aANY,EAMV,EANU,CAAb;AAOA;AAzBF;AAAA;AAAA,yCA2BiBE,kBA3BjB,EA2BqCE,wBA3BrC,EA2BgE;AAAA;;AAC9D,mBAAO,UAAEL,UAAF,EAAkB;AAAA;;AACxB,kBAAMP,WAAW,GAAGjB,0BAA0B,CAAE,MAAI,CAACO,KAAL,CAAWK,MAAb,EAAqBY,UAArB,CAA9C;;AACA,cAAA,MAAI,CAACjB,KAAL,CAAWwB,aAAX,qEACGJ,kBADH,EACyBV,WAAW,IAAIA,WAAW,CAACe,IAA3B,GAAkCf,WAAW,CAACe,IAA9C,GAAqDC,SAD9E,0CAEGJ,wBAFH,EAE+BZ,WAAW,IAAIA,WAAW,CAACe,IAA3B,GAAkCC,SAAlC,GAA8CT,UAF7E;AAIA,aAND;AAOA;AAnCF;AAAA;AAAA,mCAgEU;AACR,mBACC,cAAC,gBAAD,oBAEK,KAAKjB,KAFV;AAGEK,cAAAA,MAAM,EAAEqB;AAHV,eAIK,KAAKV,KAJV,EAKK,KAAKJ,OALV;AAMEE,cAAAA,UAAU,EAAE,KAAKA;AANnB,eADD;AAWA;AA5EF;AAAA;AAAA,0DAqC0Da,aArC1D,EAqC0E;AAAA,gBAAtCC,UAAsC,SAAtCA,UAAsC;AAAA,gBAA1BvB,MAA0B,SAA1BA,MAA0B;AACxE,mBAAOnB,MAAM,CAAEuB,QAAF,EAAY,UAAEoB,QAAF,EAAYV,YAAZ,EAA0BC,kBAA1B,EAAkD;AAC1E,kBAAMV,WAAW,GAAGhB,+BAA+B,CAClDW,MADkD,EAElDuB,UAAU,CAAER,kBAAF,CAFwC,EAGlDQ,UAAU,iBAAYzC,UAAU,CAAEiC,kBAAF,CAAtB,EAHwC,CAAnD;AAMA,kBAAMU,mBAAmB,GAAGH,aAAa,CAAEP,kBAAF,CAAzC;AACA,kBAAMW,aAAa,GAAGhD,GAAG,CAAE+C,mBAAF,EAAuB,CAAE,OAAF,CAAvB,CAAzB;AACA;;;;;;AAKA,kBAAKC,aAAa,KAAKrB,WAAW,CAACsB,KAA9B,IAAuCF,mBAA5C,EAAkE;AACjED,gBAAAA,QAAQ,CAAET,kBAAF,CAAR,GAAiCU,mBAAjC;AACA,eAFD,MAEO;AACND,gBAAAA,QAAQ,CAAET,kBAAF,CAAR,qBACIV,WADJ;AAECuB,kBAAAA,KAAK,EAAEzC,iBAAiB,CAAE2B,YAAF,EAAgBT,WAAW,CAACe,IAA5B;AAFzB;AAIA;;AACD,qBAAOI,QAAP;AACA,aAvBY,EAuBV,EAvBU,CAAb;AAwBA;AA9DF;;AAAA;AAAA,QAAqBzC,SAArB;AAAA;AA8EA,GAjFc,CAAF,CAAd;AAmFA;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,SAAS8C,qBAAT,CAAgCpC,WAAhC,EAA8C;AACpD,SAAO,YAAqB;AAC3B,QAAMU,gBAAgB,GAAGX,sBAAsB,CAAEC,WAAF,CAA/C;;AAD2B,sCAAhBS,UAAgB;AAAhBA,MAAAA,UAAgB;AAAA;;AAE3B,WAAOhB,0BAA0B,CAAEe,cAAc,CAAEC,UAAF,EAAcC,gBAAd,CAAhB,EAAkD,kBAAlD,CAAjC;AACA,GAHD;AAIA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,eAAe,SAAS2B,UAAT,GAAqC;AACnD,MAAM3B,gBAAgB,GAAGP,sBAAsB,EAA/C;;AADmD,qCAAbM,UAAa;AAAbA,IAAAA,UAAa;AAAA;;AAEnD,SAAOhB,0BAA0B,CAAEe,cAAc,CAAEC,UAAF,EAAcC,gBAAd,CAAhB,EAAkD,YAAlD,CAAjC;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { get, isString, kebabCase, reduce, upperFirst } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { withSelect } from '@wordpress/data';\nimport { compose, createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { getColorClassName, getColorObjectByColorValue, getColorObjectByAttributeValues, getMostReadableColor } from './utils';\n\nconst DEFAULT_COLORS = [];\n\n/**\n * Higher order component factory for injecting the `colorsArray` argument as\n * the colors prop in the `withCustomColors` HOC.\n *\n * @param {Array} colorsArray An array of color objects.\n *\n * @return {function} The higher order component.\n */\nconst withCustomColorPalette = ( colorsArray ) => createHigherOrderComponent( ( WrappedComponent ) => ( props ) => (\n\t<WrappedComponent { ...props } colors={ colorsArray } />\n), 'withCustomColorPalette' );\n\n/**\n * Higher order component factory for injecting the editor colors as the\n * `colors` prop in the `withColors` HOC.\n *\n * @return {function} The higher order component.\n */\nconst withEditorColorPalette = () => withSelect( ( select ) => {\n\tconst settings = select( 'core/block-editor' ).getSettings();\n\treturn {\n\t\tcolors: get( settings, [ 'colors' ], DEFAULT_COLORS ),\n\t};\n} );\n\n/**\n * Helper function used with `createHigherOrderComponent` to create\n * higher order components for managing color logic.\n *\n * @param {Array}    colorTypes       An array of color types (e.g. 'backgroundColor, borderColor).\n * @param {Function} withColorPalette A HOC for injecting the 'colors' prop into the WrappedComponent.\n *\n * @return {Component} The component that can be used as a HOC.\n */\nfunction createColorHOC( colorTypes, withColorPalette ) {\n\tconst colorMap = reduce( colorTypes, ( colorObject, colorType ) => {\n\t\treturn {\n\t\t\t...colorObject,\n\t\t\t...( isString( colorType ) ? { [ colorType ]: kebabCase( colorType ) } : colorType ),\n\t\t};\n\t}, {} );\n\n\treturn compose( [\n\t\twithColorPalette,\n\t\t( WrappedComponent ) => {\n\t\t\treturn class extends Component {\n\t\t\t\tconstructor( props ) {\n\t\t\t\t\tsuper( props );\n\n\t\t\t\t\tthis.setters = this.createSetters();\n\t\t\t\t\tthis.colorUtils = {\n\t\t\t\t\t\tgetMostReadableColor: this.getMostReadableColor.bind( this ),\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.state = {};\n\t\t\t\t}\n\n\t\t\t\tgetMostReadableColor( colorValue ) {\n\t\t\t\t\tconst { colors } = this.props;\n\t\t\t\t\treturn getMostReadableColor( colors, colorValue );\n\t\t\t\t}\n\n\t\t\t\tcreateSetters() {\n\t\t\t\t\treturn reduce( colorMap, ( settersAccumulator, colorContext, colorAttributeName ) => {\n\t\t\t\t\t\tconst upperFirstColorAttributeName = upperFirst( colorAttributeName );\n\t\t\t\t\t\tconst customColorAttributeName = `custom${ upperFirstColorAttributeName }`;\n\t\t\t\t\t\tsettersAccumulator[ `set${ upperFirstColorAttributeName }` ] =\n\t\t\t\t\t\t\tthis.createSetColor( colorAttributeName, customColorAttributeName );\n\t\t\t\t\t\treturn settersAccumulator;\n\t\t\t\t\t}, {} );\n\t\t\t\t}\n\n\t\t\t\tcreateSetColor( colorAttributeName, customColorAttributeName ) {\n\t\t\t\t\treturn ( colorValue ) => {\n\t\t\t\t\t\tconst colorObject = getColorObjectByColorValue( this.props.colors, colorValue );\n\t\t\t\t\t\tthis.props.setAttributes( {\n\t\t\t\t\t\t\t[ colorAttributeName ]: colorObject && colorObject.slug ? colorObject.slug : undefined,\n\t\t\t\t\t\t\t[ customColorAttributeName ]: colorObject && colorObject.slug ? undefined : colorValue,\n\t\t\t\t\t\t} );\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tstatic getDerivedStateFromProps( { attributes, colors }, previousState ) {\n\t\t\t\t\treturn reduce( colorMap, ( newState, colorContext, colorAttributeName ) => {\n\t\t\t\t\t\tconst colorObject = getColorObjectByAttributeValues(\n\t\t\t\t\t\t\tcolors,\n\t\t\t\t\t\t\tattributes[ colorAttributeName ],\n\t\t\t\t\t\t\tattributes[ `custom${ upperFirst( colorAttributeName ) }` ],\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst previousColorObject = previousState[ colorAttributeName ];\n\t\t\t\t\t\tconst previousColor = get( previousColorObject, [ 'color' ] );\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t* The \"and previousColorObject\" condition checks that a previous color object was already computed.\n\t\t\t\t\t\t* At the start previousColorObject and colorValue are both equal to undefined\n\t\t\t\t\t\t* bus as previousColorObject does not exist we should compute the object.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tif ( previousColor === colorObject.color && previousColorObject ) {\n\t\t\t\t\t\t\tnewState[ colorAttributeName ] = previousColorObject;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewState[ colorAttributeName ] = {\n\t\t\t\t\t\t\t\t...colorObject,\n\t\t\t\t\t\t\t\tclass: getColorClassName( colorContext, colorObject.slug ),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn newState;\n\t\t\t\t\t}, {} );\n\t\t\t\t}\n\n\t\t\t\trender() {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<WrappedComponent\n\t\t\t\t\t\t\t{ ...{\n\t\t\t\t\t\t\t\t...this.props,\n\t\t\t\t\t\t\t\tcolors: undefined,\n\t\t\t\t\t\t\t\t...this.state,\n\t\t\t\t\t\t\t\t...this.setters,\n\t\t\t\t\t\t\t\tcolorUtils: this.colorUtils,\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t] );\n}\n\n/**\n * A higher-order component factory for creating a 'withCustomColors' HOC, which handles color logic\n * for class generation color value, retrieval and color attribute setting.\n *\n * Use this higher-order component to work with a custom set of colors.\n *\n * @example\n *\n * ```jsx\n * const CUSTOM_COLORS = [ { name: 'Red', slug: 'red', color: '#ff0000' }, { name: 'Blue', slug: 'blue', color: '#0000ff' } ];\n * const withCustomColors = createCustomColorsHOC( CUSTOM_COLORS );\n * // ...\n * export default compose(\n *     withCustomColors( 'backgroundColor', 'borderColor' ),\n *     MyColorfulComponent,\n * );\n * ```\n *\n * @param {Array} colorsArray The array of color objects (name, slug, color, etc... ).\n *\n * @return {Function} Higher-order component.\n */\nexport function createCustomColorsHOC( colorsArray ) {\n\treturn ( ...colorTypes ) => {\n\t\tconst withColorPalette = withCustomColorPalette( colorsArray );\n\t\treturn createHigherOrderComponent( createColorHOC( colorTypes, withColorPalette ), 'withCustomColors' );\n\t};\n}\n\n/**\n * A higher-order component, which handles color logic for class generation color value, retrieval and color attribute setting.\n *\n * For use with the default editor/theme color palette.\n *\n * @example\n *\n * ```jsx\n * export default compose(\n *     withColors( 'backgroundColor', { textColor: 'color' } ),\n *     MyColorfulComponent,\n * );\n * ```\n *\n * @param {...(object|string)} colorTypes The arguments can be strings or objects. If the argument is an object,\n *                                        it should contain the color attribute name as key and the color context as value.\n *                                        If the argument is a string the value should be the color attribute name,\n *                                        the color context is computed by applying a kebab case transform to the value.\n *                                        Color context represents the context/place where the color is going to be used.\n *                                        The class name of the color is generated using 'has' followed by the color name\n *                                        and ending with the color context all in kebab case e.g: has-green-background-color.\n *\n * @return {Function} Higher-order component.\n */\nexport default function withColors( ...colorTypes ) {\n\tconst withColorPalette = withEditorColorPalette();\n\treturn createHigherOrderComponent( createColorHOC( colorTypes, withColorPalette ), 'withColors' );\n}\n"]}