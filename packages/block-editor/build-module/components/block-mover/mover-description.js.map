{"version":3,"sources":["@wordpress/block-editor/src/components/block-mover/mover-description.js"],"names":["__","_n","sprintf","getBlockMoverDescription","selectedCount","type","firstIndex","isFirst","isLast","dir","position","getMultiBlockMoverDescription"],"mappings":"AAAA;;;AAGA,SAASA,EAAT,EAAaC,EAAb,EAAiBC,OAAjB,QAAgC,iBAAhC;AAEA;;;;;;;;;;;;;;;AAcA,OAAO,SAASC,wBAAT,CAAmCC,aAAnC,EAAkDC,IAAlD,EAAwDC,UAAxD,EAAoEC,OAApE,EAA6EC,MAA7E,EAAqFC,GAArF,EAA2F;AACjG,MAAMC,QAAQ,GAAKJ,UAAU,GAAG,CAAhC;;AAEA,MAAKF,aAAa,GAAG,CAArB,EAAyB;AACxB,WAAOO,6BAA6B,CAAEP,aAAF,EAAiBE,UAAjB,EAA6BC,OAA7B,EAAsCC,MAAtC,EAA8CC,GAA9C,CAApC;AACA;;AAED,MAAKF,OAAO,IAAIC,MAAhB,EAAyB;AACxB;AACA,WAAON,OAAO,CAAEF,EAAE,CAAE,iDAAF,CAAJ,EAA2DK,IAA3D,CAAd;AACA;;AAED,MAAKI,GAAG,GAAG,CAAN,IAAW,CAAED,MAAlB,EAA2B;AAC1B;AACA,WAAON,OAAO,EACb;AACAF,IAAAA,EAAE,CAAE,0DAAF,CAFW,EAGbK,IAHa,EAIbK,QAJa,EAKXA,QAAQ,GAAG,CALA,CAAd;AAOA;;AAED,MAAKD,GAAG,GAAG,CAAN,IAAWD,MAAhB,EAAyB;AACxB;AACA;AACA,WAAON,OAAO,CAAEF,EAAE,CAAE,+DAAF,CAAJ,EAAyEK,IAAzE,CAAd;AACA;;AAED,MAAKI,GAAG,GAAG,CAAN,IAAW,CAAEF,OAAlB,EAA4B;AAC3B;AACA,WAAOL,OAAO,EACb;AACAF,IAAAA,EAAE,CAAE,wDAAF,CAFW,EAGbK,IAHa,EAIbK,QAJa,EAKXA,QAAQ,GAAG,CALA,CAAd;AAOA;;AAED,MAAKD,GAAG,GAAG,CAAN,IAAWF,OAAhB,EAA0B;AACzB;AACA;AACA,WAAOL,OAAO,CAAEF,EAAE,CAAE,mEAAF,CAAJ,EAA6EK,IAA7E,CAAd;AACA;AACD;AAED;;;;;;;;;;;;;AAYA,OAAO,SAASM,6BAAT,CAAwCP,aAAxC,EAAuDE,UAAvD,EAAmEC,OAAnE,EAA4EC,MAA5E,EAAoFC,GAApF,EAA0F;AAChG,MAAMC,QAAQ,GAAKJ,UAAU,GAAG,CAAhC;;AAEA,MAAKG,GAAG,GAAG,CAAN,IAAWF,OAAhB,EAA0B;AACzB,WAAOP,EAAE,CAAE,0DAAF,CAAT;AACA;;AAED,MAAKS,GAAG,GAAG,CAAN,IAAWD,MAAhB,EAAyB;AACxB,WAAOR,EAAE,CAAE,+DAAF,CAAT;AACA;;AAED,MAAKS,GAAG,GAAG,CAAN,IAAW,CAAEF,OAAlB,EAA4B;AAC3B,WAAOL,OAAO,EACb;AACAD,IAAAA,EAAE,CACD,oDADC,EAED,qDAFC,EAGDG,aAHC,CAFW,EAObA,aAPa,EAQbM,QARa,CAAd;AAUA;;AAED,MAAKD,GAAG,GAAG,CAAN,IAAW,CAAED,MAAlB,EAA2B;AAC1B,WAAON,OAAO,EACb;AACAD,IAAAA,EAAE,CACD,sDADC,EAED,uDAFC,EAGDG,aAHC,CAFW,EAObA,aAPa,EAQbM,QARa,CAAd;AAUA;AACD","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __, _n, sprintf } from '@wordpress/i18n';\n\n/**\n * Return a label for the block movement controls depending on block position.\n *\n * @param {number}  selectedCount Number of blocks selected.\n * @param {string}  type          Block type - in the case of a single block, should\n *                                 define its 'type'. I.e. 'Text', 'Heading', 'Image' etc.\n * @param {number}  firstIndex    The index (position - 1) of the first block selected.\n * @param {boolean} isFirst       This is the first block.\n * @param {boolean} isLast        This is the last block.\n * @param {number}  dir           Direction of movement (> 0 is considered to be going\n *                                 down, < 0 is up).\n *\n * @return {string} Label for the block movement controls.\n */\nexport function getBlockMoverDescription( selectedCount, type, firstIndex, isFirst, isLast, dir ) {\n\tconst position = ( firstIndex + 1 );\n\n\tif ( selectedCount > 1 ) {\n\t\treturn getMultiBlockMoverDescription( selectedCount, firstIndex, isFirst, isLast, dir );\n\t}\n\n\tif ( isFirst && isLast ) {\n\t\t// translators: %s: Type of block (i.e. Text, Image etc)\n\t\treturn sprintf( __( 'Block %s is the only block, and cannot be moved' ), type );\n\t}\n\n\tif ( dir > 0 && ! isLast ) {\n\t\t// moving down\n\t\treturn sprintf(\n\t\t\t// translators: 1: Type of block (i.e. Text, Image etc), 2: Position of selected block, 3: New position\n\t\t\t__( 'Move %1$s block from position %2$d down to position %3$d' ),\n\t\t\ttype,\n\t\t\tposition,\n\t\t\t( position + 1 )\n\t\t);\n\t}\n\n\tif ( dir > 0 && isLast ) {\n\t\t// moving down, and is the last item\n\t\t// translators: %s: Type of block (i.e. Text, Image etc)\n\t\treturn sprintf( __( 'Block %s is at the end of the content and can’t be moved down' ), type );\n\t}\n\n\tif ( dir < 0 && ! isFirst ) {\n\t\t// moving up\n\t\treturn sprintf(\n\t\t\t// translators: 1: Type of block (i.e. Text, Image etc), 2: Position of selected block, 3: New position\n\t\t\t__( 'Move %1$s block from position %2$d up to position %3$d' ),\n\t\t\ttype,\n\t\t\tposition,\n\t\t\t( position - 1 )\n\t\t);\n\t}\n\n\tif ( dir < 0 && isFirst ) {\n\t\t// moving up, and is the first item\n\t\t// translators: %s: Type of block (i.e. Text, Image etc)\n\t\treturn sprintf( __( 'Block %s is at the beginning of the content and can’t be moved up' ), type );\n\t}\n}\n\n/**\n * Return a label for the block movement controls depending on block position.\n *\n * @param {number}  selectedCount Number of blocks selected.\n * @param {number}  firstIndex    The index (position - 1) of the first block selected.\n * @param {boolean} isFirst       This is the first block.\n * @param {boolean} isLast        This is the last block.\n * @param {number}  dir           Direction of movement (> 0 is considered to be going\n *                                 down, < 0 is up).\n *\n * @return {string} Label for the block movement controls.\n */\nexport function getMultiBlockMoverDescription( selectedCount, firstIndex, isFirst, isLast, dir ) {\n\tconst position = ( firstIndex + 1 );\n\n\tif ( dir < 0 && isFirst ) {\n\t\treturn __( 'Blocks cannot be moved up as they are already at the top' );\n\t}\n\n\tif ( dir > 0 && isLast ) {\n\t\treturn __( 'Blocks cannot be moved down as they are already at the bottom' );\n\t}\n\n\tif ( dir < 0 && ! isFirst ) {\n\t\treturn sprintf(\n\t\t\t// translators: 1: Number of selected blocks, 2: Position of selected blocks\n\t\t\t_n(\n\t\t\t\t'Move %1$d block from position %2$d up by one place',\n\t\t\t\t'Move %1$d blocks from position %2$d up by one place',\n\t\t\t\tselectedCount\n\t\t\t),\n\t\t\tselectedCount,\n\t\t\tposition\n\t\t);\n\t}\n\n\tif ( dir > 0 && ! isLast ) {\n\t\treturn sprintf(\n\t\t\t// translators: 1: Number of selected blocks, 2: Position of selected blocks\n\t\t\t_n(\n\t\t\t\t'Move %1$d block from position %2$d down by one place',\n\t\t\t\t'Move %1$d blocks from position %2$d down by one place',\n\t\t\t\tselectedCount\n\t\t\t),\n\t\t\tselectedCount,\n\t\t\tposition\n\t\t);\n\t}\n}\n"]}