{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/patterns.js"],"names":["getBlockTransforms","findTransform","remove","applyFormat","getTextContent","getSelectionStart","slice","getPatterns","onReplace","valueToFormat","prefixTransforms","filter","type","record","start","text","characterBefore","test","trimmedTextBefore","trim","transformation","prefix","content","length","block","transform","BACKTICK","textBefore","indexBefore","lastIndexOf","startIndex","endIndex"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { getBlockTransforms, findTransform } from '@wordpress/blocks';\nimport {\n\tremove,\n\tapplyFormat,\n\tgetTextContent,\n\tgetSelectionStart,\n\tslice,\n} from '@wordpress/rich-text';\n\nexport function getPatterns( { onReplace, valueToFormat } ) {\n\tconst prefixTransforms = getBlockTransforms( 'from' )\n\t\t.filter( ( { type } ) => type === 'prefix' );\n\n\treturn [\n\t\t( record ) => {\n\t\t\tif ( ! onReplace ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst start = getSelectionStart( record );\n\t\t\tconst text = getTextContent( record );\n\t\t\tconst characterBefore = text.slice( start - 1, start );\n\n\t\t\tif ( ! /\\s/.test( characterBefore ) ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst trimmedTextBefore = text.slice( 0, start ).trim();\n\t\t\tconst transformation = findTransform( prefixTransforms, ( { prefix } ) => {\n\t\t\t\treturn trimmedTextBefore === prefix;\n\t\t\t} );\n\n\t\t\tif ( ! transformation ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst content = valueToFormat( slice( record, start, text.length ) );\n\t\t\tconst block = transformation.transform( content );\n\n\t\t\tonReplace( [ block ] );\n\n\t\t\treturn record;\n\t\t},\n\t\t( record ) => {\n\t\t\tconst BACKTICK = '`';\n\t\t\tconst start = getSelectionStart( record );\n\t\t\tconst text = getTextContent( record );\n\t\t\tconst characterBefore = text.slice( start - 1, start );\n\n\t\t\t// Quick check the text for the necessary character.\n\t\t\tif ( characterBefore !== BACKTICK ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst textBefore = text.slice( 0, start - 1 );\n\t\t\tconst indexBefore = textBefore.lastIndexOf( BACKTICK );\n\n\t\t\tif ( indexBefore === -1 ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\tconst startIndex = indexBefore;\n\t\t\tconst endIndex = start - 2;\n\n\t\t\tif ( startIndex === endIndex ) {\n\t\t\t\treturn record;\n\t\t\t}\n\n\t\t\trecord = remove( record, startIndex, startIndex + 1 );\n\t\t\trecord = remove( record, endIndex, endIndex + 1 );\n\t\t\trecord = applyFormat( record, { type: 'code' }, startIndex, endIndex );\n\n\t\t\treturn record;\n\t\t},\n\t];\n}\n"]}