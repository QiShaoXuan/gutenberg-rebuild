{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/index.native.js"],"names":["RCTAztecView","View","Platform","Component","RawHTML","withInstanceId","compose","BlockFormatControls","withSelect","applyFormat","getActiveFormat","isEmpty","create","split","toHTMLString","insert","isCollapsed","decodeEntities","BACKSPACE","pasteHandler","children","isURL","FormatEdit","FormatToolbar","styles","isRichTextValueEmpty","value","length","unescapeSpaces","text","replace","saferPasteHandler","options","error","window","console","log","HTML","gutenbergFormatNamesToAztec","RichText","arguments","isIOS","OS","onChange","bind","onEnter","onBackspace","onPaste","onContentSizeChange","onFormatChange","onSelectionChange","valueToFormat","state","start","end","formatPlaceholder","height","props","undefined","String","trimLeft","formatToValue","formats","replacements","currentRecord","blocks","isPasted","onSplit","before","after","lastEventCount","removeRootTagsProduceByAztec","multilineTag","record","formatTypes","map","name","filter","Boolean","newContent","setState","needsSelectionUpdate","forceUpdate","html","result","removeRootTag","tagName","rootTagsToEliminate","forEach","element","tag","openingTagRegexp","RegExp","closingTagRegexp","event","nativeEvent","eventCount","contentWithoutRootTag","lastContent","contentSize","contentHeight","createRecord","currentContent","splitContent","onMerge","onRemove","keyCode","isReverse","empty","pastedText","pastedHtml","preventDefault","trimmedText","trim","linkedRecord","type","attributes","href","shouldReplace","onReplace","mode","pastedContent","plainText","canUserUseUnfilteredHTML","recordToInsert","insertedContent","realStart","Math","min","realEnd","max","noChange","isTyping","shouldKeepFormats","index","selectionStart","selectionEnd","innerContent","range","Array","isArray","toHTML","format","nextProps","isSelected","_editor","focus","isFocused","blur","prevProps","style","formattingControls","getRecord","minHeight","selection","ref","setRef","placeholder","placeholderTextColor","textDecorationColor","onFocus","onBlur","getActiveFormatNames","onCaretVerticalPositionChange","fontFamily","fontSize","fontWeight","fontStyle","disableEditingMenu","defaultProps","RichTextContainer","select","getFormatTypes","Content","Tag","content","RichTextShortcut","RichTextToolbarButton","UnstableRichTextInputEvent"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport RCTAztecView from 'react-native-aztec';\nimport { View, Platform } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { Component, RawHTML } from '@wordpress/element';\nimport { withInstanceId, compose } from '@wordpress/compose';\nimport { BlockFormatControls } from '@wordpress/block-editor';\nimport { withSelect } from '@wordpress/data';\nimport {\n\tapplyFormat,\n\tgetActiveFormat,\n\tisEmpty,\n\tcreate,\n\tsplit,\n\ttoHTMLString,\n\tinsert,\n\tisCollapsed,\n} from '@wordpress/rich-text';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { BACKSPACE } from '@wordpress/keycodes';\nimport { pasteHandler, children } from '@wordpress/blocks';\nimport { isURL } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport FormatEdit from './format-edit';\nimport FormatToolbar from './format-toolbar';\n\nimport styles from './style.scss';\n\nconst isRichTextValueEmpty = ( value ) => {\n\treturn ! value || ! value.length;\n};\n\nconst unescapeSpaces = ( text ) => {\n\treturn text.replace( /&nbsp;|&#160;/gi, ' ' );\n};\n\n/**\n * Calls {@link pasteHandler} with a fallback to plain text when HTML processing\n * results in errors\n *\n * @param {Object}  [options]     The options to pass to {@link pasteHandler}\n *\n * @return {Array|string}         A list of blocks or a string, depending on\n *                                `handlerMode`.\n */\nconst saferPasteHandler = ( options ) => {\n\ttry {\n\t\treturn pasteHandler( options );\n\t} catch ( error ) {\n\t\twindow.console.log( 'Pasting HTML failed:', error );\n\t\twindow.console.log( 'HTML:', options.HTML );\n\t\twindow.console.log( 'Falling back to plain text.' );\n\t\t// fallback to plain text\n\t\treturn pasteHandler( { ...options, HTML: '' } );\n\t}\n};\n\nconst gutenbergFormatNamesToAztec = {\n\t'core/bold': 'bold',\n\t'core/italic': 'italic',\n\t'core/strikethrough': 'strikethrough',\n};\n\nexport class RichText extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\t\tthis.isIOS = Platform.OS === 'ios';\n\t\tthis.onChange = this.onChange.bind( this );\n\t\tthis.onEnter = this.onEnter.bind( this );\n\t\tthis.onBackspace = this.onBackspace.bind( this );\n\t\tthis.onPaste = this.onPaste.bind( this );\n\t\tthis.onContentSizeChange = this.onContentSizeChange.bind( this );\n\t\tthis.onFormatChange = this.onFormatChange.bind( this );\n\t\t// This prevents a bug in Aztec which triggers onSelectionChange twice on format change\n\t\tthis.onSelectionChange = this.onSelectionChange.bind( this );\n\t\tthis.valueToFormat = this.valueToFormat.bind( this );\n\t\tthis.state = {\n\t\t\tstart: 0,\n\t\t\tend: 0,\n\t\t\tformatPlaceholder: null,\n\t\t\theight: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Get the current record (value and selection) from props and state.\n\t *\n\t * @return {Object} The current record (value and selection).\n\t */\n\tgetRecord() {\n\t\tconst { formatPlaceholder, start, end } = this.state;\n\n\t\tlet value = this.props.value === undefined ? null : this.props.value;\n\n\t\t// Since we get the text selection from Aztec we need to be in sync with the HTML `value`\n\t\t// Removing leading white spaces using `trim()` should make sure this is the case.\n\t\tif ( typeof value === 'string' || value instanceof String ) {\n\t\t\tvalue = value.trimLeft();\n\t\t}\n\n\t\tconst { formats, replacements, text } = this.formatToValue( value );\n\n\t\treturn { formats, replacements, formatPlaceholder, text, start, end };\n\t}\n\n\t/*\n\t * Splits the content at the location of the selection.\n\t *\n\t * Replaces the content of the editor inside this element with the contents\n\t * before the selection. Sends the elements after the selection to the `onSplit`\n\t * handler.\n\t *\n\t */\n\tsplitContent( currentRecord, blocks = [], isPasted = false ) {\n\t\tconst { onSplit } = this.props;\n\n\t\tif ( ! onSplit ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO : Fix the index position in AztecNative for Android\n\t\tlet [ before, after ] = split( currentRecord );\n\n\t\t// In case split occurs at the trailing or leading edge of the field,\n\t\t// assume that the before/after values respectively reflect the current\n\t\t// value. This also provides an opportunity for the parent component to\n\t\t// determine whether the before/after value has changed using a trivial\n\t\t//  strict equality operation.\n\t\tif ( isEmpty( after ) ) {\n\t\t\tbefore = currentRecord;\n\t\t} else if ( isEmpty( before ) ) {\n\t\t\tafter = currentRecord;\n\t\t}\n\n\t\t// If pasting and the split would result in no content other than the\n\t\t// pasted blocks, remove the before and after blocks.\n\t\tif ( isPasted ) {\n\t\t\tbefore = isEmpty( before ) ? null : before;\n\t\t\tafter = isEmpty( after ) ? null : after;\n\t\t}\n\n\t\tif ( before ) {\n\t\t\tbefore = this.valueToFormat( before );\n\t\t}\n\n\t\tif ( after ) {\n\t\t\tafter = this.valueToFormat( after );\n\t\t}\n\n\t\t// The onSplit event can cause a content update event for this block.  Such event should\n\t\t// definitely be processed by our native components, since they have no knowledge of\n\t\t// how the split works.  Setting lastEventCount to undefined forces the native component to\n\t\t// always update when provided with new content.\n\t\tthis.lastEventCount = undefined;\n\n\t\tonSplit( before, after, ...blocks );\n\t}\n\n\tvalueToFormat( value ) {\n\t\t// remove the outer root tags\n\t\treturn this.removeRootTagsProduceByAztec( toHTMLString( {\n\t\t\tvalue,\n\t\t\tmultilineTag: this.multilineTag,\n\t\t} ) );\n\t}\n\n\tgetActiveFormatNames( record ) {\n\t\tconst {\n\t\t\tformatTypes,\n\t\t} = this.props;\n\n\t\treturn formatTypes.map( ( { name } ) => name ).filter( ( name ) => {\n\t\t\treturn getActiveFormat( record, name ) !== undefined;\n\t\t} ).map( ( name ) => gutenbergFormatNamesToAztec[ name ] ).filter( Boolean );\n\t}\n\n\tonFormatChange( record ) {\n\t\tlet newContent;\n\t\t// valueToFormat might throw when converting the record to a tree structure\n\t\t// let's ignore the event for now and force a render update so we're still in sync\n\t\ttry {\n\t\t\tnewContent = this.valueToFormat( record );\n\t\t} catch ( error ) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log( error );\n\t\t}\n\t\tthis.setState( {\n\t\t\tformatPlaceholder: record.formatPlaceholder,\n\t\t} );\n\t\tif ( newContent && newContent !== this.props.value ) {\n\t\t\tthis.props.onChange( newContent );\n\t\t\tif ( record.needsSelectionUpdate && record.start && record.end ) {\n\t\t\t\tthis.setState( { start: record.start, end: record.end } );\n\t\t\t}\n\t\t\tthis.setState( {\n\t\t\t\tneedsSelectionUpdate: record.needsSelectionUpdate,\n\t\t\t} );\n\t\t} else {\n\t\t\t// make sure the component rerenders without refreshing the text on gutenberg\n\t\t\t// (this can trigger other events that might update the active formats on aztec)\n\t\t\tthis.lastEventCount = 0;\n\t\t\tthis.forceUpdate();\n\t\t}\n\t}\n\n\t/*\n\t * Cleans up any root tags produced by aztec.\n\t * TODO: This should be removed on a later version when aztec doesn't return the top tag of the text being edited\n\t */\n\n\tremoveRootTagsProduceByAztec( html ) {\n\t\tlet result = this.removeRootTag( this.props.tagName, html );\n\t\t// Temporary workaround for https://github.com/WordPress/gutenberg/pull/13763\n\t\tif ( this.props.rootTagsToEliminate ) {\n\t\t\tthis.props.rootTagsToEliminate.forEach( ( element ) => {\n\t\t\t\tresult = this.removeRootTag( element, result );\n\t\t\t} );\n\t\t}\n\t\treturn result;\n\t}\n\n\tremoveRootTag( tag, html ) {\n\t\tconst openingTagRegexp = RegExp( '^<' + tag + '>', 'gim' );\n\t\tconst closingTagRegexp = RegExp( '</' + tag + '>$', 'gim' );\n\t\treturn html.replace( openingTagRegexp, '' ).replace( closingTagRegexp, '' );\n\t}\n\n\t/*\n\t * Handles any case where the content of the AztecRN instance has changed\n\t */\n\tonChange( event ) {\n\t\tthis.lastEventCount = event.nativeEvent.eventCount;\n\t\tconst contentWithoutRootTag = this.removeRootTagsProduceByAztec( unescapeSpaces( event.nativeEvent.text ) );\n\t\tthis.lastContent = contentWithoutRootTag;\n\t\tthis.props.onChange( this.lastContent );\n\t}\n\n\t/**\n\t * Handles any case where the content of the AztecRN instance has changed in size\n\t */\n\n\tonContentSizeChange( contentSize ) {\n\t\tconst contentHeight = contentSize.height;\n\t\tthis.setState( { height: contentHeight } );\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tonEnter( event ) {\n\t\tthis.lastEventCount = event.nativeEvent.eventCount;\n\t\tif ( ! this.props.onSplit ) {\n\t\t\t// TODO: insert the \\n char instead?\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentRecord = this.createRecord( {\n\t\t\t...event.nativeEvent,\n\t\t\tcurrentContent: unescapeSpaces( event.nativeEvent.text ),\n\t\t} );\n\n\t\tthis.splitContent( currentRecord );\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tonBackspace( event ) {\n\t\tconst { onMerge, onRemove } = this.props;\n\t\tif ( ! onMerge && ! onRemove ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyCode = BACKSPACE; // TODO : should we differentiate BACKSPACE and DELETE?\n\t\tconst isReverse = keyCode === BACKSPACE;\n\n\t\tconst empty = this.isEmpty();\n\n\t\tif ( onMerge ) {\n\t\t\tonMerge( ! isReverse );\n\t\t}\n\n\t\t// Only handle remove on Backspace. This serves dual-purpose of being\n\t\t// an intentional user interaction distinguishing between Backspace and\n\t\t// Delete to remove the empty field, but also to avoid merge & remove\n\t\t// causing destruction of two fields (merge, then removed merged).\n\t\tif ( onRemove && empty && isReverse ) {\n\t\t\tonRemove( ! isReverse );\n\t\t}\n\t}\n\n\t/**\n\t * Handles a paste event from the native Aztec Wrapper.\n\t *\n\t * @param {PasteEvent} event The paste event which wraps `nativeEvent`.\n\t */\n\tonPaste( event ) {\n\t\tconst isPasted = true;\n\t\tconst { onSplit } = this.props;\n\n\t\tconst { pastedText, pastedHtml } = event.nativeEvent;\n\t\tconst currentRecord = this.createRecord( event.nativeEvent );\n\n\t\tevent.preventDefault();\n\n\t\t// There is a selection, check if a URL is pasted.\n\t\tif ( ! isCollapsed( currentRecord ) ) {\n\t\t\tconst trimmedText = ( pastedHtml || pastedText ).replace( /<[^>]+>/g, '' )\n\t\t\t\t.trim();\n\n\t\t\t// A URL was pasted, turn the selection into a link\n\t\t\tif ( isURL( trimmedText ) ) {\n\t\t\t\tconst linkedRecord = applyFormat( currentRecord, {\n\t\t\t\t\ttype: 'a',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\thref: decodeEntities( trimmedText ),\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t\tthis.lastContent = this.valueToFormat( linkedRecord );\n\t\t\t\tthis.lastEventCount = undefined;\n\t\t\t\tthis.props.onChange( this.lastContent );\n\n\t\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\t\twindow.console.log( 'Created link:\\n\\n', trimmedText );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst shouldReplace = this.props.onReplace && this.isEmpty();\n\n\t\tlet mode = 'INLINE';\n\n\t\tif ( shouldReplace ) {\n\t\t\tmode = 'BLOCKS';\n\t\t} else if ( onSplit ) {\n\t\t\tmode = 'AUTO';\n\t\t}\n\n\t\tconst pastedContent = saferPasteHandler( {\n\t\t\tHTML: pastedHtml,\n\t\t\tplainText: pastedText,\n\t\t\tmode,\n\t\t\ttagName: this.props.tagName,\n\t\t\tcanUserUseUnfilteredHTML: this.props.canUserUseUnfilteredHTML,\n\t\t} );\n\n\t\tif ( typeof pastedContent === 'string' ) {\n\t\t\tconst recordToInsert = create( { html: pastedContent } );\n\t\t\tconst insertedContent = insert( currentRecord, recordToInsert );\n\t\t\tconst newContent = this.valueToFormat( insertedContent );\n\t\t\tthis.lastEventCount = undefined;\n\t\t\tthis.lastContent = newContent;\n\t\t\tthis.props.onChange( this.lastContent );\n\t\t} else if ( onSplit ) {\n\t\t\tif ( ! pastedContent.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( shouldReplace ) {\n\t\t\t\tthis.props.onReplace( pastedContent );\n\t\t\t} else {\n\t\t\t\tthis.splitContent( currentRecord, pastedContent, isPasted );\n\t\t\t}\n\t\t}\n\t}\n\n\tonSelectionChange( start, end, text, event ) {\n\t\t// `end` can be less than `start` on iOS\n\t\t// Let's fix that here so `rich-text/slice` can work properly\n\t\tconst realStart = Math.min( start, end );\n\t\tconst realEnd = Math.max( start, end );\n\t\tconst noChange = this.state.start === start && this.state.end === end;\n\t\tconst isTyping = this.state.start + 1 === realStart;\n\t\tconst shouldKeepFormats = noChange || isTyping;\n\t\t// update format placeholder to continue writing in the current format\n\t\t// or set it to null if user jumped to another part in the text\n\t\tconst formatPlaceholder = shouldKeepFormats && this.state.formatPlaceholder ? {\n\t\t\t...this.state.formatPlaceholder,\n\t\t\tindex: realStart,\n\t\t} : null;\n\t\tthis.setState( {\n\t\t\tstart: realStart,\n\t\t\tend: realEnd,\n\t\t\tformatPlaceholder,\n\t\t} );\n\t\tthis.lastEventCount = event.nativeEvent.eventCount;\n\t\t// we don't want to refresh aztec as no content can have changed from this event\n\t\t// let's update lastContent to prevent that in shouldComponentUpdate\n\t\tthis.lastContent = this.removeRootTagsProduceByAztec( unescapeSpaces( text ) );\n\t\tthis.props.onChange( this.lastContent );\n\t}\n\n\tisEmpty() {\n\t\treturn isEmpty( this.formatToValue( this.props.value ) );\n\t}\n\n\t/**\n\t * Creates a RichText value \"record\" from native content and selection\n\t * information\n\t *\n\t * @param {string} currentContent The content (usually an HTML string) from\n\t *                                the native component.\n\t * @param {number}    selectionStart The start of the selection.\n\t * @param {number}      selectionEnd The end of the selection (same as start if\n\t *                                cursor instead of selection).\n\t *\n   * @return {Object} A RichText value with formats and selection.\n\t */\n\tcreateRecord( { currentContent, selectionStart, selectionEnd } ) {\n\t\t// strip outer <p> tags\n\t\tconst innerContent = this.removeRootTagsProduceByAztec( currentContent );\n\n\t\t// create record (with selection) from current contents\n\t\tconst currentRecord = {\n\t\t\tstart: selectionStart,\n\t\t\tend: selectionEnd,\n\t\t\t...create( {\n\t\t\t\thtml: innerContent,\n\t\t\t\trange: null,\n\t\t\t\tmultilineTag: false,\n\t\t\t} ),\n\t\t};\n\n\t\treturn currentRecord;\n\t}\n\n\tformatToValue( value ) {\n\t\t// Handle deprecated `children` and `node` sources.\n\t\tif ( Array.isArray( value ) ) {\n\t\t\treturn create( {\n\t\t\t\thtml: children.toHTML( value ),\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.props.format === 'string' ) {\n\t\t\treturn create( {\n\t\t\t\thtml: value,\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t} );\n\t\t}\n\n\t\t// Guard for blocks passing `null` in onSplit callbacks. May be removed\n\t\t// if onSplit is revised to not pass a `null` value.\n\t\tif ( value === null ) {\n\t\t\treturn create();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tshouldComponentUpdate( nextProps ) {\n\t\tif ( nextProps.tagName !== this.props.tagName || nextProps.isSelected !== this.props.isSelected ) {\n\t\t\tthis.lastEventCount = undefined;\n\t\t\tthis.lastContent = undefined;\n\t\t\treturn true;\n\t\t}\n\n\t\t// TODO: Please re-introduce the check to avoid updating the content right after an `onChange` call.\n\t\t// It was removed in https://github.com/WordPress/gutenberg/pull/12417 to fix undo/redo problem.\n\n\t\t// If the component is changed React side (undo/redo/merging/splitting/custom text actions)\n\t\t// we need to make sure the native is updated as well\n\t\tif ( ( typeof nextProps.value !== 'undefined' ) &&\n\t\t\t( typeof this.lastContent !== 'undefined' ) &&\n\t\t\tnextProps.value !== this.lastContent ) {\n\t\t\tthis.lastEventCount = undefined; // force a refresh on the native side\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tcomponentDidMount() {\n\t\tif ( this.props.isSelected ) {\n\t\t\tthis._editor.focus();\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif ( this._editor.isFocused() ) {\n\t\t\tthis._editor.blur();\n\t\t}\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tif ( this.props.isSelected && ! prevProps.isSelected ) {\n\t\t\tthis._editor.focus();\n\t\t} else if ( ! this.props.isSelected && prevProps.isSelected && this.isIOS ) {\n\t\t\tthis._editor.blur();\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\ttagName,\n\t\t\tstyle,\n\t\t\tformattingControls,\n\t\t\tisSelected,\n\t\t} = this.props;\n\n\t\tconst record = this.getRecord();\n\t\t// Save back to HTML from React tree\n\t\tconst value = this.valueToFormat( record );\n\t\tlet html = `<${ tagName }>${ value }</${ tagName }>`;\n\t\t// We need to check if the value is undefined or empty, and then assign it properly otherwise the placeholder is not visible\n\t\tif ( value === undefined || value === '' ) {\n\t\t\thtml = '';\n\t\t\tthis.lastEventCount = undefined; // force a refresh on the native side\n\t\t}\n\n\t\tlet minHeight = styles[ 'block-editor-rich-text' ].minHeight;\n\t\tif ( style && style.minHeight ) {\n\t\t\tminHeight = style.minHeight;\n\t\t}\n\n\t\tconst selection = this.state.needsSelectionUpdate ? { start: this.state.start, end: this.state.end } : null;\n\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t{ isSelected && (\n\t\t\t\t\t<BlockFormatControls>\n\t\t\t\t\t\t<FormatToolbar controls={ formattingControls } />\n\t\t\t\t\t</BlockFormatControls>\n\t\t\t\t) }\n\t\t\t\t<RCTAztecView\n\t\t\t\t\tref={ ( ref ) => {\n\t\t\t\t\t\tthis._editor = ref;\n\n\t\t\t\t\t\tif ( this.props.setRef ) {\n\t\t\t\t\t\t\tthis.props.setRef( ref );\n\t\t\t\t\t\t}\n\t\t\t\t\t} }\n\t\t\t\t\tstyle={ {\n\t\t\t\t\t\t...style,\n\t\t\t\t\t\tminHeight: Math.max( minHeight, this.state.height ),\n\t\t\t\t\t} }\n\t\t\t\t\ttext={ { text: html, eventCount: this.lastEventCount, selection } }\n\t\t\t\t\tplaceholder={ this.props.placeholder }\n\t\t\t\t\tplaceholderTextColor={ this.props.placeholderTextColor || styles[ 'block-editor-rich-text' ].textDecorationColor }\n\t\t\t\t\tonChange={ this.onChange }\n\t\t\t\t\tonFocus={ this.props.onFocus }\n\t\t\t\t\tonBlur={ this.props.onBlur }\n\t\t\t\t\tonEnter={ this.onEnter }\n\t\t\t\t\tonBackspace={ this.onBackspace }\n\t\t\t\t\tonPaste={ this.onPaste }\n\t\t\t\t\tactiveFormats={ this.getActiveFormatNames( record ) }\n\t\t\t\t\tonContentSizeChange={ this.onContentSizeChange }\n\t\t\t\t\tonCaretVerticalPositionChange={ this.props.onCaretVerticalPositionChange }\n\t\t\t\t\tonSelectionChange={ this.onSelectionChange }\n\t\t\t\t\tisSelected={ isSelected }\n\t\t\t\t\tblockType={ { tag: tagName } }\n\t\t\t\t\tcolor={ 'black' }\n\t\t\t\t\tmaxImagesWidth={ 200 }\n\t\t\t\t\tfontFamily={ this.props.fontFamily || styles[ 'block-editor-rich-text' ].fontFamily }\n\t\t\t\t\tfontSize={ this.props.fontSize }\n\t\t\t\t\tfontWeight={ this.props.fontWeight }\n\t\t\t\t\tfontStyle={ this.props.fontStyle }\n\t\t\t\t\tdisableEditingMenu={ this.props.disableEditingMenu }\n\t\t\t\t/>\n\t\t\t\t{ isSelected && <FormatEdit value={ record } onChange={ this.onFormatChange } /> }\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nRichText.defaultProps = {\n\tformattingControls: [ 'bold', 'italic', 'link', 'strikethrough' ],\n\tformat: 'string',\n};\n\nconst RichTextContainer = compose( [\n\twithInstanceId,\n\twithSelect( ( select ) => {\n\t\tconst { getFormatTypes } = select( 'core/rich-text' );\n\n\t\treturn {\n\t\t\tformatTypes: getFormatTypes(),\n\t\t};\n\t} ),\n] )( RichText );\n\nRichTextContainer.Content = ( { value, format, tagName: Tag, ...props } ) => {\n\tlet content;\n\tswitch ( format ) {\n\t\tcase 'string':\n\t\t\tcontent = <RawHTML>{ value }</RawHTML>;\n\t\t\tbreak;\n\t}\n\n\tif ( Tag ) {\n\t\treturn <Tag { ...props }>{ content }</Tag>;\n\t}\n\n\treturn content;\n};\n\nRichTextContainer.isEmpty = isRichTextValueEmpty;\n\nRichTextContainer.Content.defaultProps = {\n\tformat: 'string',\n};\n\nexport default RichTextContainer;\nexport { RichTextShortcut } from './shortcut';\nexport { RichTextToolbarButton } from './toolbar-button';\nexport { UnstableRichTextInputEvent } from './input-event';\n"]}