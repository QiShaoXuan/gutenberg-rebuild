{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/index.js"],"names":["classnames","find","isNil","isEqual","omit","pickBy","get","isPlainObject","memize","Component","Fragment","RawHTML","isHorizontalEdge","createBlobURL","BACKSPACE","DELETE","ENTER","LEFT","RIGHT","SPACE","withDispatch","withSelect","pasteHandler","children","getBlockTransforms","findTransform","withInstanceId","withSafeTimeout","compose","isURL","isEmpty","create","apply","applyFormat","split","toHTMLString","getTextContent","insert","insertLineBreak","insertLineSeparator","isEmptyLine","unstableToDom","remove","removeFormat","isCollapsed","LINE_SEPARATOR","indentListItems","__unstableGetActiveFormats","__unstableUpdateFormats","decodeEntities","withFilters","IsolatedEventContainer","deprecated","Autocomplete","BlockFormatControls","FormatEdit","FormatToolbar","Editable","pickAriaProps","getPatterns","withBlockEditContext","ListEdit","RemoveBrowserShortcuts","window","getSelection","getComputedStyle","INSERTION_INPUT_TYPES_TO_IGNORE","Set","globalStyle","document","createElement","head","appendChild","RichText","value","onReplace","multiline","arguments","multilineTag","multilineWrapperTags","props","onSplit","plugin","alternative","unstableOnSplit","onFocus","bind","onBlur","onChange","onDeleteKeyDown","onKeyDown","onPaste","onCreateUndoLevel","setFocusedElement","onInput","onCompositionEnd","onSelectionChange","getRecord","createRecord","applyRecord","valueToFormat","setRef","valueToEditableHTML","handleHorizontalNavigation","onPointerDown","formatToValue","maxSize","savedContent","patterns","enterPatterns","filter","type","state","usedDeprecatedChildrenSource","Array","isArray","lastHistoryValue","removeEventListener","node","process","env","NODE_ENV","computedStyle","display","console","warn","editableRef","instanceId","formats","replacements","text","start","end","activeFormats","selection","range","rangeCount","getRangeAt","element","prepareEditableTree","__unstableIsEditableTree","record","domOnly","current","__unstableDomOnly","event","clipboardData","items","files","plainText","html","getData","error1","error2","preventDefault","log","item","test","file","getAsFile","content","HTML","mode","tagName","shouldReplace","splitContent","pastedText","replace","trim","attributes","href","canUserUseUnfilteredHTML","recordToInsert","length","paste","unstableOnFocus","recalculateBoundaryStyle","addEventListener","nativeEvent","isComposing","inputType","indexOf","has","change","withoutHistory","transformed","reduce","accumlator","transform","clearTimeout","timeout","setTimeout","isCaretWithinFormattedText","onEnterFormattedText","onExitFormattedText","setState","boundarySelector","querySelector","newColor","color","innerHTML","forEach","eventHandler","onChangeEditableValue","onMerge","onRemove","keyCode","isReverse","empty","isEdge","shiftKey","altKey","metaKey","ctrlKey","characterBefore","newValue","index","collapsed","newReplacements","slice","transformation","regExp","map","formatsBefore","formatsAfter","newActiveFormatsLength","source","newActiveFormats","newPos","blocks","context","before","after","target","textContent","parentNode","from","childNodes","ownerDocument","createRange","setStart","setEnd","removeAllRanges","addRange","prevProps","isSelected","prevRecord","shouldReapply","Object","keys","some","name","subName","propValue","startsWith","toHTML","format","body","formatTypes","formatType","__experimentalCreatePrepareEditableTree","removeEditorOnlyFormats","fromDOM","isEditableTree","Tagname","style","wrapperClassName","className","inlineToolbar","formattingControls","placeholder","keepPlaceholderOnFocus","autocompleters","onTagNameChange","key","MultilineTag","ariaProps","isPlaceholderVisible","classes","listBoxId","activeId","defaultProps","RichTextContainer","ownProps","clientId","focusedElement","select","getFormatTypes","dispatch","__unstableMarkLastChangeAsPersistent","enterFormattedText","exitFormattedText","Content","Tag","RichTextShortcut","RichTextToolbarButton","UnstableRichTextInputEvent"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport {\n\tfind,\n\tisNil,\n\tisEqual,\n\tomit,\n\tpickBy,\n\tget,\n\tisPlainObject,\n} from 'lodash';\nimport memize from 'memize';\n\n/**\n * WordPress dependencies\n */\nimport { Component, Fragment, RawHTML } from '@wordpress/element';\nimport { isHorizontalEdge } from '@wordpress/dom';\nimport { createBlobURL } from '@wordpress/blob';\nimport { BACKSPACE, DELETE, ENTER, LEFT, RIGHT, SPACE } from '@wordpress/keycodes';\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { pasteHandler, children, getBlockTransforms, findTransform } from '@wordpress/blocks';\nimport { withInstanceId, withSafeTimeout, compose } from '@wordpress/compose';\nimport { isURL } from '@wordpress/url';\nimport {\n\tisEmpty,\n\tcreate,\n\tapply,\n\tapplyFormat,\n\tsplit,\n\ttoHTMLString,\n\tgetTextContent,\n\tinsert,\n\tinsertLineBreak,\n\tinsertLineSeparator,\n\tisEmptyLine,\n\tunstableToDom,\n\tremove,\n\tremoveFormat,\n\tisCollapsed,\n\tLINE_SEPARATOR,\n\tindentListItems,\n\t__unstableGetActiveFormats,\n\t__unstableUpdateFormats,\n} from '@wordpress/rich-text';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { withFilters, IsolatedEventContainer } from '@wordpress/components';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport Autocomplete from '../autocomplete';\nimport BlockFormatControls from '../block-format-controls';\nimport FormatEdit from './format-edit';\nimport FormatToolbar from './format-toolbar';\nimport Editable from './editable';\nimport { pickAriaProps } from './aria';\nimport { getPatterns } from './patterns';\nimport { withBlockEditContext } from '../block-edit/context';\nimport { ListEdit } from './list-edit';\nimport { RemoveBrowserShortcuts } from './remove-browser-shortcuts';\n\n/**\n * Browser dependencies\n */\n\nconst { getSelection, getComputedStyle } = window;\n\n/**\n * All inserting input types that would insert HTML into the DOM.\n *\n * @see  https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes\n *\n * @type {Set}\n */\nconst INSERTION_INPUT_TYPES_TO_IGNORE = new Set( [\n\t'insertParagraph',\n\t'insertOrderedList',\n\t'insertUnorderedList',\n\t'insertHorizontalRule',\n\t'insertLink',\n] );\n\n/**\n * Global stylesheet.\n */\nconst globalStyle = document.createElement( 'style' );\n\ndocument.head.appendChild( globalStyle );\n\nexport class RichText extends Component {\n\tconstructor( { value, onReplace, multiline } ) {\n\t\tsuper( ...arguments );\n\n\t\tif ( multiline === true || multiline === 'p' || multiline === 'li' ) {\n\t\t\tthis.multilineTag = multiline === true ? 'p' : multiline;\n\t\t}\n\n\t\tif ( this.multilineTag === 'li' ) {\n\t\t\tthis.multilineWrapperTags = [ 'ul', 'ol' ];\n\t\t}\n\n\t\tif ( this.props.onSplit ) {\n\t\t\tthis.onSplit = this.props.onSplit;\n\n\t\t\tdeprecated( 'wp.editor.RichText onSplit prop', {\n\t\t\t\tplugin: 'Gutenberg',\n\t\t\t\talternative: 'wp.editor.RichText unstableOnSplit prop',\n\t\t\t} );\n\t\t} else if ( this.props.unstableOnSplit ) {\n\t\t\tthis.onSplit = this.props.unstableOnSplit;\n\t\t}\n\n\t\tthis.onFocus = this.onFocus.bind( this );\n\t\tthis.onBlur = this.onBlur.bind( this );\n\t\tthis.onChange = this.onChange.bind( this );\n\t\tthis.onDeleteKeyDown = this.onDeleteKeyDown.bind( this );\n\t\tthis.onKeyDown = this.onKeyDown.bind( this );\n\t\tthis.onPaste = this.onPaste.bind( this );\n\t\tthis.onCreateUndoLevel = this.onCreateUndoLevel.bind( this );\n\t\tthis.setFocusedElement = this.setFocusedElement.bind( this );\n\t\tthis.onInput = this.onInput.bind( this );\n\t\tthis.onCompositionEnd = this.onCompositionEnd.bind( this );\n\t\tthis.onSelectionChange = this.onSelectionChange.bind( this );\n\t\tthis.getRecord = this.getRecord.bind( this );\n\t\tthis.createRecord = this.createRecord.bind( this );\n\t\tthis.applyRecord = this.applyRecord.bind( this );\n\t\tthis.isEmpty = this.isEmpty.bind( this );\n\t\tthis.valueToFormat = this.valueToFormat.bind( this );\n\t\tthis.setRef = this.setRef.bind( this );\n\t\tthis.valueToEditableHTML = this.valueToEditableHTML.bind( this );\n\t\tthis.handleHorizontalNavigation = this.handleHorizontalNavigation.bind( this );\n\t\tthis.onPointerDown = this.onPointerDown.bind( this );\n\n\t\tthis.formatToValue = memize(\n\t\t\tthis.formatToValue.bind( this ),\n\t\t\t{ maxSize: 1 }\n\t\t);\n\n\t\tthis.savedContent = value;\n\t\tthis.patterns = getPatterns( {\n\t\t\tonReplace,\n\t\t\tvalueToFormat: this.valueToFormat,\n\t\t} );\n\t\tthis.enterPatterns = getBlockTransforms( 'from' )\n\t\t\t.filter( ( { type } ) => type === 'enter' );\n\n\t\tthis.state = {};\n\n\t\tthis.usedDeprecatedChildrenSource = Array.isArray( value );\n\t\tthis.lastHistoryValue = value;\n\t}\n\n\tcomponentWillUnmount() {\n\t\tdocument.removeEventListener( 'selectionchange', this.onSelectionChange );\n\t}\n\n\tsetRef( node ) {\n\t\tif ( node ) {\n\t\t\tif ( process.env.NODE_ENV === 'development' ) {\n\t\t\t\tconst computedStyle = getComputedStyle( node );\n\n\t\t\t\tif ( computedStyle.display === 'inline' ) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.warn( 'RichText cannot be used with an inline container. Please use a different tagName.' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.editableRef = node;\n\t\t} else {\n\t\t\tdelete this.editableRef;\n\t\t}\n\t}\n\n\tsetFocusedElement() {\n\t\tif ( this.props.setFocusedElement ) {\n\t\t\tthis.props.setFocusedElement( this.props.instanceId );\n\t\t}\n\t}\n\n\t/**\n\t * Get the current record (value and selection) from props and state.\n\t *\n\t * @return {Object} The current record (value and selection).\n\t */\n\tgetRecord() {\n\t\tconst { formats, replacements, text } = this.formatToValue( this.props.value );\n\t\tconst { start, end, activeFormats } = this.state;\n\n\t\treturn { formats, replacements, text, start, end, activeFormats };\n\t}\n\n\tcreateRecord() {\n\t\tconst selection = getSelection();\n\t\tconst range = selection.rangeCount > 0 ? selection.getRangeAt( 0 ) : null;\n\n\t\treturn create( {\n\t\t\telement: this.editableRef,\n\t\t\trange,\n\t\t\tmultilineTag: this.multilineTag,\n\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\tprepareEditableTree: this.props.prepareEditableTree,\n\t\t\t__unstableIsEditableTree: true,\n\t\t} );\n\t}\n\n\tapplyRecord( record, { domOnly } = {} ) {\n\t\tapply( {\n\t\t\tvalue: record,\n\t\t\tcurrent: this.editableRef,\n\t\t\tmultilineTag: this.multilineTag,\n\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\tprepareEditableTree: this.props.prepareEditableTree,\n\t\t\t__unstableDomOnly: domOnly,\n\t\t} );\n\t}\n\n\tisEmpty() {\n\t\treturn isEmpty( this.formatToValue( this.props.value ) );\n\t}\n\n\t/**\n\t * Handles a paste event.\n\t *\n\t * Saves the pasted data as plain text in `pastedPlainText`.\n\t *\n\t * @param {PasteEvent} event The paste event.\n\t */\n\tonPaste( event ) {\n\t\tconst clipboardData = event.clipboardData;\n\t\tlet { items, files } = clipboardData;\n\n\t\t// In Edge these properties can be null instead of undefined, so a more\n\t\t// rigorous test is required over using default values.\n\t\titems = isNil( items ) ? [] : items;\n\t\tfiles = isNil( files ) ? [] : files;\n\n\t\tlet plainText = '';\n\t\tlet html = '';\n\n\t\t// IE11 only supports `Text` as an argument for `getData` and will\n\t\t// otherwise throw an invalid argument error, so we try the standard\n\t\t// arguments first, then fallback to `Text` if they fail.\n\t\ttry {\n\t\t\tplainText = clipboardData.getData( 'text/plain' );\n\t\t\thtml = clipboardData.getData( 'text/html' );\n\t\t} catch ( error1 ) {\n\t\t\ttry {\n\t\t\t\thtml = clipboardData.getData( 'Text' );\n\t\t\t} catch ( error2 ) {\n\t\t\t\t// Some browsers like UC Browser paste plain text by default and\n\t\t\t\t// don't support clipboardData at all, so allow default\n\t\t\t\t// behaviour.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tevent.preventDefault();\n\n\t\t// Allows us to ask for this information when we get a report.\n\t\twindow.console.log( 'Received HTML:\\n\\n', html );\n\t\twindow.console.log( 'Received plain text:\\n\\n', plainText );\n\n\t\t// Only process file if no HTML is present.\n\t\t// Note: a pasted file may have the URL as plain text.\n\t\tconst item = find( [ ...items, ...files ], ( { type } ) => /^image\\/(?:jpe?g|png|gif)$/.test( type ) );\n\t\tif ( item && ! html ) {\n\t\t\tconst file = item.getAsFile ? item.getAsFile() : item;\n\t\t\tconst content = pasteHandler( {\n\t\t\t\tHTML: `<img src=\"${ createBlobURL( file ) }\">`,\n\t\t\t\tmode: 'BLOCKS',\n\t\t\t\ttagName: this.props.tagName,\n\t\t\t} );\n\t\t\tconst shouldReplace = this.props.onReplace && this.isEmpty();\n\n\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\twindow.console.log( 'Received item:\\n\\n', file );\n\n\t\t\tif ( shouldReplace ) {\n\t\t\t\tthis.props.onReplace( content );\n\t\t\t} else if ( this.onSplit ) {\n\t\t\t\tthis.splitContent( content );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst record = this.getRecord();\n\n\t\t// There is a selection, check if a URL is pasted.\n\t\tif ( ! isCollapsed( record ) ) {\n\t\t\tconst pastedText = ( html || plainText ).replace( /<[^>]+>/g, '' ).trim();\n\n\t\t\t// A URL was pasted, turn the selection into a link\n\t\t\tif ( isURL( pastedText ) ) {\n\t\t\t\tthis.onChange( applyFormat( record, {\n\t\t\t\t\ttype: 'a',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\thref: decodeEntities( pastedText ),\n\t\t\t\t\t},\n\t\t\t\t} ) );\n\n\t\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\t\twindow.console.log( 'Created link:\\n\\n', pastedText );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst shouldReplace = this.props.onReplace && this.isEmpty();\n\n\t\tlet mode = 'INLINE';\n\n\t\tif ( shouldReplace ) {\n\t\t\tmode = 'BLOCKS';\n\t\t} else if ( this.onSplit ) {\n\t\t\tmode = 'AUTO';\n\t\t}\n\n\t\tconst content = pasteHandler( {\n\t\t\tHTML: html,\n\t\t\tplainText,\n\t\t\tmode,\n\t\t\ttagName: this.props.tagName,\n\t\t\tcanUserUseUnfilteredHTML: this.props.canUserUseUnfilteredHTML,\n\t\t} );\n\n\t\tif ( typeof content === 'string' ) {\n\t\t\tconst recordToInsert = create( { html: content } );\n\t\t\tthis.onChange( insert( record, recordToInsert ) );\n\t\t} else if ( this.onSplit ) {\n\t\t\tif ( ! content.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( shouldReplace ) {\n\t\t\t\tthis.props.onReplace( content );\n\t\t\t} else {\n\t\t\t\tthis.splitContent( content, { paste: true } );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles a focus event on the contenteditable field, calling the\n\t * `unstableOnFocus` prop callback if one is defined. The callback does not\n\t * receive any arguments.\n\t *\n\t * This is marked as a private API and the `unstableOnFocus` prop is not\n\t * documented, as the current requirements where it is used are subject to\n\t * future refactoring following `isSelected` handling.\n\t *\n\t * In contrast with `setFocusedElement`, this is only triggered in response\n\t * to focus within the contenteditable field, whereas `setFocusedElement`\n\t * is triggered on focus within any `RichText` descendent element.\n\t *\n\t * @see setFocusedElement\n\t *\n\t * @private\n\t */\n\tonFocus() {\n\t\tconst { unstableOnFocus } = this.props;\n\t\tif ( unstableOnFocus ) {\n\t\t\tunstableOnFocus();\n\t\t}\n\n\t\tthis.recalculateBoundaryStyle();\n\n\t\tdocument.addEventListener( 'selectionchange', this.onSelectionChange );\n\t}\n\n\tonBlur() {\n\t\tdocument.removeEventListener( 'selectionchange', this.onSelectionChange );\n\t}\n\n\t/**\n\t * Handle input on the next selection change event.\n\t *\n\t * @param {SyntheticEvent} event Synthetic input event.\n\t */\n\tonInput( event ) {\n\t\t// For Input Method Editor (IME), used in Chinese, Japanese, and Korean\n\t\t// (CJK), do not trigger a change if characters are being composed.\n\t\t// Browsers setting `isComposing` to `true` will usually emit a final\n\t\t// `input` event when the characters are composed.\n\t\tif ( event && event.nativeEvent.isComposing ) {\n\t\t\t// Also don't update any selection.\n\t\t\tdocument.removeEventListener( 'selectionchange', this.onSelectionChange );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( event && event.nativeEvent.inputType ) {\n\t\t\tconst { inputType } = event.nativeEvent;\n\n\t\t\t// The browser formatted something or tried to insert HTML.\n\t\t\t// Overwrite it. It will be handled later by the format library if\n\t\t\t// needed.\n\t\t\tif (\n\t\t\t\tinputType.indexOf( 'format' ) === 0 ||\n\t\t\t\tINSERTION_INPUT_TYPES_TO_IGNORE.has( inputType )\n\t\t\t) {\n\t\t\t\tthis.applyRecord( this.getRecord() );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst value = this.createRecord();\n\t\tconst { activeFormats = [], start } = this.state;\n\n\t\t// Update the formats between the last and new caret position.\n\t\tconst change = __unstableUpdateFormats( {\n\t\t\tvalue,\n\t\t\tstart,\n\t\t\tend: value.start,\n\t\t\tformats: activeFormats,\n\t\t} );\n\n\t\tthis.onChange( change, { withoutHistory: true } );\n\n\t\tconst transformed = this.patterns.reduce(\n\t\t\t( accumlator, transform ) => transform( accumlator ),\n\t\t\tchange\n\t\t);\n\n\t\tif ( transformed !== change ) {\n\t\t\tthis.onCreateUndoLevel();\n\t\t\tthis.onChange( { ...transformed, activeFormats } );\n\t\t}\n\n\t\t// Create an undo level when input stops for over a second.\n\t\tthis.props.clearTimeout( this.onInput.timeout );\n\t\tthis.onInput.timeout = this.props.setTimeout( this.onCreateUndoLevel, 1000 );\n\t}\n\n\tonCompositionEnd() {\n\t\t// Ensure the value is up-to-date for browsers that don't emit a final\n\t\t// input event after composition.\n\t\tthis.onInput();\n\t\t// Tracking selection changes can be resumed.\n\t\tdocument.addEventListener( 'selectionchange', this.onSelectionChange );\n\t}\n\n\t/**\n\t * Handles the `selectionchange` event: sync the selection to local state.\n\t */\n\tonSelectionChange() {\n\t\tconst value = this.createRecord();\n\t\tconst { start, end } = value;\n\n\t\tif ( start !== this.state.start || end !== this.state.end ) {\n\t\t\tconst { isCaretWithinFormattedText } = this.props;\n\t\t\tconst activeFormats = __unstableGetActiveFormats( value );\n\n\t\t\tif ( ! isCaretWithinFormattedText && activeFormats.length ) {\n\t\t\t\tthis.props.onEnterFormattedText();\n\t\t\t} else if ( isCaretWithinFormattedText && ! activeFormats.length ) {\n\t\t\t\tthis.props.onExitFormattedText();\n\t\t\t}\n\n\t\t\tthis.setState( { start, end, activeFormats } );\n\t\t\tthis.applyRecord( { ...value, activeFormats }, { domOnly: true } );\n\n\t\t\tif ( activeFormats.length > 0 ) {\n\t\t\t\tthis.recalculateBoundaryStyle();\n\t\t\t}\n\t\t}\n\t}\n\n\trecalculateBoundaryStyle() {\n\t\tconst boundarySelector = '*[data-rich-text-format-boundary]';\n\t\tconst element = this.editableRef.querySelector( boundarySelector );\n\n\t\tif ( element ) {\n\t\t\tconst computedStyle = getComputedStyle( element );\n\t\t\tconst newColor = computedStyle.color\n\t\t\t\t.replace( ')', ', 0.2)' )\n\t\t\t\t.replace( 'rgb', 'rgba' );\n\n\t\t\tglobalStyle.innerHTML =\n\t\t\t\t`*:focus ${ boundarySelector }{background-color: ${ newColor }}`;\n\t\t}\n\t}\n\n\t/**\n\t * Calls all registered onChangeEditableValue handlers.\n\t *\n\t * @param {Array}  formats The formats of the latest rich-text value.\n\t * @param {string} text    The text of the latest rich-text value.\n\t */\n\tonChangeEditableValue( { formats, text } ) {\n\t\tget( this.props, [ 'onChangeEditableValue' ], [] ).forEach( ( eventHandler ) => {\n\t\t\teventHandler( formats, text );\n\t\t} );\n\t}\n\n\t/**\n\t * Sync the value to global state. The node tree and selection will also be\n\t * updated if differences are found.\n\t *\n\t * @param {Object}  record            The record to sync and apply.\n\t * @param {Object}  $2                Named options.\n\t * @param {boolean} $2.withoutHistory If true, no undo level will be\n\t *                                    created.\n\t */\n\tonChange( record, { withoutHistory } = {} ) {\n\t\tthis.applyRecord( record );\n\n\t\tconst { start, end, activeFormats = [] } = record;\n\n\t\tthis.onChangeEditableValue( record );\n\t\tthis.savedContent = this.valueToFormat( record );\n\t\tthis.props.onChange( this.savedContent );\n\t\tthis.setState( { start, end, activeFormats } );\n\n\t\tif ( ! withoutHistory ) {\n\t\t\tthis.onCreateUndoLevel();\n\t\t}\n\t}\n\n\tonCreateUndoLevel() {\n\t\t// If the content is the same, no level needs to be created.\n\t\tif ( this.lastHistoryValue === this.savedContent ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.props.onCreateUndoLevel();\n\t\tthis.lastHistoryValue = this.savedContent;\n\t}\n\n\t/**\n\t * Handles a delete keyDown event to handle merge or removal for collapsed\n\t * selection where caret is at directional edge: forward for a delete key,\n\t * reverse for a backspace key.\n\t *\n\t * @link https://en.wikipedia.org/wiki/Caret_navigation\n\t *\n\t * @param {KeyboardEvent} event Keydown event.\n\t */\n\tonDeleteKeyDown( event ) {\n\t\tconst { onMerge, onRemove } = this.props;\n\t\tif ( ! onMerge && ! onRemove ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { keyCode } = event;\n\t\tconst isReverse = keyCode === BACKSPACE;\n\n\t\t// Only process delete if the key press occurs at uncollapsed edge.\n\t\tif ( ! isCollapsed( this.createRecord() ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst empty = this.isEmpty();\n\n\t\t// It is important to consider emptiness because an empty container\n\t\t// will include a padding BR node _after_ the caret, so in a forward\n\t\t// deletion the isHorizontalEdge function will incorrectly interpret the\n\t\t// presence of the BR node as not being at the edge.\n\t\tconst isEdge = ( empty || isHorizontalEdge( this.editableRef, isReverse ) );\n\n\t\tif ( ! isEdge ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( onMerge ) {\n\t\t\tonMerge( ! isReverse );\n\t\t}\n\n\t\t// Only handle remove on Backspace. This serves dual-purpose of being\n\t\t// an intentional user interaction distinguishing between Backspace and\n\t\t// Delete to remove the empty field, but also to avoid merge & remove\n\t\t// causing destruction of two fields (merge, then removed merged).\n\t\tif ( onRemove && empty && isReverse ) {\n\t\t\tonRemove( ! isReverse );\n\t\t}\n\n\t\tevent.preventDefault();\n\t}\n\n\t/**\n\t * Handles a keydown event.\n\t *\n\t * @param {SyntheticEvent} event A synthetic keyboard event.\n\t */\n\tonKeyDown( event ) {\n\t\tconst { keyCode, shiftKey, altKey, metaKey, ctrlKey } = event;\n\n\t\tif (\n\t\t\t// Only override left and right keys without modifiers pressed.\n\t\t\t! shiftKey && ! altKey && ! metaKey && ! ctrlKey &&\n\t\t\t( keyCode === LEFT || keyCode === RIGHT )\n\t\t) {\n\t\t\tthis.handleHorizontalNavigation( event );\n\t\t}\n\n\t\t// Use the space key in list items (at the start of an item) to indent\n\t\t// the list item.\n\t\tif ( keyCode === SPACE && this.multilineTag === 'li' ) {\n\t\t\tconst value = this.createRecord();\n\n\t\t\tif ( isCollapsed( value ) ) {\n\t\t\t\tconst { text, start } = value;\n\t\t\t\tconst characterBefore = text[ start - 1 ];\n\n\t\t\t\t// The caret must be at the start of a line.\n\t\t\t\tif ( ! characterBefore || characterBefore === LINE_SEPARATOR ) {\n\t\t\t\t\tthis.onChange( indentListItems( value, { type: this.props.tagName } ) );\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( keyCode === DELETE || keyCode === BACKSPACE ) {\n\t\t\tconst value = this.createRecord();\n\t\t\tconst { replacements, text, start, end } = value;\n\n\t\t\t// Always handle full content deletion ourselves.\n\t\t\tif ( start === 0 && end !== 0 && end === value.text.length ) {\n\t\t\t\tthis.onChange( remove( value ) );\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this.multilineTag ) {\n\t\t\t\tlet newValue;\n\n\t\t\t\tif ( keyCode === BACKSPACE ) {\n\t\t\t\t\tconst index = start - 1;\n\n\t\t\t\t\tif ( text[ index ] === LINE_SEPARATOR ) {\n\t\t\t\t\t\tconst collapsed = isCollapsed( value );\n\n\t\t\t\t\t\t// If the line separator that is about te be removed\n\t\t\t\t\t\t// contains wrappers, remove the wrappers first.\n\t\t\t\t\t\tif ( collapsed && replacements[ index ] && replacements[ index ].length ) {\n\t\t\t\t\t\t\tconst newReplacements = replacements.slice();\n\n\t\t\t\t\t\t\tnewReplacements[ index ] = replacements[ index ].slice( 0, -1 );\n\t\t\t\t\t\t\tnewValue = {\n\t\t\t\t\t\t\t\t...value,\n\t\t\t\t\t\t\t\treplacements: newReplacements,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewValue = remove(\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t// Only remove the line if the selection is\n\t\t\t\t\t\t\t\t// collapsed, otherwise remove the selection.\n\t\t\t\t\t\t\t\tcollapsed ? start - 1 : start,\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( text[ end ] === LINE_SEPARATOR ) {\n\t\t\t\t\tconst collapsed = isCollapsed( value );\n\n\t\t\t\t\t// If the line separator that is about te be removed\n\t\t\t\t\t// contains wrappers, remove the wrappers first.\n\t\t\t\t\tif ( collapsed && replacements[ end ] && replacements[ end ].length ) {\n\t\t\t\t\t\tconst newReplacements = replacements.slice();\n\n\t\t\t\t\t\tnewReplacements[ end ] = replacements[ end ].slice( 0, -1 );\n\t\t\t\t\t\tnewValue = {\n\t\t\t\t\t\t\t...value,\n\t\t\t\t\t\t\treplacements: newReplacements,\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewValue = remove(\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tstart,\n\t\t\t\t\t\t\t// Only remove the line if the selection is\n\t\t\t\t\t\t\t// collapsed, otherwise remove the selection.\n\t\t\t\t\t\t\tcollapsed ? end + 1 : end,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( newValue ) {\n\t\t\t\t\tthis.onChange( newValue );\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.onDeleteKeyDown( event );\n\t\t} else if ( keyCode === ENTER ) {\n\t\t\tevent.preventDefault();\n\n\t\t\tconst record = this.createRecord();\n\n\t\t\tif ( this.props.onReplace ) {\n\t\t\t\tconst text = getTextContent( record );\n\t\t\t\tconst transformation = findTransform( this.enterPatterns, ( item ) => {\n\t\t\t\t\treturn item.regExp.test( text );\n\t\t\t\t} );\n\n\t\t\t\tif ( transformation ) {\n\t\t\t\t\tthis.props.onReplace( [\n\t\t\t\t\t\ttransformation.transform( { content: text } ),\n\t\t\t\t\t] );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( this.multilineTag ) {\n\t\t\t\tif ( event.shiftKey ) {\n\t\t\t\t\tthis.onChange( insertLineBreak( record ) );\n\t\t\t\t} else if ( this.onSplit && isEmptyLine( record ) ) {\n\t\t\t\t\tthis.onSplit( ...split( record ).map( this.valueToFormat ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis.onChange( insertLineSeparator( record ) );\n\t\t\t\t}\n\t\t\t} else if ( event.shiftKey || ! this.onSplit ) {\n\t\t\t\tthis.onChange( insertLineBreak( record ) );\n\t\t\t} else {\n\t\t\t\tthis.splitContent();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles horizontal keyboard navigation when no modifiers are pressed. The\n\t * navigation is handled separately to move correctly around format\n\t * boundaries.\n\t *\n\t * @param  {SyntheticEvent} event A synthetic keyboard event.\n\t */\n\thandleHorizontalNavigation( event ) {\n\t\tconst value = this.createRecord();\n\t\tconst { formats, text, start, end } = value;\n\t\tconst { activeFormats = [] } = this.state;\n\t\tconst collapsed = isCollapsed( value );\n\t\tconst isReverse = event.keyCode === LEFT;\n\n\t\t// If the selection is collapsed and at the very start, do nothing if\n\t\t// navigating backward.\n\t\t// If the selection is collapsed and at the very end, do nothing if\n\t\t// navigating forward.\n\t\tif ( collapsed && activeFormats.length === 0 ) {\n\t\t\tif ( start === 0 && isReverse ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( end === text.length && ! isReverse ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// If the selection is not collapsed, let the browser handle collapsing\n\t\t// the selection for now. Later we could expand this logic to set\n\t\t// boundary positions if needed.\n\t\tif ( ! collapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In all other cases, prevent default behaviour.\n\t\tevent.preventDefault();\n\n\t\tconst formatsBefore = formats[ start - 1 ] || [];\n\t\tconst formatsAfter = formats[ start ] || [];\n\n\t\tlet newActiveFormatsLength = activeFormats.length;\n\t\tlet source = formatsAfter;\n\n\t\tif ( formatsBefore.length > formatsAfter.length ) {\n\t\t\tsource = formatsBefore;\n\t\t}\n\n\t\t// If the amount of formats before the caret and after the caret is\n\t\t// different, the caret is at a format boundary.\n\t\tif ( formatsBefore.length < formatsAfter.length ) {\n\t\t\tif ( ! isReverse && activeFormats.length < formatsAfter.length ) {\n\t\t\t\tnewActiveFormatsLength++;\n\t\t\t}\n\n\t\t\tif ( isReverse && activeFormats.length > formatsBefore.length ) {\n\t\t\t\tnewActiveFormatsLength--;\n\t\t\t}\n\t\t} else if ( formatsBefore.length > formatsAfter.length ) {\n\t\t\tif ( ! isReverse && activeFormats.length > formatsAfter.length ) {\n\t\t\t\tnewActiveFormatsLength--;\n\t\t\t}\n\n\t\t\tif ( isReverse && activeFormats.length < formatsBefore.length ) {\n\t\t\t\tnewActiveFormatsLength++;\n\t\t\t}\n\t\t}\n\n\t\t// Wait for boundary class to be added.\n\t\tthis.props.setTimeout( () => this.recalculateBoundaryStyle() );\n\n\t\tif ( newActiveFormatsLength !== activeFormats.length ) {\n\t\t\tconst newActiveFormats = source.slice( 0, newActiveFormatsLength );\n\t\t\tthis.applyRecord( { ...value, activeFormats: newActiveFormats } );\n\t\t\tthis.setState( { activeFormats: newActiveFormats } );\n\t\t\treturn;\n\t\t}\n\n\t\tconst newPos = value.start + ( isReverse ? -1 : 1 );\n\n\t\tthis.setState( { start: newPos, end: newPos } );\n\t\tthis.applyRecord( {\n\t\t\t...value,\n\t\t\tstart: newPos,\n\t\t\tend: newPos,\n\t\t\tactiveFormats: isReverse ? formatsBefore : formatsAfter,\n\t\t} );\n\t}\n\n\t/**\n\t * Splits the content at the location of the selection.\n\t *\n\t * Replaces the content of the editor inside this element with the contents\n\t * before the selection. Sends the elements after the selection to the `onSplit`\n\t * handler.\n\t *\n\t * @param {Array}  blocks  The blocks to add after the split point.\n\t * @param {Object} context The context for splitting.\n\t */\n\tsplitContent( blocks = [], context = {} ) {\n\t\tif ( ! this.onSplit ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst record = this.createRecord();\n\t\tlet [ before, after ] = split( record );\n\n\t\t// In case split occurs at the trailing or leading edge of the field,\n\t\t// assume that the before/after values respectively reflect the current\n\t\t// value. This also provides an opportunity for the parent component to\n\t\t// determine whether the before/after value has changed using a trivial\n\t\t//  strict equality operation.\n\t\tif ( isEmpty( after ) ) {\n\t\t\tbefore = record;\n\t\t} else if ( isEmpty( before ) ) {\n\t\t\tafter = record;\n\t\t}\n\n\t\t// If pasting and the split would result in no content other than the\n\t\t// pasted blocks, remove the before and after blocks.\n\t\tif ( context.paste ) {\n\t\t\tbefore = isEmpty( before ) ? null : before;\n\t\t\tafter = isEmpty( after ) ? null : after;\n\t\t}\n\n\t\tif ( before ) {\n\t\t\tbefore = this.valueToFormat( before );\n\t\t}\n\n\t\tif ( after ) {\n\t\t\tafter = this.valueToFormat( after );\n\t\t}\n\n\t\tthis.onSplit( before, after, ...blocks );\n\t}\n\n\t/**\n\t * Select object when they are clicked. The browser will not set any\n\t * selection when clicking e.g. an image.\n\t *\n\t * @param  {SyntheticEvent} event Synthetic mousedown or touchstart event.\n\t */\n\tonPointerDown( event ) {\n\t\tconst { target } = event;\n\n\t\t// If the child element has no text content, it must be an object.\n\t\tif ( target === this.editableRef || target.textContent ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { parentNode } = target;\n\t\tconst index = Array.from( parentNode.childNodes ).indexOf( target );\n\t\tconst range = target.ownerDocument.createRange();\n\t\tconst selection = getSelection();\n\n\t\trange.setStart( target.parentNode, index );\n\t\trange.setEnd( target.parentNode, index + 1 );\n\n\t\tselection.removeAllRanges();\n\t\tselection.addRange( range );\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tconst { tagName, value, isSelected } = this.props;\n\n\t\tif (\n\t\t\ttagName === prevProps.tagName &&\n\t\t\tvalue !== prevProps.value &&\n\t\t\tvalue !== this.savedContent\n\t\t) {\n\t\t\t// Handle deprecated `children` and `node` sources.\n\t\t\t// The old way of passing a value with the `node` matcher required\n\t\t\t// the value to be mapped first, creating a new array each time, so\n\t\t\t// a shallow check wouldn't work. We need to check deep equality.\n\t\t\t// This is only executed for a deprecated API and will eventually be\n\t\t\t// removed.\n\t\t\tif ( Array.isArray( value ) && isEqual( value, this.savedContent ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst record = this.formatToValue( value );\n\n\t\t\tif ( isSelected ) {\n\t\t\t\tconst prevRecord = this.formatToValue( prevProps.value );\n\t\t\t\tconst length = getTextContent( prevRecord ).length;\n\t\t\t\trecord.start = length;\n\t\t\t\trecord.end = length;\n\t\t\t}\n\n\t\t\tthis.applyRecord( record );\n\t\t\tthis.savedContent = value;\n\t\t}\n\n\t\t// If any format props update, reapply value.\n\t\tconst shouldReapply = Object.keys( this.props ).some( ( name ) => {\n\t\t\tif ( name.indexOf( 'format_' ) !== 0 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Allow primitives and arrays:\n\t\t\tif ( ! isPlainObject( this.props[ name ] ) ) {\n\t\t\t\treturn this.props[ name ] !== prevProps[ name ];\n\t\t\t}\n\n\t\t\treturn Object.keys( this.props[ name ] ).some( ( subName ) => {\n\t\t\t\treturn this.props[ name ][ subName ] !== prevProps[ name ][ subName ];\n\t\t\t} );\n\t\t} );\n\n\t\tif ( shouldReapply ) {\n\t\t\tconst record = this.formatToValue( value );\n\n\t\t\t// Maintain the previous selection if the instance is currently\n\t\t\t// selected.\n\t\t\tif ( isSelected ) {\n\t\t\t\trecord.start = this.state.start;\n\t\t\t\trecord.end = this.state.end;\n\t\t\t}\n\n\t\t\tthis.applyRecord( record );\n\t\t}\n\t}\n\n\t/**\n\t * Get props that are provided by formats to modify RichText.\n\t *\n\t * @return {Object} Props that start with 'format_'.\n\t */\n\tgetFormatProps() {\n\t\treturn pickBy( this.props, ( propValue, name ) => name.startsWith( 'format_' ) );\n\t}\n\n\t/**\n\t * Converts the outside data structure to our internal representation.\n\t *\n\t * @param {*} value The outside value, data type depends on props.\n\t * @return {Object} An internal rich-text value.\n\t */\n\tformatToValue( value ) {\n\t\t// Handle deprecated `children` and `node` sources.\n\t\tif ( Array.isArray( value ) ) {\n\t\t\treturn create( {\n\t\t\t\thtml: children.toHTML( value ),\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.props.format === 'string' ) {\n\t\t\treturn create( {\n\t\t\t\thtml: value,\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\t} );\n\t\t}\n\n\t\t// Guard for blocks passing `null` in onSplit callbacks. May be removed\n\t\t// if onSplit is revised to not pass a `null` value.\n\t\tif ( value === null ) {\n\t\t\treturn create();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tvalueToEditableHTML( value ) {\n\t\treturn unstableToDom( {\n\t\t\tvalue,\n\t\t\tmultilineTag: this.multilineTag,\n\t\t\tprepareEditableTree: this.props.prepareEditableTree,\n\t\t} ).body.innerHTML;\n\t}\n\n\t/**\n\t * Removes editor only formats from the value.\n\t *\n\t * Editor only formats are applied using `prepareEditableTree`, so we need to\n\t * remove them before converting the internal state\n\t *\n\t * @param {Object} value The internal rich-text value.\n\t * @return {Object} A new rich-text value.\n\t */\n\tremoveEditorOnlyFormats( value ) {\n\t\tthis.props.formatTypes.forEach( ( formatType ) => {\n\t\t\t// Remove formats created by prepareEditableTree, because they are editor only.\n\t\t\tif ( formatType.__experimentalCreatePrepareEditableTree ) {\n\t\t\t\tvalue = removeFormat( value, formatType.name, 0, value.text.length );\n\t\t\t}\n\t\t} );\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Converts the internal value to the external data format.\n\t *\n\t * @param {Object} value The internal rich-text value.\n\t * @return {*} The external data format, data type depends on props.\n\t */\n\tvalueToFormat( value ) {\n\t\tvalue = this.removeEditorOnlyFormats( value );\n\n\t\t// Handle deprecated `children` and `node` sources.\n\t\tif ( this.usedDeprecatedChildrenSource ) {\n\t\t\treturn children.fromDOM( unstableToDom( {\n\t\t\t\tvalue,\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t\tisEditableTree: false,\n\t\t\t} ).body.childNodes );\n\t\t}\n\n\t\tif ( this.props.format === 'string' ) {\n\t\t\treturn toHTMLString( {\n\t\t\t\tvalue,\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t} );\n\t\t}\n\n\t\treturn value;\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\ttagName: Tagname = 'div',\n\t\t\tstyle,\n\t\t\twrapperClassName,\n\t\t\tclassName,\n\t\t\tinlineToolbar = false,\n\t\t\tformattingControls,\n\t\t\tplaceholder,\n\t\t\tkeepPlaceholderOnFocus = false,\n\t\t\tisSelected,\n\t\t\tautocompleters,\n\t\t\tonTagNameChange,\n\t\t} = this.props;\n\n\t\t// Generating a key that includes `tagName` ensures that if the tag\n\t\t// changes, we replace the relevant element. This is needed because we\n\t\t// prevent Editable component updates.\n\t\tconst key = Tagname;\n\t\tconst MultilineTag = this.multilineTag;\n\t\tconst ariaProps = pickAriaProps( this.props );\n\t\tconst isPlaceholderVisible = placeholder && ( ! isSelected || keepPlaceholderOnFocus ) && this.isEmpty();\n\t\tconst classes = classnames( wrapperClassName, 'editor-rich-text block-editor-rich-text' );\n\t\tconst record = this.getRecord();\n\n\t\treturn (\n\t\t\t<div className={ classes }\n\t\t\t\tonFocus={ this.setFocusedElement }\n\t\t\t>\n\t\t\t\t{ isSelected && this.multilineTag === 'li' && (\n\t\t\t\t\t<ListEdit\n\t\t\t\t\t\tonTagNameChange={ onTagNameChange }\n\t\t\t\t\t\ttagName={ Tagname }\n\t\t\t\t\t\tvalue={ record }\n\t\t\t\t\t\tonChange={ this.onChange }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t\t{ isSelected && ! inlineToolbar && (\n\t\t\t\t\t<BlockFormatControls>\n\t\t\t\t\t\t<FormatToolbar controls={ formattingControls } />\n\t\t\t\t\t</BlockFormatControls>\n\t\t\t\t) }\n\t\t\t\t{ isSelected && inlineToolbar && (\n\t\t\t\t\t<IsolatedEventContainer className=\"editor-rich-text__inline-toolbar block-editor-rich-text__inline-toolbar\">\n\t\t\t\t\t\t<FormatToolbar controls={ formattingControls } />\n\t\t\t\t\t</IsolatedEventContainer>\n\t\t\t\t) }\n\t\t\t\t<Autocomplete\n\t\t\t\t\tonReplace={ this.props.onReplace }\n\t\t\t\t\tcompleters={ autocompleters }\n\t\t\t\t\trecord={ record }\n\t\t\t\t\tonChange={ this.onChange }\n\t\t\t\t>\n\t\t\t\t\t{ ( { listBoxId, activeId } ) => (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<Editable\n\t\t\t\t\t\t\t\ttagName={ Tagname }\n\t\t\t\t\t\t\t\tstyle={ style }\n\t\t\t\t\t\t\t\trecord={ record }\n\t\t\t\t\t\t\t\tvalueToEditableHTML={ this.valueToEditableHTML }\n\t\t\t\t\t\t\t\tisPlaceholderVisible={ isPlaceholderVisible }\n\t\t\t\t\t\t\t\taria-label={ placeholder }\n\t\t\t\t\t\t\t\taria-autocomplete=\"list\"\n\t\t\t\t\t\t\t\taria-owns={ listBoxId }\n\t\t\t\t\t\t\t\taria-activedescendant={ activeId }\n\t\t\t\t\t\t\t\t{ ...ariaProps }\n\t\t\t\t\t\t\t\tclassName={ className }\n\t\t\t\t\t\t\t\tkey={ key }\n\t\t\t\t\t\t\t\tonPaste={ this.onPaste }\n\t\t\t\t\t\t\t\tonInput={ this.onInput }\n\t\t\t\t\t\t\t\tonCompositionEnd={ this.onCompositionEnd }\n\t\t\t\t\t\t\t\tonKeyDown={ this.onKeyDown }\n\t\t\t\t\t\t\t\tonFocus={ this.onFocus }\n\t\t\t\t\t\t\t\tonBlur={ this.onBlur }\n\t\t\t\t\t\t\t\tonMouseDown={ this.onPointerDown }\n\t\t\t\t\t\t\t\tonTouchStart={ this.onPointerDown }\n\t\t\t\t\t\t\t\tsetRef={ this.setRef }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{ isPlaceholderVisible &&\n\t\t\t\t\t\t\t\t<Tagname\n\t\t\t\t\t\t\t\t\tclassName={ classnames( 'editor-rich-text__editable block-editor-rich-text__editable', className ) }\n\t\t\t\t\t\t\t\t\tstyle={ style }\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ MultilineTag ? <MultilineTag>{ placeholder }</MultilineTag> : placeholder }\n\t\t\t\t\t\t\t\t</Tagname>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{ isSelected && <FormatEdit value={ record } onChange={ this.onChange } /> }\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t) }\n\t\t\t\t</Autocomplete>\n\t\t\t\t{ isSelected && <RemoveBrowserShortcuts /> }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nRichText.defaultProps = {\n\tformattingControls: [ 'bold', 'italic', 'link', 'strikethrough' ],\n\tformat: 'string',\n\tvalue: '',\n};\n\nconst RichTextContainer = compose( [\n\twithInstanceId,\n\twithBlockEditContext( ( context, ownProps ) => {\n\t\t// When explicitly set as not selected, do nothing.\n\t\tif ( ownProps.isSelected === false ) {\n\t\t\treturn {\n\t\t\t\tclientId: context.clientId,\n\t\t\t};\n\t\t}\n\t\t// When explicitly set as selected, use the value stored in the context instead.\n\t\tif ( ownProps.isSelected === true ) {\n\t\t\treturn {\n\t\t\t\tisSelected: context.isSelected,\n\t\t\t\tclientId: context.clientId,\n\t\t\t};\n\t\t}\n\n\t\t// Ensures that only one RichText component can be focused.\n\t\treturn {\n\t\t\tisSelected: context.isSelected && context.focusedElement === ownProps.instanceId,\n\t\t\tsetFocusedElement: context.setFocusedElement,\n\t\t\tclientId: context.clientId,\n\t\t};\n\t} ),\n\twithSelect( ( select ) => {\n\t\t// This should probably be moved to the block editor settings.\n\t\tconst { canUserUseUnfilteredHTML } = select( 'core/editor' );\n\t\tconst { isCaretWithinFormattedText } = select( 'core/block-editor' );\n\t\tconst { getFormatTypes } = select( 'core/rich-text' );\n\n\t\treturn {\n\t\t\tcanUserUseUnfilteredHTML: canUserUseUnfilteredHTML(),\n\t\t\tisCaretWithinFormattedText: isCaretWithinFormattedText(),\n\t\t\tformatTypes: getFormatTypes(),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst {\n\t\t\t__unstableMarkLastChangeAsPersistent,\n\t\t\tenterFormattedText,\n\t\t\texitFormattedText,\n\t\t} = dispatch( 'core/block-editor' );\n\n\t\treturn {\n\t\t\tonCreateUndoLevel: __unstableMarkLastChangeAsPersistent,\n\t\t\tonEnterFormattedText: enterFormattedText,\n\t\t\tonExitFormattedText: exitFormattedText,\n\t\t};\n\t} ),\n\twithSafeTimeout,\n\twithFilters( 'experimentalRichText' ),\n] )( RichText );\n\nRichTextContainer.Content = ( { value, tagName: Tag, multiline, ...props } ) => {\n\tlet html = value;\n\tlet MultilineTag;\n\n\tif ( multiline === true || multiline === 'p' || multiline === 'li' ) {\n\t\tMultilineTag = multiline === true ? 'p' : multiline;\n\t}\n\n\t// Handle deprecated `children` and `node` sources.\n\tif ( Array.isArray( value ) ) {\n\t\thtml = children.toHTML( value );\n\t}\n\n\tif ( ! html && MultilineTag ) {\n\t\thtml = `<${ MultilineTag }></${ MultilineTag }>`;\n\t}\n\n\tconst content = <RawHTML>{ html }</RawHTML>;\n\n\tif ( Tag ) {\n\t\treturn <Tag { ...omit( props, [ 'format' ] ) }>{ content }</Tag>;\n\t}\n\n\treturn content;\n};\n\nRichTextContainer.isEmpty = ( value = '' ) => {\n\t// Handle deprecated `children` and `node` sources.\n\tif ( Array.isArray( value ) ) {\n\t\treturn ! value || value.length === 0;\n\t}\n\n\treturn value.length === 0;\n};\n\nRichTextContainer.Content.defaultProps = {\n\tformat: 'string',\n\tvalue: '',\n};\n\nexport default RichTextContainer;\nexport { RichTextShortcut } from './shortcut';\nexport { RichTextToolbarButton } from './toolbar-button';\nexport { UnstableRichTextInputEvent } from './input-event';\n"]}