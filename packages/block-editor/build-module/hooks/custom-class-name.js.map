{"version":3,"sources":["@wordpress/block-editor/src/hooks/custom-class-name.js"],"names":["assign","difference","omit","classnames","Fragment","addFilter","TextControl","__","hasBlockSupport","parseWithAttributeSchema","getSaveContent","createHigherOrderComponent","InspectorAdvancedControls","addAttribute","settings","attributes","className","type","withInspectorControl","BlockEdit","props","hasCustomClassName","name","isSelected","nextValue","setAttributes","undefined","addSaveProps","extraProps","blockType","getHTMLRootElementClasses","innerHTML","parsed","source","selector","attribute","trim","split","addParsedDifference","blockAttributes","attributesSansClassName","serialized","defaultClasses","actualClasses","customClasses","length","join"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { assign, difference, omit } from 'lodash';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { Fragment } from '@wordpress/element';\nimport { addFilter } from '@wordpress/hooks';\nimport { TextControl } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport {\n\thasBlockSupport,\n\tparseWithAttributeSchema,\n\tgetSaveContent,\n} from '@wordpress/blocks';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { InspectorAdvancedControls } from '../components';\n\n/**\n * Filters registered block settings, extending attributes with anchor using ID\n * of the first node.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nexport function addAttribute( settings ) {\n\tif ( hasBlockSupport( settings, 'customClassName', true ) ) {\n\t\t// Use Lodash's assign to gracefully handle if attributes are undefined\n\t\tsettings.attributes = assign( settings.attributes, {\n\t\t\tclassName: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override the default edit UI to include a new block inspector control for\n * assigning the custom class name, if block supports custom class name.\n *\n * @param {function|Component} BlockEdit Original component.\n *\n * @return {string} Wrapped component.\n */\nexport const withInspectorControl = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\tconst hasCustomClassName = hasBlockSupport( props.name, 'customClassName', true );\n\t\tif ( hasCustomClassName && props.isSelected ) {\n\t\t\treturn (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<BlockEdit { ...props } />\n\t\t\t\t\t<InspectorAdvancedControls>\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={ __( 'Additional CSS Class' ) }\n\t\t\t\t\t\t\tvalue={ props.attributes.className || '' }\n\t\t\t\t\t\t\tonChange={ ( nextValue ) => {\n\t\t\t\t\t\t\t\tprops.setAttributes( {\n\t\t\t\t\t\t\t\t\tclassName: nextValue !== '' ? nextValue : undefined,\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</InspectorAdvancedControls>\n\t\t\t\t</Fragment>\n\t\t\t);\n\t\t}\n\n\t\treturn <BlockEdit { ...props } />;\n\t};\n}, 'withInspectorControl' );\n\n/**\n * Override props assigned to save component to inject anchor ID, if block\n * supports anchor. This is only applied if the block's save result is an\n * element and not a markup string.\n *\n * @param {Object} extraProps Additional props applied to save element.\n * @param {Object} blockType  Block type.\n * @param {Object} attributes Current block attributes.\n *\n * @return {Object} Filtered props applied to save element.\n */\nexport function addSaveProps( extraProps, blockType, attributes ) {\n\tif ( hasBlockSupport( blockType, 'customClassName', true ) && attributes.className ) {\n\t\textraProps.className = classnames( extraProps.className, attributes.className );\n\t}\n\n\treturn extraProps;\n}\n\n/**\n * Given an HTML string, returns an array of class names assigned to the root\n * element in the markup.\n *\n * @param {string} innerHTML Markup string from which to extract classes.\n *\n * @return {string[]} Array of class names assigned to the root element.\n */\nexport function getHTMLRootElementClasses( innerHTML ) {\n\tinnerHTML = `<div data-custom-class-name>${ innerHTML }</div>`;\n\n\tconst parsed = parseWithAttributeSchema( innerHTML, {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: '[data-custom-class-name] > *',\n\t\tattribute: 'class',\n\t} );\n\n\treturn parsed ? parsed.trim().split( /\\s+/ ) : [];\n}\n\n/**\n * Given a parsed set of block attributes, if the block supports custom class\n * names and an unknown class (per the block's serialization behavior) is\n * found, the unknown classes are treated as custom classes. This prevents the\n * block from being considered as invalid.\n *\n * @param {Object} blockAttributes Original block attributes.\n * @param {Object} blockType       Block type settings.\n * @param {string} innerHTML       Original block markup.\n *\n * @return {Object} Filtered block attributes.\n */\nexport function addParsedDifference( blockAttributes, blockType, innerHTML ) {\n\tif ( hasBlockSupport( blockType, 'customClassName', true ) ) {\n\t\t// To determine difference, serialize block given the known set of\n\t\t// attributes, with the exception of `className`. This will determine\n\t\t// the default set of classes. From there, any difference in innerHTML\n\t\t// can be considered as custom classes.\n\t\tconst attributesSansClassName = omit( blockAttributes, [ 'className' ] );\n\t\tconst serialized = getSaveContent( blockType, attributesSansClassName );\n\t\tconst defaultClasses = getHTMLRootElementClasses( serialized );\n\t\tconst actualClasses = getHTMLRootElementClasses( innerHTML );\n\t\tconst customClasses = difference( actualClasses, defaultClasses );\n\n\t\tif ( customClasses.length ) {\n\t\t\tblockAttributes.className = customClasses.join( ' ' );\n\t\t} else if ( serialized ) {\n\t\t\tdelete blockAttributes.className;\n\t\t}\n\t}\n\n\treturn blockAttributes;\n}\n\naddFilter( 'blocks.registerBlockType', 'core/custom-class-name/attribute', addAttribute );\naddFilter( 'editor.BlockEdit', 'core/editor/custom-class-name/with-inspector-control', withInspectorControl );\naddFilter( 'blocks.getSaveContent.extraProps', 'core/custom-class-name/save-props', addSaveProps );\naddFilter( 'blocks.getBlockAttributes', 'core/custom-class-name/addParsedDifference', addParsedDifference );\n"]}