{"version":3,"sources":["@wordpress/block-editor/src/hooks/align.js"],"names":["classnames","assign","get","has","includes","without","compose","createHigherOrderComponent","addFilter","getBlockSupport","getBlockType","hasBlockSupport","withSelect","BlockControls","BlockAlignmentToolbar","ALL_ALIGNMENTS","WIDE_ALIGNMENTS","getValidAlignments","blockAlign","hasWideBlockSupport","hasWideEnabled","validAlignments","Array","isArray","addAttribute","settings","attributes","align","type","withToolbarControls","BlockEdit","props","blockName","name","updateAlignment","nextAlign","blockType","blockDefaultAlign","setAttributes","length","isSelected","insideSelectWithDataAlign","BlockListBlock","wrapperProps","withDataAlign","select","getSettings","alignWide","addAssignedAlign","isAlignValid","className"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { assign, get, has, includes, without } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { compose, createHigherOrderComponent } from '@wordpress/compose';\nimport { addFilter } from '@wordpress/hooks';\nimport { getBlockSupport, getBlockType, hasBlockSupport } from '@wordpress/blocks';\nimport { withSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { BlockControls, BlockAlignmentToolbar } from '../components';\n\n/**\n * An array which includes all possible valid alignments,\n * used to validate if an alignment is valid or not.\n *\n * @constant\n * @type {string[]}\n*/\nconst ALL_ALIGNMENTS = [ 'left', 'center', 'right', 'wide', 'full' ];\n\n/**\n * An array which includes all wide alignments.\n * In order for this alignments to be valid they need to be supported by the block,\n * and by the theme.\n *\n * @constant\n * @type {string[]}\n*/\nconst WIDE_ALIGNMENTS = [ 'wide', 'full' ];\n\n/**\n * Returns the valid alignments.\n * Takes into consideration the aligns supported by a block, if the block supports wide controls or not and if theme supports wide controls or not.\n * Exported just for testing purposes, not exported outside the module.\n *\n * @param {?boolean|string[]} blockAlign          Aligns supported by the block.\n * @param {?boolean}          hasWideBlockSupport True if block supports wide alignments. And False otherwise.\n * @param {?boolean}          hasWideEnabled      True if theme supports wide alignments. And False otherwise.\n *\n * @return {string[]} Valid alignments.\n */\nexport function getValidAlignments( blockAlign, hasWideBlockSupport = true, hasWideEnabled = true ) {\n\tlet validAlignments;\n\tif ( Array.isArray( blockAlign ) ) {\n\t\tvalidAlignments = blockAlign;\n\t} else if ( blockAlign === true ) {\n\t\t// `true` includes all alignments...\n\t\tvalidAlignments = ALL_ALIGNMENTS;\n\t} else {\n\t\tvalidAlignments = [];\n\t}\n\n\tif (\n\t\t! hasWideEnabled ||\n\t\t( blockAlign === true && ! hasWideBlockSupport )\n\t) {\n\t\treturn without( validAlignments, ...WIDE_ALIGNMENTS );\n\t}\n\n\treturn validAlignments;\n}\n\n/**\n * Filters registered block settings, extending attributes to include `align`.\n *\n * @param  {Object} settings Original block settings\n * @return {Object}          Filtered block settings\n */\nexport function addAttribute( settings ) {\n\t// allow blocks to specify their own attribute definition with default values if needed.\n\tif ( has( settings.attributes, [ 'align', 'type' ] ) ) {\n\t\treturn settings;\n\t}\n\tif ( hasBlockSupport( settings, 'align' ) ) {\n\t\t// Use Lodash's assign to gracefully handle if attributes are undefined\n\t\tsettings.attributes = assign( settings.attributes, {\n\t\t\talign: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override the default edit UI to include new toolbar controls for block\n * alignment, if block defines support.\n *\n * @param  {Function} BlockEdit Original component\n * @return {Function}           Wrapped component\n */\nexport const withToolbarControls = createHigherOrderComponent(\n\t( BlockEdit ) => (\n\t\t( props ) => {\n\t\t\tconst { name: blockName } = props;\n\t\t\t// Compute valid alignments without taking into account,\n\t\t\t// if the theme supports wide alignments or not.\n\t\t\t// BlockAlignmentToolbar takes into account the theme support.\n\t\t\tconst validAlignments = getValidAlignments(\n\t\t\t\tgetBlockSupport( blockName, 'align' ),\n\t\t\t\thasBlockSupport( blockName, 'alignWide', true ),\n\t\t\t);\n\n\t\t\tconst updateAlignment = ( nextAlign ) => {\n\t\t\t\tif ( ! nextAlign ) {\n\t\t\t\t\tconst blockType = getBlockType( props.name );\n\t\t\t\t\tconst blockDefaultAlign = get( blockType, [ 'attributes', 'align', 'default' ] );\n\t\t\t\t\tif ( blockDefaultAlign ) {\n\t\t\t\t\t\tnextAlign = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprops.setAttributes( { align: nextAlign } );\n\t\t\t};\n\n\t\t\treturn [\n\t\t\t\tvalidAlignments.length > 0 && props.isSelected && (\n\t\t\t\t\t<BlockControls key=\"align-controls\">\n\t\t\t\t\t\t<BlockAlignmentToolbar\n\t\t\t\t\t\t\tvalue={ props.attributes.align }\n\t\t\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\t\t\tcontrols={ validAlignments }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</BlockControls>\n\t\t\t\t),\n\t\t\t\t<BlockEdit key=\"edit\" { ...props } />,\n\t\t\t];\n\t\t}\n\t),\n\t'withToolbarControls'\n);\n\n// Exported just for testing purposes, not exported outside the module.\nexport const insideSelectWithDataAlign = ( BlockListBlock ) => (\n\t( props ) => {\n\t\tconst { name, attributes, hasWideEnabled } = props;\n\t\tconst { align } = attributes;\n\t\tconst validAlignments = getValidAlignments(\n\t\t\tgetBlockSupport( name, 'align' ),\n\t\t\thasBlockSupport( name, 'alignWide', true ),\n\t\t\thasWideEnabled\n\t\t);\n\n\t\tlet wrapperProps = props.wrapperProps;\n\t\tif ( includes( validAlignments, align ) ) {\n\t\t\twrapperProps = { ...wrapperProps, 'data-align': align };\n\t\t}\n\n\t\treturn <BlockListBlock { ...props } wrapperProps={ wrapperProps } />;\n\t}\n);\n\n/**\n * Override the default block element to add alignment wrapper props.\n *\n * @param  {Function} BlockListBlock Original component\n * @return {Function}                Wrapped component\n */\nexport const withDataAlign = createHigherOrderComponent(\n\tcompose( [\n\t\twithSelect(\n\t\t\t( select ) => {\n\t\t\t\tconst { getSettings } = select( 'core/block-editor' );\n\t\t\t\treturn {\n\t\t\t\t\thasWideEnabled: !! getSettings().alignWide,\n\t\t\t\t};\n\t\t\t}\n\t\t),\n\t\tinsideSelectWithDataAlign,\n\t] )\n);\n\n/**\n * Override props assigned to save component to inject alignment class name if\n * block supports it.\n *\n * @param  {Object} props      Additional props applied to save element\n * @param  {Object} blockType  Block type\n * @param  {Object} attributes Block attributes\n * @return {Object}            Filtered props applied to save element\n */\nexport function addAssignedAlign( props, blockType, attributes ) {\n\tconst { align } = attributes;\n\tconst blockAlign = getBlockSupport( blockType, 'align' );\n\tconst hasWideBlockSupport = hasBlockSupport( blockType, 'alignWide', true );\n\tconst isAlignValid = includes(\n\t\t// Compute valid alignments without taking into account,\n\t\t// if the theme supports wide alignments or not.\n\t\t// This way changing themes does not impacts the block save.\n\t\tgetValidAlignments( blockAlign, hasWideBlockSupport ),\n\t\talign\n\t);\n\tif ( isAlignValid ) {\n\t\tprops.className = classnames( `align${ align }`, props.className );\n\t}\n\n\treturn props;\n}\n\naddFilter( 'blocks.registerBlockType', 'core/align/addAttribute', addAttribute );\naddFilter( 'editor.BlockListBlock', 'core/editor/align/with-data-align', withDataAlign );\naddFilter( 'editor.BlockEdit', 'core/editor/align/with-toolbar-controls', withToolbarControls );\naddFilter( 'blocks.getSaveContent.extraProps', 'core/align/addAssignedAlign', addAssignedAlign );\n\n"]}