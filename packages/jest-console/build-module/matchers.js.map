{"version":3,"sources":["@wordpress/jest-console/src/matchers.js"],"names":["matcherHint","printExpected","printReceived","isEqual","reduce","some","supportedMatchers","createToBeCalledMatcher","matcherName","methodName","received","spy","calls","mock","pass","length","message","getMockName","map","assertionsNumber","createToBeCalledWithMatcher","expected","objects","expect","extend","result","matcherNameWith"],"mappings":";;;AAAA;;;AAGA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,aAArC,QAA0D,oBAA1D;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,IAA1B,QAAsC,QAAtC;AAEA;;;;AAGA,OAAOC,iBAAP,MAA8B,sBAA9B;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAEC,WAAF,EAAeC,UAAf;AAAA,SAC/B,UAAEC,QAAF,EAAgB;AACf,QAAMC,GAAG,GAAGD,QAAQ,CAAED,UAAF,CAApB;AACA,QAAMG,KAAK,GAAGD,GAAG,CAACE,IAAJ,CAASD,KAAvB;AACA,QAAME,IAAI,GAAGF,KAAK,CAACG,MAAN,GAAe,CAA5B;AACA,QAAMC,OAAO,GAAGF,IAAI,GACnB;AAAA,aACCd,WAAW,eAAUQ,WAAV,GAA0BG,GAAG,CAACM,WAAJ,EAA1B,CAAX,GACA,MADA,GAEA,mEAFA,GAGAL,KAAK,CAACM,GAAN,CAAWhB,aAAX,CAJD;AAAA,KADmB,GAMnB;AAAA,aACCF,WAAW,CAAEQ,WAAF,EAAeG,GAAG,CAACM,WAAJ,EAAf,CAAX,GACA,MADA,GAEA,sCAHD;AAAA,KAND;AAWAN,IAAAA,GAAG,CAACQ,gBAAJ,IAAwB,CAAxB;AAEA,WAAO;AACNH,MAAAA,OAAO,EAAPA,OADM;AAENF,MAAAA,IAAI,EAAJA;AAFM,KAAP;AAIA,GAtB8B;AAAA,CAAhC;;AAwBA,IAAMM,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAEZ,WAAF,EAAeC,UAAf;AAAA,SACnC,UAAEC,QAAF,EAA6B;AAAA,sCAAdW,QAAc;AAAdA,MAAAA,QAAc;AAAA;;AAC5B,QAAMV,GAAG,GAAGD,QAAQ,CAAED,UAAF,CAApB;AACA,QAAMG,KAAK,GAAGD,GAAG,CAACE,IAAJ,CAASD,KAAvB;AACA,QAAME,IAAI,GAAGT,IAAI,CAChBO,KADgB,EAEhB,UAAEU,OAAF;AAAA,aAAenB,OAAO,CAAEmB,OAAF,EAAWD,QAAX,CAAtB;AAAA,KAFgB,CAAjB;AAIA,QAAML,OAAO,GAAGF,IAAI,GACnB;AAAA,aACCd,WAAW,eAAUQ,WAAV,GAA0BG,GAAG,CAACM,WAAJ,EAA1B,CAAX,GACA,MADA,GAEA,iDAFA,GAGAhB,aAAa,CAAEoB,QAAF,CAJd;AAAA,KADmB,GAMnB;AAAA,aACCrB,WAAW,CAAEQ,WAAF,EAAeG,GAAG,CAACM,WAAJ,EAAf,CAAX,GACA,MADA,GAEA,6CAFA,GAGAhB,aAAa,CAAEoB,QAAF,CAHb,GAG4B,IAH5B,GAIA,2BAJA,GAKAT,KAAK,CAACM,GAAN,CAAWhB,aAAX,CAND;AAAA,KAND;AAcAS,IAAAA,GAAG,CAACQ,gBAAJ,IAAwB,CAAxB;AAEA,WAAO;AACNH,MAAAA,OAAO,EAAPA,OADM;AAENF,MAAAA,IAAI,EAAJA;AAFM,KAAP;AAIA,GA5BkC;AAAA,CAApC;;AA8BAS,MAAM,CAACC,MAAP,CACCpB,MAAM,CAAEE,iBAAF,EAAqB,UAAEmB,MAAF,EAAUjB,WAAV,EAAuBC,UAAvB,EAAuC;AAAA;;AACjE,MAAMiB,eAAe,aAAOlB,WAAP,SAArB;AAEA,2BACIiB,MADJ,wDAEGjB,WAFH,EAEkBD,uBAAuB,YAAOC,WAAP,GAAuBC,UAAvB,CAFzC,mCAGGiB,eAHH,EAGsBN,2BAA2B,YAAOM,eAAP,GAA2BjB,UAA3B,CAHjD;AAKA,CARK,EAQH,EARG,CADP","sourcesContent":["/**\n * External dependencies\n */\nimport { matcherHint, printExpected, printReceived } from 'jest-matcher-utils';\nimport { isEqual, reduce, some } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport supportedMatchers from './supported-matchers';\n\nconst createToBeCalledMatcher = ( matcherName, methodName ) =>\n\t( received ) => {\n\t\tconst spy = received[ methodName ];\n\t\tconst calls = spy.mock.calls;\n\t\tconst pass = calls.length > 0;\n\t\tconst message = pass ?\n\t\t\t() =>\n\t\t\t\tmatcherHint( `.not${ matcherName }`, spy.getMockName() ) +\n\t\t\t\t'\\n\\n' +\n\t\t\t\t'Expected mock function not to be called but it was called with:\\n' +\n\t\t\t\tcalls.map( printReceived ) :\n\t\t\t() =>\n\t\t\t\tmatcherHint( matcherName, spy.getMockName() ) +\n\t\t\t\t'\\n\\n' +\n\t\t\t\t'Expected mock function to be called.';\n\n\t\tspy.assertionsNumber += 1;\n\n\t\treturn {\n\t\t\tmessage,\n\t\t\tpass,\n\t\t};\n\t};\n\nconst createToBeCalledWithMatcher = ( matcherName, methodName ) =>\n\t( received, ...expected ) => {\n\t\tconst spy = received[ methodName ];\n\t\tconst calls = spy.mock.calls;\n\t\tconst pass = some(\n\t\t\tcalls,\n\t\t\t( objects ) => isEqual( objects, expected )\n\t\t);\n\t\tconst message = pass ?\n\t\t\t() =>\n\t\t\t\tmatcherHint( `.not${ matcherName }`, spy.getMockName() ) +\n\t\t\t\t'\\n\\n' +\n\t\t\t\t'Expected mock function not to be called with:\\n' +\n\t\t\t\tprintExpected( expected ) :\n\t\t\t() =>\n\t\t\t\tmatcherHint( matcherName, spy.getMockName() ) +\n\t\t\t\t'\\n\\n' +\n\t\t\t\t'Expected mock function to be called with:\\n' +\n\t\t\t\tprintExpected( expected ) + '\\n' +\n\t\t\t\t'but it was called with:\\n' +\n\t\t\t\tcalls.map( printReceived );\n\n\t\tspy.assertionsNumber += 1;\n\n\t\treturn {\n\t\t\tmessage,\n\t\t\tpass,\n\t\t};\n\t};\n\nexpect.extend(\n\treduce( supportedMatchers, ( result, matcherName, methodName ) => {\n\t\tconst matcherNameWith = `${ matcherName }With`;\n\n\t\treturn {\n\t\t\t...result,\n\t\t\t[ matcherName ]: createToBeCalledMatcher( `.${ matcherName }`, methodName ),\n\t\t\t[ matcherNameWith ]: createToBeCalledWithMatcher( `.${ matcherNameWith }`, methodName ),\n\t\t};\n\t}, {} )\n);\n"]}