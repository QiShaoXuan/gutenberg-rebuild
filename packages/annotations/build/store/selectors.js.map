{"version":3,"sources":["@wordpress/annotations/src/store/selectors.js"],"names":["EMPTY_ARRAY","__experimentalGetAnnotationsForBlock","state","blockClientId","filter","annotation","selector","__experimentalGetAllAnnotationsForBlock","__experimentalGetAnnotationsForRichText","richTextIdentifier","map","range","other","__experimentalGetAnnotations","annotations"],"mappings":";;;;;;;;;;;;;;AAGA;;AACA;;AAJA;;;;AAMA;;;;;;;;;AASA,IAAMA,WAAW,GAAG,EAApB;AAEA;;;;;;;;;AAQO,IAAMC,oCAAoC,GAAG,qBACnD,UAAEC,KAAF,EAASC,aAAT,EAA4B;AAC3B,SAAO,iBAAKD,KAAL,EAAYC,aAAZ,EAA2B,EAA3B,EAAgCC,MAAhC,CAAwC,UAAEC,UAAF,EAAkB;AAChE,WAAOA,UAAU,CAACC,QAAX,KAAwB,OAA/B;AACA,GAFM,CAAP;AAGA,CALkD,EAMnD,UAAEJ,KAAF,EAASC,aAAT;AAAA,SAA4B,CAC3B,iBAAKD,KAAL,EAAYC,aAAZ,EAA2BH,WAA3B,CAD2B,CAA5B;AAAA,CANmD,CAA7C;;;;AAWA,IAAMO,uCAAuC,GAAG,SAA1CA,uCAA0C,CAAUL,KAAV,EAAiBC,aAAjB,EAAiC;AACvF,SAAO,iBAAKD,KAAL,EAAYC,aAAZ,EAA2BH,WAA3B,CAAP;AACA,CAFM;AAIP;;;;;;;;;;;;;;;;AAYO,IAAMQ,uCAAuC,GAAG,qBACtD,UAAEN,KAAF,EAASC,aAAT,EAAwBM,kBAAxB,EAAgD;AAC/C,SAAO,iBAAKP,KAAL,EAAYC,aAAZ,EAA2B,EAA3B,EAAgCC,MAAhC,CAAwC,UAAEC,UAAF,EAAkB;AAChE,WAAOA,UAAU,CAACC,QAAX,KAAwB,OAAxB,IACNG,kBAAkB,KAAKJ,UAAU,CAACI,kBADnC;AAEA,GAHM,EAGHC,GAHG,CAGE,UAAEL,UAAF,EAAkB;AAAA,QAClBM,KADkB,GACEN,UADF,CAClBM,KADkB;AAAA,QACRC,KADQ,0CACEP,UADF;AAG1B,2CACIM,KADJ,EAEIC,KAFJ;AAIA,GAVM,CAAP;AAWA,CAbqD,EActD,UAAEV,KAAF,EAASC,aAAT;AAAA,SAA4B,CAC3B,iBAAKD,KAAL,EAAYC,aAAZ,EAA2BH,WAA3B,CAD2B,CAA5B;AAAA,CAdsD,CAAhD;AAmBP;;;;;;;;;;AAMO,SAASa,4BAAT,CAAuCX,KAAvC,EAA+C;AACrD,SAAO,qBAASA,KAAT,EAAgB,UAAEY,WAAF,EAAmB;AACzC,WAAOA,WAAP;AACA,GAFM,CAAP;AAGA","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { get, flatMap } from 'lodash';\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns the annotations for a specific client ID.\n *\n * @param {Object} state Editor state.\n * @param {string} clientId The ID of the block to get the annotations for.\n *\n * @return {Array} The annotations applicable to this block.\n */\nexport const __experimentalGetAnnotationsForBlock = createSelector(\n\t( state, blockClientId ) => {\n\t\treturn get( state, blockClientId, [] ).filter( ( annotation ) => {\n\t\t\treturn annotation.selector === 'block';\n\t\t} );\n\t},\n\t( state, blockClientId ) => [\n\t\tget( state, blockClientId, EMPTY_ARRAY ),\n\t]\n);\n\nexport const __experimentalGetAllAnnotationsForBlock = function( state, blockClientId ) {\n\treturn get( state, blockClientId, EMPTY_ARRAY );\n};\n\n/**\n * Returns the annotations that apply to the given RichText instance.\n *\n * Both a blockClientId and a richTextIdentifier are required. This is because\n * a block might have multiple `RichText` components. This does mean that every\n * block needs to implement annotations itself.\n *\n * @param {Object} state              Editor state.\n * @param {string} blockClientId      The client ID for the block.\n * @param {string} richTextIdentifier Unique identifier that identifies the given RichText.\n * @return {Array} All the annotations relevant for the `RichText`.\n */\nexport const __experimentalGetAnnotationsForRichText = createSelector(\n\t( state, blockClientId, richTextIdentifier ) => {\n\t\treturn get( state, blockClientId, [] ).filter( ( annotation ) => {\n\t\t\treturn annotation.selector === 'range' &&\n\t\t\t\trichTextIdentifier === annotation.richTextIdentifier;\n\t\t} ).map( ( annotation ) => {\n\t\t\tconst { range, ...other } = annotation;\n\n\t\t\treturn {\n\t\t\t\t...range,\n\t\t\t\t...other,\n\t\t\t};\n\t\t} );\n\t},\n\t( state, blockClientId ) => [\n\t\tget( state, blockClientId, EMPTY_ARRAY ),\n\t]\n);\n\n/**\n * Returns all annotations in the editor state.\n *\n * @param {Object} state Editor state.\n * @return {Array} All annotations currently applied.\n */\nexport function __experimentalGetAnnotations( state ) {\n\treturn flatMap( state, ( annotations ) => {\n\t\treturn annotations;\n\t} );\n}\n"]}