{"version":3,"sources":["@wordpress/annotations/src/format/annotation.js"],"names":["memize","__","applyFormat","removeFormat","FORMAT_NAME","ANNOTATION_ATTRIBUTE_PREFIX","STORE_KEY","applyAnnotations","record","annotations","forEach","annotation","start","end","text","length","className","source","id","type","attributes","removeAnnotations","retrieveAnnotationPositions","formats","positions","characterFormats","i","filter","format","replace","hasOwnProperty","updateAnnotationsWithPositions","removeAnnotation","updateAnnotationRange","currentAnnotation","position","createPrepareEditableTree","props","getAnnotationObject","name","title","tagName","edit","__experimentalGetPropsForEditableTreePreparation","select","richTextIdentifier","blockClientId","__experimentalGetAnnotationsForRichText","__experimentalCreatePrepareEditableTree","__experimentalGetPropsForEditableTreeChangeHandler","dispatch","__experimentalRemoveAnnotation","__experimentalUpdateAnnotationRange","__experimentalCreateOnChangeEditableValue"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport memize from 'memize';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { applyFormat, removeFormat } from '@wordpress/rich-text';\n\nconst FORMAT_NAME = 'core/annotation';\n\nconst ANNOTATION_ATTRIBUTE_PREFIX = 'annotation-text-';\nconst STORE_KEY = 'core/annotations';\n\n/**\n * Applies given annotations to the given record.\n *\n * @param {Object} record The record to apply annotations to.\n * @param {Array} annotations The annotation to apply.\n * @return {Object} A record with the annotations applied.\n */\nexport function applyAnnotations( record, annotations = [] ) {\n\tannotations.forEach( ( annotation ) => {\n\t\tlet { start, end } = annotation;\n\n\t\tif ( start > record.text.length ) {\n\t\t\tstart = record.text.length;\n\t\t}\n\n\t\tif ( end > record.text.length ) {\n\t\t\tend = record.text.length;\n\t\t}\n\n\t\tconst className = ANNOTATION_ATTRIBUTE_PREFIX + annotation.source;\n\t\tconst id = ANNOTATION_ATTRIBUTE_PREFIX + annotation.id;\n\n\t\trecord = applyFormat(\n\t\t\trecord,\n\t\t\t{\n\t\t\t\ttype: FORMAT_NAME, attributes: {\n\t\t\t\t\tclassName,\n\t\t\t\t\tid,\n\t\t\t\t},\n\t\t\t},\n\t\t\tstart,\n\t\t\tend\n\t\t);\n\t} );\n\n\treturn record;\n}\n\n/**\n * Removes annotations from the given record.\n *\n * @param {Object} record Record to remove annotations from.\n * @return {Object} The cleaned record.\n */\nexport function removeAnnotations( record ) {\n\treturn removeFormat( record, 'core/annotation', 0, record.text.length );\n}\n\n/**\n * Retrieves the positions of annotations inside an array of formats.\n *\n * @param {Array} formats Formats with annotations in there.\n * @return {Object} ID keyed positions of annotations.\n */\nfunction retrieveAnnotationPositions( formats ) {\n\tconst positions = {};\n\n\tformats.forEach( ( characterFormats, i ) => {\n\t\tcharacterFormats = characterFormats || [];\n\t\tcharacterFormats = characterFormats.filter( ( format ) => format.type === FORMAT_NAME );\n\t\tcharacterFormats.forEach( ( format ) => {\n\t\t\tlet { id } = format.attributes;\n\t\t\tid = id.replace( ANNOTATION_ATTRIBUTE_PREFIX, '' );\n\n\t\t\tif ( ! positions.hasOwnProperty( id ) ) {\n\t\t\t\tpositions[ id ] = {\n\t\t\t\t\tstart: i,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Annotations refer to positions between characters.\n\t\t\t// Formats refer to the character themselves.\n\t\t\t// So we need to adjust for that here.\n\t\t\tpositions[ id ].end = i + 1;\n\t\t} );\n\t} );\n\n\treturn positions;\n}\n\n/**\n * Updates annotations in the state based on positions retrieved from RichText.\n *\n * @param {Array}    annotations           The annotations that are currently applied.\n * @param {Array}    positions             The current positions of the given annotations.\n * @param {Function} removeAnnotation      Function to remove an annotation from the state.\n * @param {Function} updateAnnotationRange Function to update an annotation range in the state.\n */\nfunction updateAnnotationsWithPositions( annotations, positions, { removeAnnotation, updateAnnotationRange } ) {\n\tannotations.forEach( ( currentAnnotation ) => {\n\t\tconst position = positions[ currentAnnotation.id ];\n\t\t// If we cannot find an annotation, delete it.\n\t\tif ( ! position ) {\n\t\t\t// Apparently the annotation has been removed, so remove it from the state:\n\t\t\t// Remove...\n\t\t\tremoveAnnotation( currentAnnotation.id );\n\t\t\treturn;\n\t\t}\n\n\t\tconst { start, end } = currentAnnotation;\n\t\tif ( start !== position.start || end !== position.end ) {\n\t\t\tupdateAnnotationRange( currentAnnotation.id, position.start, position.end );\n\t\t}\n\t} );\n}\n\n/**\n * Create prepareEditableTree memoized based on the annotation props.\n *\n * @param {Object} The props with annotations in them.\n *\n * @return {Function} The prepareEditableTree.\n */\nconst createPrepareEditableTree = memize( ( props ) => {\n\tconst { annotations } = props;\n\n\treturn ( formats, text ) => {\n\t\tif ( annotations.length === 0 ) {\n\t\t\treturn formats;\n\t\t}\n\n\t\tlet record = { formats, text };\n\t\trecord = applyAnnotations( record, annotations );\n\t\treturn record.formats;\n\t};\n} );\n\n/**\n * Returns the annotations as a props object. Memoized to prevent re-renders.\n *\n * @param {Array} The annotations to put in the object.\n *\n * @return {Object} The annotations props object.\n */\nconst getAnnotationObject = memize( ( annotations ) => {\n\treturn {\n\t\tannotations,\n\t};\n} );\n\nexport const annotation = {\n\tname: FORMAT_NAME,\n\ttitle: __( 'Annotation' ),\n\ttagName: 'mark',\n\tclassName: 'annotation-text',\n\tattributes: {\n\t\tclassName: 'class',\n\t\tid: 'id',\n\t},\n\tedit() {\n\t\treturn null;\n\t},\n\t__experimentalGetPropsForEditableTreePreparation( select, { richTextIdentifier, blockClientId } ) {\n\t\treturn getAnnotationObject( select( STORE_KEY ).__experimentalGetAnnotationsForRichText( blockClientId, richTextIdentifier ) );\n\t},\n\t__experimentalCreatePrepareEditableTree: createPrepareEditableTree,\n\t__experimentalGetPropsForEditableTreeChangeHandler( dispatch ) {\n\t\treturn {\n\t\t\tremoveAnnotation: dispatch( STORE_KEY ).__experimentalRemoveAnnotation,\n\t\t\tupdateAnnotationRange: dispatch( STORE_KEY ).__experimentalUpdateAnnotationRange,\n\t\t};\n\t},\n\t__experimentalCreateOnChangeEditableValue( props ) {\n\t\treturn ( formats ) => {\n\t\t\tconst positions = retrieveAnnotationPositions( formats );\n\t\t\tconst { removeAnnotation, updateAnnotationRange, annotations } = props;\n\n\t\t\tupdateAnnotationsWithPositions( annotations, positions, { removeAnnotation, updateAnnotationRange } );\n\t\t};\n\t},\n};\n"]}